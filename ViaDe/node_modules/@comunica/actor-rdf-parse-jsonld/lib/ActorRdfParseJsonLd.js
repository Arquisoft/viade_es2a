"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bus_rdf_parse_1 = require("@comunica/bus-rdf-parse");
const http_link_header_1 = require("http-link-header");
const jsonld_streaming_parser_1 = require("jsonld-streaming-parser");
const DocumentLoaderMediated_1 = require("./DocumentLoaderMediated");
/**
 * A JSON-LD RDF Parse actor that listens on the 'rdf-parse' bus.
 *
 * It is able to parse JSON-LD-based RDF serializations and announce the presence of them by media type.
 */
class ActorRdfParseJsonLd extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {
    constructor(args) {
        super(args);
    }
    async runHandle(action, mediaType, actionContext) {
        // Try to extract a JSON-LD context link header (https://w3c.github.io/json-ld-syntax/#interpreting-json-as-json-ld)
        let context;
        if (mediaType !== 'application/ld+json' && action.headers && action.headers.has('Link')) {
            const linkHeader = http_link_header_1.parse(action.headers.get('Link'));
            for (const link of linkHeader.get('rel', 'http://www.w3.org/ns/json-ld#context')) {
                if (link.type === 'application/ld+json') {
                    if (context) {
                        throw new Error('Multiple JSON-LD context link headers were found on ' + action.baseIRI);
                    }
                    context = link.uri;
                }
            }
        }
        // Parse the JSON-LD
        const quads = new jsonld_streaming_parser_1.JsonLdParser({
            allowOutOfOrderContext: true,
            baseIRI: action.baseIRI,
            context,
            documentLoader: new DocumentLoaderMediated_1.DocumentLoaderMediated(this.mediatorHttp, actionContext),
        }).import(action.input);
        return { quads };
    }
}
exports.ActorRdfParseJsonLd = ActorRdfParseJsonLd;
//# sourceMappingURL=ActorRdfParseJsonLd.js.map