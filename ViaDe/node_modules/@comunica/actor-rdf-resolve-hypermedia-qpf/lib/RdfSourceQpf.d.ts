import { ISearchForm } from "@comunica/actor-rdf-metadata-extract-hydra-controls";
import { IActionRdfDereference, IActorRdfDereferenceOutput } from "@comunica/bus-rdf-dereference";
import { IActionRdfMetadata, IActorRdfMetadataOutput } from "@comunica/bus-rdf-metadata";
import { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput } from "@comunica/bus-rdf-metadata-extract";
import { ActionContext, Actor, IActorTest, Mediator } from "@comunica/core";
import { AsyncIterator } from "asynciterator";
import * as RDF from "rdf-js";
/**
 * An RDF source that executes a quad pattern over a QPF interface and fetches its first page.
 */
export declare class RdfSourceQpf implements RDF.Source {
    readonly searchForm: ISearchForm;
    private readonly mediatorMetadata;
    private readonly mediatorMetadataExtract;
    private readonly mediatorRdfDereference;
    private readonly subjectUri;
    private readonly predicateUri;
    private readonly objectUri;
    private readonly graphUri?;
    private readonly context;
    private readonly cachedQuads;
    constructor(mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>, IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>, mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>, mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>, subjectUri: string, predicateUri: string, objectUri: string, graphUri: string, metadata: {
        [id: string]: any;
    }, context: ActionContext, initialQuads?: RDF.Stream);
    /**
     * Get a first QPF search form.
     * @param {{[p: string]: any}} metadata A metadata object.
     * @return {ISearchForm} A search form, or null if none could be found.
     */
    getSearchForm(metadata: {
        [id: string]: any;
    }): ISearchForm;
    /**
     * Create a QPF fragment IRI for the given quad pattern.
     * @param {ISearchForm} searchForm A search form.
     * @param {Term} subject A term or null.
     * @param {Term} predicate A term or null.
     * @param {Term} object A term or null.
     * @param {Term} graph A term or null.
     * @return {string} A URI.
     */
    createFragmentUri(searchForm: ISearchForm, subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): string;
    match(subject?: RegExp | RDF.Term, predicate?: RegExp | RDF.Term, object?: RegExp | RDF.Term, graph?: RegExp | RDF.Term): RDF.Stream;
    protected getPatternId(subject?: RDF.Term, predicate?: RDF.Term, object?: RDF.Term, graph?: RDF.Term): string;
    protected cacheQuads(quads: AsyncIterator<RDF.Quad>, subject?: RDF.Term, predicate?: RDF.Term, object?: RDF.Term, graph?: RDF.Term): void;
    protected getCachedQuads(subject?: RDF.Term, predicate?: RDF.Term, object?: RDF.Term, graph?: RDF.Term): AsyncIterator<RDF.Quad>;
}
