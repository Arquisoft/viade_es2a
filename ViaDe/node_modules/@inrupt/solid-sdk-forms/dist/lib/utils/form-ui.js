"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var query_ldflex_1 = require("@solid/query-ldflex");
var solid_auth_client_1 = require("solid-auth-client");
var uuid_1 = require("uuid");
var _constants_1 = require("@constants");
var _constants_2 = require("@constants");
/**
 * Find prefix context to add into object property
 * @param node
 */
function findContext(node) {
    var contexts = Object.keys(_constants_1.CONTEXT['@context']);
    var prefix = '';
    for (var _i = 0, contexts_1 = contexts; _i < contexts_1.length; _i++) {
        var context = contexts_1[_i];
        if (node.includes(_constants_1.CONTEXT['@context'][context])) {
            prefix = context + ":";
            return prefix;
        }
    }
    return prefix;
}
/**
 * Capitalize words into string
 * @param word
 */
function capitalize(word) {
    return word.replace(/(?:^|\s)\S/g, function (letter) {
        return letter.toUpperCase();
    });
}
/**
 * Get Label from external sources
 * @param property
 */
function findLabel(property) {
    return __awaiter(this, void 0, void 0, function () {
        var vocabDoc, vocabLabel, label;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(property && property.includes('#'))) return [3 /*break*/, 2];
                    vocabDoc = getFetchUrl(property.split('#')[0]);
                    return [4 /*yield*/, query_ldflex_1.default.from(vocabDoc)[property].label];
                case 1:
                    vocabLabel = _a.sent();
                    if (vocabLabel && vocabLabel.value) {
                        return [2 /*return*/, vocabLabel.value];
                    }
                    else {
                        label = property.split('#')[1];
                        return [2 /*return*/, capitalize(label.replace(/[^a-zA-Z ]/g, ' '))];
                    }
                    _a.label = 2;
                case 2: return [2 /*return*/, 'noLabel'];
            }
        });
    });
}
/**
 * Return a version of the property that includes https, to work around https/http mismatched domains
 * This is applicable for a few select vocabularies, including
 * @param property
 */
function getFetchUrl(property) {
    if (property && property.includes('http')) {
        var newUrl = new URL(property);
        return 'https://' + newUrl.hostname + newUrl.pathname;
    }
    else {
        return property;
    }
}
/**
 * Get Predicate name from string
 * @param predicate
 */
function getPredicateName(predicate) {
    var prefix = findContext(predicate);
    if (predicate.includes('title')) {
        return prefix + "title";
    }
    if (predicate.includes('#')) {
        return "" + prefix + predicate.split('#')[1];
    }
    if (predicate.lastIndexOf('ui:')) {
        return "" + prefix + predicate.split('ui:')[1];
    }
    return null;
}
function getPropertyValue(field, property) {
    return __awaiter(this, void 0, void 0, function () {
        var propertyProxy, updatedProperty;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    updatedProperty = changeHostProtocol(field);
                    if (property.includes('ui#values')) {
                        return [2 /*return*/, loopList(query_ldflex_1.default.from(updatedProperty)[field][property])];
                    }
                    return [4 /*yield*/, query_ldflex_1.default.from(updatedProperty)[field][property]];
                case 1:
                    propertyProxy = _a.sent();
                    return [2 /*return*/, propertyProxy && propertyProxy.value];
            }
        });
    });
}
function changeHostProtocol(property) {
    if (property.includes('http')) {
        var protocol = window.location.href.split(':')[0];
        if (protocol === 'https') {
            return property.replace(/(^\w+:|^)\/\//, protocol + "://");
        }
    }
    return property;
}
/**
 * Convert turtle to Json-ld object
 * @param document
 * @param partsPath
 */
function turtleToFormUi(document) {
    var e_1, _a, e_2, _b;
    return __awaiter(this, void 0, void 0, function () {
        var fields, doc, partsPath, parts, parts_1, parts_1_1, field, subjectKey, subjectPrefix_1, _c, _d, property, partsFields_1, propertyValue, propertyKey, newField, e_2_1, label, e_1_1;
        var _e, _f, _g, _h;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    fields = {};
                    return [4 /*yield*/, document];
                case 1:
                    doc = _j.sent();
                    partsPath = 'http://www.w3.org/ns/ui#parts';
                    return [4 /*yield*/, loopList(doc[partsPath])];
                case 2:
                    parts = _j.sent();
                    _j.label = 3;
                case 3:
                    _j.trys.push([3, 24, 25, 30]);
                    parts_1 = __asyncValues(parts);
                    _j.label = 4;
                case 4: return [4 /*yield*/, parts_1.next()];
                case 5:
                    if (!(parts_1_1 = _j.sent(), !parts_1_1.done)) return [3 /*break*/, 23];
                    field = parts_1_1.value;
                    subjectKey = getPredicateName(field);
                    subjectPrefix_1 = "subject:" + subjectKey;
                    _j.label = 6;
                case 6:
                    _j.trys.push([6, 14, 15, 20]);
                    _c = __asyncValues(query_ldflex_1.default[field].properties);
                    _j.label = 7;
                case 7: return [4 /*yield*/, _c.next()];
                case 8:
                    if (!(_d = _j.sent(), !_d.done)) return [3 /*break*/, 13];
                    property = _d.value;
                    partsFields_1 = {};
                    return [4 /*yield*/, getPropertyValue(field, property)
                        /**
                         * If property exist into the subject we added it into the json-ld object
                         */
                    ];
                case 9:
                    propertyValue = _j.sent();
                    if (!(property.includes('parts') && propertyValue)) return [3 /*break*/, 11];
                    return [4 /*yield*/, turtleToFormUi(query_ldflex_1.default[field])];
                case 10:
                    partsFields_1 = _j.sent();
                    _j.label = 11;
                case 11:
                    propertyKey = getPredicateName(property);
                    newField = (_e = {},
                        _e[subjectPrefix_1] = __assign({}, fields[subjectPrefix_1], (_f = {}, _f[propertyKey] = Object.keys(partsFields_1).length === 0 ? propertyValue : partsFields_1, _f)),
                        _e);
                    if (!propertyValue) {
                        newField = {};
                    }
                    fields = __assign({}, fields, newField);
                    _j.label = 12;
                case 12: return [3 /*break*/, 7];
                case 13: return [3 /*break*/, 20];
                case 14:
                    e_2_1 = _j.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 20];
                case 15:
                    _j.trys.push([15, , 18, 19]);
                    if (!(_d && !_d.done && (_b = _c.return))) return [3 /*break*/, 17];
                    return [4 /*yield*/, _b.call(_c)];
                case 16:
                    _j.sent();
                    _j.label = 17;
                case 17: return [3 /*break*/, 19];
                case 18:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 19: return [7 /*endfinally*/];
                case 20:
                    if (!(!fields[subjectPrefix_1][_constants_2.UI.LABEL] &&
                        !fields[subjectPrefix_1][_constants_2.UI.PARTS] &&
                        fields[subjectPrefix_1][_constants_2.UI.PROPERTY])) return [3 /*break*/, 22];
                    return [4 /*yield*/, findLabel(fields[subjectPrefix_1][_constants_2.UI.PROPERTY])];
                case 21:
                    label = _j.sent();
                    fields = __assign({}, fields, (_g = {}, _g[subjectPrefix_1] = __assign({}, fields[subjectPrefix_1], (_h = {}, _h[_constants_2.UI.LABEL] = label, _h)), _g));
                    _j.label = 22;
                case 22: return [3 /*break*/, 4];
                case 23: return [3 /*break*/, 30];
                case 24:
                    e_1_1 = _j.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 30];
                case 25:
                    _j.trys.push([25, , 28, 29]);
                    if (!(parts_1_1 && !parts_1_1.done && (_a = parts_1.return))) return [3 /*break*/, 27];
                    return [4 /*yield*/, _a.call(parts_1)];
                case 26:
                    _j.sent();
                    _j.label = 27;
                case 27: return [3 /*break*/, 29];
                case 28:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 29: return [7 /*endfinally*/];
                case 30: return [2 /*return*/, fields];
            }
        });
    });
}
/**
 * Get the subject prefix
 * @param document
 */
function subjectPrefix(document) {
    if (document.includes('#')) {
        return document.split('#')[0] + "#";
    }
    return document + "#";
}
function existDocument(document) {
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, solid_auth_client_1.default.fetch(document, { method: 'GET' })];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.status !== 404];
            }
        });
    });
}
function partsFields(childs, options) {
    return __awaiter(this, void 0, void 0, function () {
        var uniqueName, fieldObject, value, property, podUri, _a, _b, _c, _d;
        var _e, _f, _g;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    uniqueName = uuid_1.default();
                    fieldObject = options.fieldObject, value = options.value, property = options.property, podUri = options.podUri;
                    _e = {};
                    _a = _constants_2.UI.PARTS;
                    _b = [{}, childs[_constants_2.UI.PARTS]];
                    _f = {};
                    _c = uniqueName;
                    _d = [(_g = {}, _g[_constants_2.UI.NAME] = uniqueName, _g[_constants_2.UI.VALUE] = value, _g)];
                    return [4 /*yield*/, mapFormModelWithData(fieldObject, value, property, podUri)];
                case 1: return [2 /*return*/, (_e[_a] = __assign.apply(void 0, _b.concat([(_f[_c] = __assign.apply(void 0, _d.concat([(_h.sent())])), _f)])),
                        _e)];
            }
        });
    });
}
function getSubjectLinkId(currentLink) {
    var id = Date.now();
    if (currentLink && currentLink.includes('#')) {
        return currentLink.split('#')[0] + "#" + id;
    }
    return currentLink + "#" + id;
}
function getClonePart(childs) {
    var _a;
    return __assign({}, childs, (_a = {}, _a[_constants_2.UI.CLONE_PARTS] = childs[_constants_2.UI.PARTS], _a));
}
/**
 * Updates the formObject with the new values if something has been updated in the podUri's turtle file
 * @param formObject
 * @param podUri
 */
function mapFormObjectWithData(formObject, podUri) {
    var e_3, _a;
    return __awaiter(this, void 0, void 0, function () {
        var updatedFormObject, fields, fields_1, fields_1_1, field, currentField, result, e_3_1;
        var _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    updatedFormObject = __assign({}, formObject);
                    fields = Object.keys(formObject);
                    // Clearing cache to force the podUri to be requested again
                    return [4 /*yield*/, query_ldflex_1.default.clearCache(podUri.split('#')[0])
                        /**
                         * Looping into each of the form's updated fields to compare with what the actual data has
                         */
                    ];
                case 1:
                    // Clearing cache to force the podUri to be requested again
                    _d.sent();
                    _d.label = 2;
                case 2:
                    _d.trys.push([2, 11, 12, 17]);
                    fields_1 = __asyncValues(fields);
                    _d.label = 3;
                case 3: return [4 /*yield*/, fields_1.next()];
                case 4:
                    if (!(fields_1_1 = _d.sent(), !fields_1_1.done)) return [3 /*break*/, 10];
                    field = fields_1_1.value;
                    currentField = formObject[field];
                    result = void 0;
                    if (!currentField.parent) return [3 /*break*/, 6];
                    return [4 /*yield*/, query_ldflex_1.default[currentField.parent[_constants_2.UI.VALUE]][currentField[_constants_2.UI.PROPERTY]]];
                case 5:
                    result = _d.sent();
                    return [3 /*break*/, 8];
                case 6: return [4 /*yield*/, query_ldflex_1.default[currentField[_constants_2.UI.BASE]][currentField[_constants_2.UI.PROPERTY]]];
                case 7:
                    result = _d.sent();
                    _d.label = 8;
                case 8:
                    updatedFormObject = __assign({}, updatedFormObject, (_b = {}, _b[field] = __assign({}, currentField, (_c = {}, _c[_constants_2.UI.OLDVALUE] = result.value, _c)), _b));
                    _d.label = 9;
                case 9: return [3 /*break*/, 3];
                case 10: return [3 /*break*/, 17];
                case 11:
                    e_3_1 = _d.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 17];
                case 12:
                    _d.trys.push([12, , 15, 16]);
                    if (!(fields_1_1 && !fields_1_1.done && (_a = fields_1.return))) return [3 /*break*/, 14];
                    return [4 /*yield*/, _a.call(fields_1)];
                case 13:
                    _d.sent();
                    _d.label = 14;
                case 14: return [3 /*break*/, 16];
                case 15:
                    if (e_3) throw e_3.error;
                    return [7 /*endfinally*/];
                case 16: return [7 /*endfinally*/];
                case 17: return [2 /*return*/, updatedFormObject];
            }
        });
    });
}
exports.mapFormObjectWithData = mapFormObjectWithData;
function existPodUri(podUri) {
    return podUri.includes('http') && podUri && podUri !== '';
}
/**
 *  Form Model with user data pod
 * @param modelUi
 * @param podUri
 */
function mapFormModelWithData(modelUi, podUri, parentProperty, parentUri) {
    var e_4, _a, e_5, _b;
    return __awaiter(this, void 0, void 0, function () {
        var parts, fields, newModelUi, fields_2, fields_2_1, fieldValue, fieldObject, property, isMultiple, isGroup, hasParts, parentValue, childs, updatedField, newProperty, result, _c, _d, field, _e, existField, _f, _g, fieldData, value, e_5_1, idLink, parentPro, _h, objectValue, e_4_1;
        var _j, _k, _l, _m, _o, _p;
        return __generator(this, function (_q) {
            switch (_q.label) {
                case 0:
                    if (!(podUri.includes('#') && !parentUri && !parentProperty)) return [3 /*break*/, 2];
                    return [4 /*yield*/, query_ldflex_1.default.clearCache(podUri.split('#')[0])];
                case 1:
                    _q.sent();
                    _q.label = 2;
                case 2:
                    parts = modelUi[_constants_2.UI.PARTS];
                    fields = Object.keys(modelUi[_constants_2.UI.PARTS]);
                    newModelUi = modelUi;
                    _q.label = 3;
                case 3:
                    _q.trys.push([3, 35, 36, 41]);
                    fields_2 = __asyncValues(fields);
                    _q.label = 4;
                case 4: return [4 /*yield*/, fields_2.next()];
                case 5:
                    if (!(fields_2_1 = _q.sent(), !fields_2_1.done)) return [3 /*break*/, 34];
                    fieldValue = fields_2_1.value;
                    fieldObject = parts[fieldValue];
                    property = fieldObject[_constants_2.UI.PROPERTY];
                    isMultiple = fieldObject['rdf:type'].includes('Multiple');
                    isGroup = fieldObject['rdf:type'].includes('Group');
                    hasParts = fieldObject[_constants_2.UI.PARTS];
                    parentValue = '';
                    childs = {};
                    updatedField = [];
                    if (!property) return [3 /*break*/, 15];
                    newProperty = property.replace(/(^\w+:|^)\/\//, "http://");
                    if (!fieldObject['rdf:type'].includes('Classifier')) return [3 /*break*/, 12];
                    result = void 0;
                    if (!fieldObject[_constants_2.UI.VALUES]) return [3 /*break*/, 8];
                    _c = existPodUri(podUri);
                    if (!_c) return [3 /*break*/, 7];
                    return [4 /*yield*/, query_ldflex_1.default[podUri][newProperty]];
                case 6:
                    _c = (_q.sent());
                    _q.label = 7;
                case 7:
                    result = _c;
                    parentValue = (result && result.value) || '';
                    return [3 /*break*/, 11];
                case 8:
                    _d = existPodUri(podUri);
                    if (!_d) return [3 /*break*/, 10];
                    return [4 /*yield*/, query_ldflex_1.default[podUri].type];
                case 9:
                    _d = (_q.sent());
                    _q.label = 10;
                case 10:
                    result = _d;
                    parentValue = (result && result.value) || '';
                    _q.label = 11;
                case 11: return [3 /*break*/, 15];
                case 12:
                    _e = existPodUri(podUri);
                    if (!_e) return [3 /*break*/, 14];
                    return [4 /*yield*/, query_ldflex_1.default[podUri][newProperty]];
                case 13:
                    _e = (_q.sent());
                    _q.label = 14;
                case 14:
                    field = _e;
                    parentValue = (field && field.value) || '';
                    _q.label = 15;
                case 15:
                    if (!hasParts) return [3 /*break*/, 32];
                    if (!isMultiple) return [3 /*break*/, 30];
                    existField = false;
                    if (!existPodUri(podUri)) return [3 /*break*/, 28];
                    _q.label = 16;
                case 16:
                    _q.trys.push([16, 22, 23, 28]);
                    _f = __asyncValues(query_ldflex_1.default[podUri][property]);
                    _q.label = 17;
                case 17: return [4 /*yield*/, _f.next()];
                case 18:
                    if (!(_g = _q.sent(), !_g.done)) return [3 /*break*/, 21];
                    fieldData = _g.value;
                    value = fieldData.value;
                    existField = true;
                    return [4 /*yield*/, partsFields(childs, { fieldObject: fieldObject, property: property, podUri: podUri, value: value })];
                case 19:
                    childs = _q.sent();
                    childs = getClonePart(childs);
                    _q.label = 20;
                case 20: return [3 /*break*/, 17];
                case 21: return [3 /*break*/, 28];
                case 22:
                    e_5_1 = _q.sent();
                    e_5 = { error: e_5_1 };
                    return [3 /*break*/, 28];
                case 23:
                    _q.trys.push([23, , 26, 27]);
                    if (!(_g && !_g.done && (_b = _f.return))) return [3 /*break*/, 25];
                    return [4 /*yield*/, _b.call(_f)];
                case 24:
                    _q.sent();
                    _q.label = 25;
                case 25: return [3 /*break*/, 27];
                case 26:
                    if (e_5) throw e_5.error;
                    return [7 /*endfinally*/];
                case 27: return [7 /*endfinally*/];
                case 28:
                    if (!!existField) return [3 /*break*/, 30];
                    idLink = getSubjectLinkId(podUri);
                    return [4 /*yield*/, partsFields(childs, { fieldObject: fieldObject, property: property, podUri: podUri, value: idLink })];
                case 29:
                    childs = _q.sent();
                    childs = getClonePart(childs);
                    _q.label = 30;
                case 30:
                    if (!isGroup) return [3 /*break*/, 32];
                    parentPro = parentProperty && parentUri
                        ? (_j = {}, _j[_constants_2.UI.PARENT_PROPERTY] = parentProperty, _j[_constants_2.UI.BASE] = parentUri, _j) : {};
                    _h = [{}, parentPro, (_k = {}, _k[_constants_2.UI.REFERENCE] = fieldValue, _k)];
                    return [4 /*yield*/, mapFormModelWithData(fieldObject, podUri)];
                case 31:
                    newModelUi = __assign.apply(void 0, _h.concat([(_q.sent())]));
                    _q.label = 32;
                case 32:
                    objectValue = parentValue && !isMultiple
                        ? (_l = {},
                            _l[_constants_2.UI.VALUE] = parentValue,
                            _l[_constants_2.UI.OLDVALUE] = parentValue,
                            _l[_constants_2.UI.NAME] = uuid_1.default(),
                            _l[_constants_2.UI.BASE] = podUri,
                            _l[_constants_2.UI.VALID] = true,
                            _l) : (_m = {}, _m[_constants_2.UI.NAME] = uuid_1.default(), _m[_constants_2.UI.BASE] = podUri, _m[_constants_2.UI.VALID] = true, _m);
                    if (fieldObject[_constants_2.UI.VALUES]) {
                        fieldObject = __assign({}, fieldObject);
                    }
                    /**
                     * Updated field if value is not a group
                     */
                    updatedField = isGroup
                        ? updatedField
                        : (_o = {},
                            _o[fieldValue] = __assign({}, fieldObject, objectValue, childs),
                            _o);
                    newModelUi = __assign({}, newModelUi, (_p = {}, _p[_constants_2.UI.PARTS] = __assign({}, newModelUi[_constants_2.UI.PARTS], updatedField), _p));
                    _q.label = 33;
                case 33: return [3 /*break*/, 4];
                case 34: return [3 /*break*/, 41];
                case 35:
                    e_4_1 = _q.sent();
                    e_4 = { error: e_4_1 };
                    return [3 /*break*/, 41];
                case 36:
                    _q.trys.push([36, , 39, 40]);
                    if (!(fields_2_1 && !fields_2_1.done && (_a = fields_2.return))) return [3 /*break*/, 38];
                    return [4 /*yield*/, _a.call(fields_2)];
                case 37:
                    _q.sent();
                    _q.label = 38;
                case 38: return [3 /*break*/, 40];
                case 39:
                    if (e_4) throw e_4.error;
                    return [7 /*endfinally*/];
                case 40: return [7 /*endfinally*/];
                case 41: return [2 /*return*/, newModelUi];
            }
        });
    });
}
exports.mapFormModelWithData = mapFormModelWithData;
/**
 * Convert turtle to formModel(JSON-LD)
 * @param documentUri
 * @param partsPath
 */
function convertFormModel(documentUri, documentPod) {
    return __awaiter(this, void 0, void 0, function () {
        var model, modelUi, modelWidthData;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, turtleToFormUi(query_ldflex_1.default[documentUri])];
                case 1:
                    model = _b.sent();
                    modelUi = (_a = {
                            '@context': __assign({}, _constants_1.CONTEXT['@context'], { subject: subjectPrefix(documentUri), document: documentPod })
                        },
                        _a[_constants_2.UI.PARTS] = __assign({}, model),
                        _a);
                    modelWidthData = mapFormModelWithData(modelUi, documentPod);
                    return [2 /*return*/, modelWidthData];
            }
        });
    });
}
exports.convertFormModel = convertFormModel;
/**
 * Loop into ordered list
 * @param doc
 */
function loopList(doc) {
    return __awaiter(this, void 0, void 0, function () {
        var parts, field, nextField;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    parts = [];
                    return [4 /*yield*/, doc.rdf$first];
                case 1:
                    field = _a.sent();
                    if (!field) return [3 /*break*/, 3];
                    return [4 /*yield*/, loopList(doc.rdf$rest)];
                case 2:
                    nextField = _a.sent();
                    parts = parts.concat([field.value], nextField);
                    _a.label = 3;
                case 3: return [2 /*return*/, parts];
            }
        });
    });
}
function suffixFromJsonLd(predicate, context) {
    var suffix = predicate && predicate.split(':');
    return "" + context[suffix[0]] + suffix[1];
}
exports.suffixFromJsonLd = suffixFromJsonLd;
//# sourceMappingURL=form-ui.js.map