
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
            var shExJison = (function () {


// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ undefined
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   false
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... false
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lr",
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "$": 13,
  "$accept": 0,
  "$end": 1,
  "%": 23,
  "&": 22,
  "(": 4,
  ")": 5,
  "*": 14,
  "+": 15,
  ",": 11,
  "-": 21,
  ".": 6,
  "//": 59,
  ";": 12,
  "=": 3,
  "?": 16,
  "@": 7,
  "ATPNAME_LN": 35,
  "ATPNAME_NS": 36,
  "BLANK_NODE_LABEL": 72,
  "CODE": 60,
  "DECIMAL": 46,
  "DOUBLE": 47,
  "EOF": 1,
  "INTEGER": 41,
  "IRIREF": 26,
  "IT_AND": 34,
  "IT_BASE": 25,
  "IT_BNODE": 39,
  "IT_CLOSED": 55,
  "IT_EXTENDS": 73,
  "IT_EXTERNAL": 31,
  "IT_EXTRA": 56,
  "IT_FRACTIONDIGITS": 54,
  "IT_IMPORT": 29,
  "IT_IRI": 38,
  "IT_LENGTH": 43,
  "IT_LITERAL": 37,
  "IT_MAXEXCLUSIVE": 52,
  "IT_MAXINCLUSIVE": 51,
  "IT_MAXLENGTH": 45,
  "IT_MINEXCLUSIVE": 50,
  "IT_MININCLUSIVE": 49,
  "IT_MINLENGTH": 44,
  "IT_NONLITERAL": 40,
  "IT_NOT": 32,
  "IT_OR": 33,
  "IT_PREFIX": 27,
  "IT_TOTALDIGITS": 53,
  "IT_false": 62,
  "IT_start": 30,
  "IT_true": 61,
  "LANGTAG": 58,
  "LANG_STRING_LITERAL1": 67,
  "LANG_STRING_LITERAL2": 69,
  "LANG_STRING_LITERAL_LONG1": 68,
  "LANG_STRING_LITERAL_LONG2": 70,
  "PNAME_LN": 71,
  "PNAME_NS": 28,
  "REGEXP": 42,
  "REPEAT_RANGE": 57,
  "STRING_LITERAL1": 63,
  "STRING_LITERAL2": 65,
  "STRING_LITERAL_LONG1": 64,
  "STRING_LITERAL_LONG2": 66,
  "[": 18,
  "]": 19,
  "^": 17,
  "^^": 48,
  "_O_QCODE_E_Or_QGT_MODULO_E_C": 196,
  "_O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C": 158,
  "_O_QGT_DTYPE_E_S_Qdatatype_E_C": 204,
  "_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C": 149,
  "_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C": 155,
  "_O_QGT_TILDE_E_S_QiriExclusion_E_Star_C": 176,
  "_O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C": 187,
  "_O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C": 182,
  "_O_QIT_AND_E_S_QinlineShapeNot_E_C": 107,
  "_O_QIT_AND_E_S_QshapeNot_E_C": 98,
  "_O_QIT_EXTENDS_E_Or_QGT_AMP_E_C": 213,
  "_O_QIT_OR_E_S_QinlineShapeAnd_E_C": 102,
  "_O_QIT_OR_E_S_QshapeAnd_E_C": 96,
  "_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C": 141,
  "_O_QiriExclusion_E_Plus_Or_QliteralExclusion_E_Plus_Or_QlanguageExclusion_E_Plus_C": 173,
  "_O_Qiri_E_Or_Qliteral_E_C": 192,
  "_O_QnotStartAction_E_Or_QstartActions_E_C": 77,
  "_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C": 79,
  "_O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C": 91,
  "_O_QtripleConstraint_E_Or_QbracketedTripleExpr_E_C": 160,
  "_QGT_SEMI_E_Opt": 153,
  "_QGT_TILDE_E_Opt": 179,
  "_QIT_NOT_E_Opt": 110,
  "_Q_O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C_E_Opt": 159,
  "_Q_O_QGT_DTYPE_E_S_Qdatatype_E_C_E_Opt": 205,
  "_Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus": 150,
  "_Q_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C_E_Plus": 156,
  "_Q_O_QGT_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt": 177,
  "_Q_O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt": 188,
  "_Q_O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt": 183,
  "_Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star": 108,
  "_Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus": 99,
  "_Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star": 105,
  "_Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star": 103,
  "_Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus": 97,
  "_Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star": 100,
  "_Q_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star": 142,
  "_Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt": 80,
  "_Qannotation_E_Star": 123,
  "_Qcardinality_E_Opt": 162,
  "_QcodeDecl_E_Plus": 88,
  "_QcodeDecl_E_Star": 194,
  "_Qdirective_E_Star": 76,
  "_QinlineShapeOrRef_E_Opt": 117,
  "_QiriExclusion_E_Plus": 170,
  "_QiriExclusion_E_Star": 175,
  "_QlanguageExclusion_E_Plus": 172,
  "_QlanguageExclusion_E_Star": 186,
  "_QliteralExclusion_E_Plus": 171,
  "_QliteralExclusion_E_Star": 181,
  "_QnonLitInlineNodeConstraint_E_Opt": 118,
  "_QnonLitNodeConstraint_E_Opt": 114,
  "_QnumericFacet_E_Plus": 127,
  "_Qpredicate_E_Plus": 145,
  "_QsenseFlags_E_Opt": 164,
  "_QshapeExprLabel_E_Plus": 214,
  "_QshapeOrRef_E_Opt": 113,
  "_QshapeOr_E_Opt": 93,
  "_Qstatement_E_Star": 78,
  "_QstringFacet_E_Plus": 130,
  "_QstringFacet_E_Star": 129,
  "_QtripleExpression_E_Opt": 143,
  "_QvalueSetValue_E_Star": 168,
  "_QxsFacet_E_Star": 126,
  "_initParser": 75,
  "_rawNumeric": 136,
  "a": 24,
  "annotation": 191,
  "baseDecl": 82,
  "blankNode": 211,
  "booleanLiteral": 206,
  "bracketedTripleExpr": 161,
  "cardinality": 165,
  "codeDecl": 195,
  "datatype": 199,
  "directive": 81,
  "error": 2,
  "extension": 212,
  "extraPropertySet": 144,
  "groupTripleExpr": 151,
  "importDecl": 84,
  "include": 190,
  "inlineShapeAnd": 106,
  "inlineShapeAtom": 116,
  "inlineShapeDefinition": 140,
  "inlineShapeExpression": 94,
  "inlineShapeNot": 111,
  "inlineShapeOr": 101,
  "inlineShapeOrRef": 120,
  "iri": 209,
  "iriExclusion": 178,
  "iriRange": 174,
  "langString": 208,
  "languageExclusion": 189,
  "languageRange": 185,
  "litInlineNodeConstraint": 125,
  "litNodeConstraint": 122,
  "literal": 197,
  "literalExclusion": 184,
  "literalRange": 180,
  "multiElementGroup": 154,
  "multiElementOneOf": 148,
  "nonLitInlineNodeConstraint": 128,
  "nonLitNodeConstraint": 124,
  "nonLiteralKind": 131,
  "notStartAction": 85,
  "numericFacet": 135,
  "numericLength": 138,
  "numericLiteral": 202,
  "numericRange": 137,
  "oneOfTripleExpr": 147,
  "predicate": 198,
  "prefixDecl": 83,
  "prefixedName": 210,
  "rdfLiteral": 203,
  "semanticActions": 193,
  "senseFlags": 166,
  "shapeAnd": 104,
  "shapeAtom": 112,
  "shapeAtomNoRef": 115,
  "shapeDefinition": 139,
  "shapeExprDecl": 90,
  "shapeExprLabel": 200,
  "shapeExpression": 92,
  "shapeNot": 109,
  "shapeOr": 95,
  "shapeOrRef": 119,
  "shapeRef": 121,
  "shexDoc": 74,
  "singleElementGroup": 152,
  "start": 86,
  "startActions": 87,
  "statement": 89,
  "string": 207,
  "stringFacet": 133,
  "stringLength": 134,
  "tripleConstraint": 163,
  "tripleExprLabel": 201,
  "tripleExpression": 146,
  "unaryTripleExpr": 157,
  "valueSet": 167,
  "valueSetValue": 169,
  "xsFacet": 132,
  "{": 8,
  "|": 10,
  "}": 9,
  "~": 20
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "=",
  4: "(",
  5: ")",
  6: ".",
  7: "@",
  8: "{",
  9: "}",
  10: "|",
  11: ",",
  12: ";",
  13: "$",
  14: "*",
  15: "+",
  16: "?",
  17: "^",
  18: "[",
  19: "]",
  20: "~",
  21: "-",
  22: "&",
  23: "%",
  24: "a",
  25: "IT_BASE",
  26: "IRIREF",
  27: "IT_PREFIX",
  28: "PNAME_NS",
  29: "IT_IMPORT",
  30: "IT_start",
  31: "IT_EXTERNAL",
  32: "IT_NOT",
  33: "IT_OR",
  34: "IT_AND",
  35: "ATPNAME_LN",
  36: "ATPNAME_NS",
  37: "IT_LITERAL",
  38: "IT_IRI",
  39: "IT_BNODE",
  40: "IT_NONLITERAL",
  41: "INTEGER",
  42: "REGEXP",
  43: "IT_LENGTH",
  44: "IT_MINLENGTH",
  45: "IT_MAXLENGTH",
  46: "DECIMAL",
  47: "DOUBLE",
  48: "^^",
  49: "IT_MININCLUSIVE",
  50: "IT_MINEXCLUSIVE",
  51: "IT_MAXINCLUSIVE",
  52: "IT_MAXEXCLUSIVE",
  53: "IT_TOTALDIGITS",
  54: "IT_FRACTIONDIGITS",
  55: "IT_CLOSED",
  56: "IT_EXTRA",
  57: "REPEAT_RANGE",
  58: "LANGTAG",
  59: "//",
  60: "CODE",
  61: "IT_true",
  62: "IT_false",
  63: "STRING_LITERAL1",
  64: "STRING_LITERAL_LONG1",
  65: "STRING_LITERAL2",
  66: "STRING_LITERAL_LONG2",
  67: "LANG_STRING_LITERAL1",
  68: "LANG_STRING_LITERAL_LONG1",
  69: "LANG_STRING_LITERAL2",
  70: "LANG_STRING_LITERAL_LONG2",
  71: "PNAME_LN",
  72: "BLANK_NODE_LABEL",
  73: "IT_EXTENDS"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,

    __reentrant_call_depth: 0,      // INTERNAL USE ONLY
    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  74,
  75,
  76,
  76,
  77,
  77,
  78,
  78,
  79,
  80,
  80,
  s,
  [81, 3],
  s,
  [82, 4, 1],
  s,
  [85, 4, 1],
  88,
  89,
  89,
  90,
  91,
  91,
  s,
  [92, 3],
  93,
  93,
  94,
  95,
  95,
  96,
  97,
  97,
  98,
  99,
  99,
  100,
  s,
  [100, 4, 1],
  103,
  104,
  105,
  s,
  [105, 4, 1],
  108,
  109,
  110,
  110,
  111,
  s,
  [112, 5],
  113,
  113,
  114,
  114,
  s,
  [115, 5],
  s,
  [116, 5],
  117,
  117,
  118,
  118,
  119,
  119,
  120,
  120,
  s,
  [121, 3],
  122,
  123,
  123,
  124,
  s,
  [125, 4],
  126,
  126,
  127,
  127,
  128,
  128,
  129,
  129,
  130,
  130,
  s,
  [131, 3],
  132,
  132,
  133,
  133,
  s,
  [134, 3],
  135,
  135,
  s,
  [136, 4],
  s,
  [137, 4],
  138,
  s,
  [138, 4, 1],
  141,
  141,
  142,
  142,
  143,
  143,
  144,
  145,
  145,
  146,
  147,
  s,
  [147, 4, 1],
  150,
  151,
  151,
  152,
  s,
  [153, 3],
  154,
  155,
  155,
  156,
  156,
  157,
  157,
  158,
  159,
  159,
  160,
  160,
  161,
  162,
  162,
  163,
  164,
  164,
  s,
  [165, 4],
  166,
  167,
  168,
  168,
  s,
  [169, 4],
  170,
  170,
  171,
  171,
  172,
  172,
  s,
  [173, 3],
  174,
  175,
  175,
  176,
  177,
  177,
  178,
  179,
  179,
  180,
  181,
  181,
  182,
  183,
  183,
  184,
  185,
  185,
  186,
  186,
  187,
  188,
  s,
  [188, 5, 1],
  192,
  193,
  194,
  194,
  195,
  196,
  196,
  s,
  [197, 3],
  198,
  198,
  199,
  200,
  200,
  201,
  201,
  s,
  [202, 3],
  203,
  203,
  204,
  205,
  205,
  206,
  206,
  s,
  [207, 4],
  s,
  [208, 4],
  209,
  209,
  210,
  s,
  [210, 4, 1],
  213,
  214,
  214
]),
  rule: u([
  4,
  0,
  0,
  2,
  1,
  1,
  0,
  2,
  2,
  0,
  s,
  [1, 4],
  2,
  3,
  c,
  [13, 3],
  4,
  c,
  [8, 3],
  c,
  [3, 5],
  3,
  3,
  c,
  [22, 5],
  2,
  2,
  c,
  [3, 5],
  c,
  [36, 3],
  c,
  [4, 4],
  c,
  [7, 8],
  c,
  [20, 5],
  3,
  1,
  0,
  1,
  c,
  [10, 3],
  c,
  [9, 4],
  c,
  [14, 9],
  s,
  [1, 6],
  2,
  3,
  0,
  c,
  [77, 3],
  c,
  [36, 3],
  c,
  [95, 3],
  c,
  [6, 7],
  c,
  [24, 6],
  c,
  [5, 5],
  c,
  [6, 4],
  3,
  s,
  [1, 6],
  3,
  c,
  [111, 3],
  c,
  [31, 3],
  c,
  [70, 5],
  c,
  [109, 7],
  c,
  [6, 3],
  c,
  [71, 3],
  c,
  [62, 3],
  c,
  [120, 6],
  s,
  [1, 3],
  6,
  0,
  c,
  [3, 4],
  c,
  [48, 6],
  c,
  [176, 4],
  c,
  [45, 5],
  c,
  [49, 7],
  c,
  [141, 5],
  3,
  c,
  [64, 3],
  c,
  [9, 6],
  c,
  [158, 7],
  3,
  c,
  [142, 3],
  c,
  [88, 4],
  c,
  [102, 7],
  s,
  [1, 10],
  c,
  [234, 7],
  c,
  [19, 13],
  c,
  [4, 4]
])
}),
performAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : shexDoc $end */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 1:
    /*! Production::    shexDoc : _initParser _Qdirective_E_Star _Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt EOF */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 3];
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,-,-,-,-)
    
    
    let imports = Object.keys(Parser._imports).length ? { imports: Parser._imports } : {}
    var startObj = Parser.start ? { start: Parser.start } : {};
    var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
    let shapes = Parser.shapes ? { shapes: Object.values(Parser.shapes) } : {};
    var shexj = Object.assign(
      { type: "Schema" }, imports, startActs, startObj, shapes
    )
    if (Parser.options.index) {
      if (Parser._base !== null)
        shexj._base = Parser._base;
      shexj._prefixes = Parser._prefixes;
      shexj._index = {
        shapeExprs: Parser.shapes || new Map(),
        tripleExprs: Parser.productions || new Map()
      };
      shexj._sourceMap = Parser._sourceMap;
    }
    return shexj;
    break;

case 2:
    /*! Production::    _initParser : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-):
    this.$ = undefined;
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-)
    
    
    yy.parser.yy = { lexer: yy.lexer} ;
    break;

case 3:
    /*! Production::    _Qdirective_E_Star : %epsilon */
case 7:
    /*! Production::    _Qstatement_E_Star : %epsilon */
case 10:
    /*! Production::    _Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt : %epsilon */
case 65:
    /*! Production::    _QshapeOrRef_E_Opt : %epsilon */
case 67:
    /*! Production::    _QnonLitNodeConstraint_E_Opt : %epsilon */
case 79:
    /*! Production::    _QinlineShapeOrRef_E_Opt : %epsilon */
case 81:
    /*! Production::    _QnonLitInlineNodeConstraint_E_Opt : %epsilon */
case 137:
    /*! Production::    _QtripleExpression_E_Opt : %epsilon */
case 152:
    /*! Production::    _QGT_SEMI_E_Opt : %epsilon */
case 163:
    /*! Production::    _Q_O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C_E_Opt : %epsilon */
case 171:
    /*! Production::    _QsenseFlags_E_Opt : %epsilon */
case 198:
    /*! Production::    _Q_O_QGT_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt : %epsilon */
case 201:
    /*! Production::    _QGT_TILDE_E_Opt : %epsilon */
case 207:
    /*! Production::    _Q_O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt : %epsilon */
case 215:
    /*! Production::    _Q_O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-):
    this.$ = undefined;
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-)
    break;

case 4:
    /*! Production::    _Qdirective_E_Star : _Qdirective_E_Star directive */
case 8:
    /*! Production::    _Qstatement_E_Star : _Qstatement_E_Star statement */
case 9:
    /*! Production::    _O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C : _O_QnotStartAction_E_Or_QstartActions_E_C _Qstatement_E_Star */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    break;

case 5:
    /*! Production::    _O_QnotStartAction_E_Or_QstartActions_E_C : notStartAction */
case 6:
    /*! Production::    _O_QnotStartAction_E_Or_QstartActions_E_C : startActions */
case 11:
    /*! Production::    _Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt : _O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C */
case 12:
    /*! Production::    directive : baseDecl */
case 13:
    /*! Production::    directive : prefixDecl */
case 14:
    /*! Production::    directive : importDecl */
case 18:
    /*! Production::    notStartAction : start */
case 19:
    /*! Production::    notStartAction : shapeExprDecl */
case 24:
    /*! Production::    statement : directive */
case 25:
    /*! Production::    statement : notStartAction */
case 34:
    /*! Production::    inlineShapeExpression : inlineShapeOr */
case 61:
    /*! Production::    shapeAtom : litNodeConstraint */
case 66:
    /*! Production::    _QshapeOrRef_E_Opt : shapeOrRef */
case 68:
    /*! Production::    _QnonLitNodeConstraint_E_Opt : nonLitNodeConstraint */
case 70:
    /*! Production::    shapeAtomNoRef : litNodeConstraint */
case 75:
    /*! Production::    inlineShapeAtom : litInlineNodeConstraint */
case 80:
    /*! Production::    _QinlineShapeOrRef_E_Opt : inlineShapeOrRef */
case 82:
    /*! Production::    _QnonLitInlineNodeConstraint_E_Opt : nonLitInlineNodeConstraint */
case 83:
    /*! Production::    shapeOrRef : shapeDefinition */
case 84:
    /*! Production::    shapeOrRef : shapeRef */
case 85:
    /*! Production::    inlineShapeOrRef : inlineShapeDefinition */
case 86:
    /*! Production::    inlineShapeOrRef : shapeRef */
case 100:
    /*! Production::    _QnumericFacet_E_Plus : numericFacet */
case 106:
    /*! Production::    _QstringFacet_E_Plus : stringFacet */
case 111:
    /*! Production::    xsFacet : stringFacet */
case 112:
    /*! Production::    xsFacet : numericFacet */
case 138:
    /*! Production::    _QtripleExpression_E_Opt : tripleExpression */
case 142:
    /*! Production::    tripleExpression : oneOfTripleExpr */
case 143:
    /*! Production::    oneOfTripleExpr : groupTripleExpr */
case 144:
    /*! Production::    oneOfTripleExpr : multiElementOneOf */
case 149:
    /*! Production::    groupTripleExpr : singleElementGroup */
case 150:
    /*! Production::    groupTripleExpr : multiElementGroup */
case 153:
    /*! Production::    _QGT_SEMI_E_Opt : "," */
case 154:
    /*! Production::    _QGT_SEMI_E_Opt : ";" */
case 161:
    /*! Production::    unaryTripleExpr : include */
case 164:
    /*! Production::    _Q_O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C_E_Opt : _O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C */
case 165:
    /*! Production::    _O_QtripleConstraint_E_Or_QbracketedTripleExpr_E_C : tripleConstraint */
case 166:
    /*! Production::    _O_QtripleConstraint_E_Or_QbracketedTripleExpr_E_C : bracketedTripleExpr */
case 169:
    /*! Production::    _Qcardinality_E_Opt : cardinality */
case 172:
    /*! Production::    _QsenseFlags_E_Opt : senseFlags */
case 181:
    /*! Production::    valueSetValue : iriRange */
case 182:
    /*! Production::    valueSetValue : literalRange */
case 183:
    /*! Production::    valueSetValue : languageRange */
case 199:
    /*! Production::    _Q_O_QGT_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt : _O_QGT_TILDE_E_S_QiriExclusion_E_Star_C */
case 202:
    /*! Production::    _QGT_TILDE_E_Opt : "~" */
case 208:
    /*! Production::    _Q_O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt : _O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C */
case 216:
    /*! Production::    _Q_O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt : _O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C */
case 220:
    /*! Production::    _O_Qiri_E_Or_Qliteral_E_C : iri */
case 221:
    /*! Production::    _O_Qiri_E_Or_Qliteral_E_C : literal */
case 226:
    /*! Production::    _O_QCODE_E_Or_QGT_MODULO_E_C : CODE */
case 228:
    /*! Production::    literal : rdfLiteral */
case 229:
    /*! Production::    literal : numericLiteral */
case 230:
    /*! Production::    literal : booleanLiteral */
case 231:
    /*! Production::    predicate : iri */
case 233:
    /*! Production::    datatype : iri */
case 234:
    /*! Production::    shapeExprLabel : iri */
case 235:
    /*! Production::    shapeExprLabel : blankNode */
case 236:
    /*! Production::    tripleExprLabel : iri */
case 237:
    /*! Production::    tripleExprLabel : blankNode */
case 241:
    /*! Production::    rdfLiteral : langString */
case 245:
    /*! Production::    _Q_O_QGT_DTYPE_E_S_Qdatatype_E_C_E_Opt : _O_QGT_DTYPE_E_S_Qdatatype_E_C */
case 257:
    /*! Production::    iri : prefixedName */
case 260:
    /*! Production::    blankNode : BLANK_NODE_LABEL */
case 262:
    /*! Production::    _O_QIT_EXTENDS_E_Or_QGT_AMP_E_C : IT_EXTENDS */
case 263:
    /*! Production::    _O_QIT_EXTENDS_E_Or_QGT_AMP_E_C : "&" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 15:
    /*! Production::    baseDecl : IT_BASE IRIREF */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    
    
    // t: @@
    Parser._setBase(Parser._base === null ||
                absoluteIRI.test(yyvstack[yysp].slice(1, -1)) ? yyvstack[yysp].slice(1, -1) : _resolveIRI(yyvstack[yysp].slice(1, -1)));
    break;

case 16:
    /*! Production::    prefixDecl : IT_PREFIX PNAME_NS iri */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 2];
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,-,-,-,-)
    
    
    // t: ShExParser-test.js/with pre-defined prefixes
    Parser._prefixes[yyvstack[yysp - 1].slice(0, -1)] = yyvstack[yysp];
    break;

case 17:
    /*! Production::    importDecl : IT_IMPORT iri */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    
    
    // t: @@
    Parser._imports.push(yyvstack[yysp]);
    break;

case 20:
    /*! Production::    start : IT_start "=" shapeAnd _Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 3];
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,-,-,-,-)
    
    
    if (Parser.start)
      error(new Error("Parse error: start already defined"), yy);
    Parser.start = shapeJunction("ShapeOr", yyvstack[yysp - 1], yyvstack[yysp]); // t: startInline
    break;

case 21:
    /*! Production::    startActions : _QcodeDecl_E_Plus */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    
    
    Parser.startActs = yyvstack[yysp]; // t: startCode1
    break;

case 22:
    /*! Production::    _QcodeDecl_E_Plus : codeDecl */
case 38:
    /*! Production::    _Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus : _O_QIT_OR_E_S_QshapeAnd_E_C */
case 41:
    /*! Production::    _Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus : _O_QIT_AND_E_S_QshapeNot_E_C */
case 140:
    /*! Production::    _Qpredicate_E_Plus : predicate */
case 147:
    /*! Production::    _Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus : _O_QGT_PIPE_E_S_QgroupTripleExpr_E_C */
case 158:
    /*! Production::    _Q_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C_E_Plus : _O_QGT_SEMI_E_S_QunaryTripleExpr_E_C */
case 185:
    /*! Production::    _QiriExclusion_E_Plus : iriExclusion */
case 187:
    /*! Production::    _QliteralExclusion_E_Plus : literalExclusion */
case 189:
    /*! Production::    _QlanguageExclusion_E_Plus : languageExclusion */
case 264:
    /*! Production::    _QshapeExprLabel_E_Plus : shapeExprLabel */

    this.$ = ([yyvstack[yysp]]);
    break;

case 23:
    /*! Production::    _QcodeDecl_E_Plus : _QcodeDecl_E_Plus codeDecl */
case 92:
    /*! Production::    _Qannotation_E_Star : _Qannotation_E_Star annotation */
case 141:
    /*! Production::    _Qpredicate_E_Plus : _Qpredicate_E_Plus predicate */
case 148:
    /*! Production::    _Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus : _Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus _O_QGT_PIPE_E_S_QgroupTripleExpr_E_C */
case 159:
    /*! Production::    _Q_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C_E_Plus : _Q_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C_E_Plus _O_QGT_SEMI_E_S_QunaryTripleExpr_E_C */
case 180:
    /*! Production::    _QvalueSetValue_E_Star : _QvalueSetValue_E_Star valueSetValue */
case 186:
    /*! Production::    _QiriExclusion_E_Plus : _QiriExclusion_E_Plus iriExclusion */
case 188:
    /*! Production::    _QliteralExclusion_E_Plus : _QliteralExclusion_E_Plus literalExclusion */
case 190:
    /*! Production::    _QlanguageExclusion_E_Plus : _QlanguageExclusion_E_Plus languageExclusion */
case 196:
    /*! Production::    _QiriExclusion_E_Star : _QiriExclusion_E_Star iriExclusion */
case 205:
    /*! Production::    _QliteralExclusion_E_Star : _QliteralExclusion_E_Star literalExclusion */
case 213:
    /*! Production::    _QlanguageExclusion_E_Star : _QlanguageExclusion_E_Star languageExclusion */
case 224:
    /*! Production::    _QcodeDecl_E_Star : _QcodeDecl_E_Star codeDecl */
case 265:
    /*! Production::    _QshapeExprLabel_E_Plus : _QshapeExprLabel_E_Plus shapeExprLabel */

    this.$ = (appendTo(yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 26:
    /*! Production::    shapeExprDecl : shapeExprLabel _O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    
    
    // t: 1dot 1val1vsMinusiri3??
    addShape(yyvstack[yysp - 1],  yyvstack[yysp], yy);
    break;

case 27:
    /*! Production::    _O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C : shapeExpression */

    this.$ = nonest(yyvstack[yysp]);
    break;

case 28:
    /*! Production::    _O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C : IT_EXTERNAL */

    this.$ = ({ type: "ShapeExternal" });
    break;

case 29:
    /*! Production::    shapeExpression : _QIT_NOT_E_Opt shapeAtomNoRef _QshapeOr_E_Opt */

    if (yyvstack[yysp - 2])
      yyvstack[yysp - 1] = { type: "ShapeNot", "shapeExpr": nonest(yyvstack[yysp - 1]) }; // t:@@
    if (yyvstack[yysp]) { // If there were disjuncts,
      //           shapeOr will have $3.set needsAtom.
      //           Prepend $3.needsAtom with $2.
      //           Note that $3 may be a ShapeOr or a ShapeAnd.
      yyvstack[yysp].needsAtom.unshift(nonest(yyvstack[yysp - 1]));
      delete yyvstack[yysp].needsAtom;
      this.$ = yyvstack[yysp];
    } else {
      this.$ = yyvstack[yysp - 1];
    }
    break;

case 30:
    /*! Production::    shapeExpression : IT_NOT shapeRef _QshapeOr_E_Opt */

    yyvstack[yysp - 1] = { type: "ShapeNot", "shapeExpr": nonest(yyvstack[yysp - 1]) } // !!! opt
    if (yyvstack[yysp]) { // If there were disjuncts,
      //           shapeOr will have $3.set needsAtom.
      //           Prepend $3.needsAtom with $2.
      //           Note that $3 may be a ShapeOr or a ShapeAnd.
      yyvstack[yysp].needsAtom.unshift(nonest(yyvstack[yysp - 1]));
      delete yyvstack[yysp].needsAtom;
      this.$ = yyvstack[yysp];
    } else {
      this.$ = yyvstack[yysp - 1];
    }
    break;

case 31:
    /*! Production::    shapeExpression : shapeRef shapeOr */

    yyvstack[yysp].needsAtom.unshift(nonest(yyvstack[yysp - 1]));
    delete yyvstack[yysp].needsAtom;
    this.$ = yyvstack[yysp]; // { type: "ShapeOr", "shapeExprs": [$1].concat($2) };
    break;

case 32:
    /*! Production::    _QshapeOr_E_Opt : %epsilon */
case 227:
    /*! Production::    _O_QCODE_E_Or_QGT_MODULO_E_C : "%" */
case 244:
    /*! Production::    _Q_O_QGT_DTYPE_E_S_Qdatatype_E_C_E_Opt : %epsilon */

    this.$ = (null);
    break;

case 33:
    /*! Production::    _QshapeOr_E_Opt : shapeOr */
case 37:
    /*! Production::    _O_QIT_OR_E_S_QshapeAnd_E_C : IT_OR shapeAnd */
case 40:
    /*! Production::    _O_QIT_AND_E_S_QshapeNot_E_C : IT_AND shapeNot */
case 46:
    /*! Production::    _O_QIT_OR_E_S_QinlineShapeAnd_E_C : IT_OR inlineShapeAnd */
case 53:
    /*! Production::    _O_QIT_AND_E_S_QinlineShapeNot_E_C : IT_AND inlineShapeNot */
case 139:
    /*! Production::    extraPropertySet : IT_EXTRA _Qpredicate_E_Plus */
case 146:
    /*! Production::    _O_QGT_PIPE_E_S_QgroupTripleExpr_E_C : "|" groupTripleExpr */
case 156:
    /*! Production::    _O_QGT_SEMI_E_S_QunaryTripleExpr_E_C : "," unaryTripleExpr */
case 157:
    /*! Production::    _O_QGT_SEMI_E_S_QunaryTripleExpr_E_C : ";" unaryTripleExpr */
case 184:
    /*! Production::    valueSetValue : "." _O_QiriExclusion_E_Plus_Or_QliteralExclusion_E_Plus_Or_QlanguageExclusion_E_Plus_C */
case 197:
    /*! Production::    _O_QGT_TILDE_E_S_QiriExclusion_E_Star_C : "~" _QiriExclusion_E_Star */
case 206:
    /*! Production::    _O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C : "~" _QliteralExclusion_E_Star */
case 214:
    /*! Production::    _O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C : "~" _QlanguageExclusion_E_Star */
case 243:
    /*! Production::    _O_QGT_DTYPE_E_S_Qdatatype_E_C : "^^" datatype */
case 261:
    /*! Production::    extension : _O_QIT_EXTENDS_E_Or_QGT_AMP_E_C _QshapeExprLabel_E_Plus */

    this.$ = (yyvstack[yysp]);
    break;

case 35:
    /*! Production::    shapeOr : _Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus */

    // returns a ShapeOr
    var disjuncts = yyvstack[yysp].map(nonest);
    this.$ = { type: "ShapeOr", shapeExprs: disjuncts, needsAtom: disjuncts }; // t: @@
    break;

case 36:
    /*! Production::    shapeOr : _Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus _Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star */

    // returns a ShapeAnd
    // $1 could have implicit conjuncts and explicit nested ANDs (will have .nested: true)
    yyvstack[yysp - 1].filter(c => c.type === "ShapeAnd").length === yyvstack[yysp - 1].length
    var and = {
      type: "ShapeAnd",
      shapeExprs: yyvstack[yysp - 1].reduce(
        (acc, elt) =>
          acc.concat(elt.type === 'ShapeAnd' && !elt.nested ? elt.shapeExprs : nonest(elt)), []
      )
    };
    this.$ = yyvstack[yysp].length > 0 ? { type: "ShapeOr", shapeExprs: [and].concat(yyvstack[yysp].map(nonest)) } : and; // t: @@
    this.$.needsAtom = and.shapeExprs;
    break;

case 39:
    /*! Production::    _Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus : _Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus _O_QIT_OR_E_S_QshapeAnd_E_C */
case 42:
    /*! Production::    _Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus : _Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus _O_QIT_AND_E_S_QshapeNot_E_C */
case 44:
    /*! Production::    _Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star : _Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star _O_QIT_OR_E_S_QshapeAnd_E_C */
case 48:
    /*! Production::    _Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star : _Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star _O_QIT_OR_E_S_QinlineShapeAnd_E_C */
case 51:
    /*! Production::    _Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star : _Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star _O_QIT_AND_E_S_QshapeNot_E_C */
case 55:
    /*! Production::    _Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star : _Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star _O_QIT_AND_E_S_QinlineShapeNot_E_C */

    this.$ = (yyvstack[yysp - 1].concat(yyvstack[yysp]));
    break;

case 43:
    /*! Production::    _Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star : %epsilon */
case 47:
    /*! Production::    _Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star : %epsilon */
case 50:
    /*! Production::    _Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star : %epsilon */
case 54:
    /*! Production::    _Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star : %epsilon */
case 91:
    /*! Production::    _Qannotation_E_Star : %epsilon */
case 179:
    /*! Production::    _QvalueSetValue_E_Star : %epsilon */
case 195:
    /*! Production::    _QiriExclusion_E_Star : %epsilon */
case 204:
    /*! Production::    _QliteralExclusion_E_Star : %epsilon */
case 212:
    /*! Production::    _QlanguageExclusion_E_Star : %epsilon */
case 223:
    /*! Production::    _QcodeDecl_E_Star : %epsilon */

    this.$ = ([]);
    break;

case 45:
    /*! Production::    inlineShapeOr : inlineShapeAnd _Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star */

    this.$ = (shapeJunction("ShapeOr", yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 49:
    /*! Production::    shapeAnd : shapeNot _Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star */
case 52:
    /*! Production::    inlineShapeAnd : inlineShapeNot _Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star */

    this.$ = (shapeJunction("ShapeAnd", yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 56:
    /*! Production::    shapeNot : _QIT_NOT_E_Opt shapeAtom */

    this.$ = (yyvstack[yysp - 1] ? { type: "ShapeNot", "shapeExpr": nonest(yyvstack[yysp]) } /* t:@@ */ : yyvstack[yysp]);
    break;

case 57:
    /*! Production::    _QIT_NOT_E_Opt : %epsilon */

    this.$ = (false);
    break;

case 58:
    /*! Production::    _QIT_NOT_E_Opt : IT_NOT */

    this.$ = (true);
    break;

case 59:
    /*! Production::    inlineShapeNot : _QIT_NOT_E_Opt inlineShapeAtom */

    this.$ = (yyvstack[yysp - 1] ? { type: "ShapeNot", "shapeExpr": nonest(yyvstack[yysp]) } /* t: 1NOTNOTdot, 1NOTNOTIRI, 1NOTNOTvs */ : yyvstack[yysp]);
    break;

case 60:
    /*! Production::    shapeAtom : nonLitNodeConstraint _QshapeOrRef_E_Opt */
case 69:
    /*! Production::    shapeAtomNoRef : nonLitNodeConstraint _QshapeOrRef_E_Opt */
case 74:
    /*! Production::    inlineShapeAtom : nonLitInlineNodeConstraint _QinlineShapeOrRef_E_Opt */
case 76:
    /*! Production::    inlineShapeAtom : inlineShapeOrRef _QnonLitInlineNodeConstraint_E_Opt */

    this.$ = (yyvstack[yysp] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, yyvstack[yysp - 1]), yyvstack[yysp] ] } : yyvstack[yysp - 1]);
    break;

case 62:
    /*! Production::    shapeAtom : shapeOrRef _QnonLitNodeConstraint_E_Opt */

    this.$ = (yyvstack[yysp] ? shapeJunction("ShapeAnd", yyvstack[yysp - 1], [yyvstack[yysp]]) /* t: 1dotRef1 */ : yyvstack[yysp - 1]);
    break;

case 63:
    /*! Production::    shapeAtom : "(" shapeExpression ")" */
case 72:
    /*! Production::    shapeAtomNoRef : "(" shapeExpression ")" */
case 77:
    /*! Production::    inlineShapeAtom : "(" shapeExpression ")" */

    this.$ = (Object.assign(yyvstack[yysp - 1], {nested: true}));
    break;

case 64:
    /*! Production::    shapeAtom : "." */
case 73:
    /*! Production::    shapeAtomNoRef : "." */
case 78:
    /*! Production::    inlineShapeAtom : "." */

    this.$ = (EmptyShape);
    break;

case 71:
    /*! Production::    shapeAtomNoRef : shapeDefinition _QnonLitNodeConstraint_E_Opt */

    this.$ = (yyvstack[yysp] ? shapeJunction("ShapeAnd", yyvstack[yysp - 1], [yyvstack[yysp]]) /* t:@@ */ : yyvstack[yysp - 1]);
    break;

case 87:
    /*! Production::    shapeRef : ATPNAME_LN */

    // t: 1dotRefLNex@@
    yyvstack[yysp] = yyvstack[yysp].substr(1, yyvstack[yysp].length-1);
    var namePos = yyvstack[yysp].indexOf(':');
    this.$ = addSourceMap(expandPrefix(yyvstack[yysp].substr(0, namePos), yy) + yyvstack[yysp].substr(namePos + 1), yy); // ShapeRef
    break;

case 88:
    /*! Production::    shapeRef : ATPNAME_NS */

    // t: 1dotRefNS1@@
    yyvstack[yysp] = yyvstack[yysp].substr(1, yyvstack[yysp].length-1);
    this.$ = addSourceMap(expandPrefix(yyvstack[yysp].substr(0, yyvstack[yysp].length - 1), yy), yy); // ShapeRef
    break;

case 89:
    /*! Production::    shapeRef : "@" shapeExprLabel */
case 162:
    /*! Production::    _O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C : "$" tripleExprLabel */
case 218:
    /*! Production::    include : "&" tripleExprLabel */

    this.$ = (addSourceMap(yyvstack[yysp], yy));
    break;

case 90:
    /*! Production::    litNodeConstraint : litInlineNodeConstraint _Qannotation_E_Star semanticActions */
case 93:
    /*! Production::    nonLitNodeConstraint : nonLitInlineNodeConstraint _Qannotation_E_Star semanticActions */

    // t: !!
    this.$ = yyvstack[yysp - 2]
    if (yyvstack[yysp - 1].length) { this.$.annotations = yyvstack[yysp - 1]; } // t: !!
    if (yyvstack[yysp]) { this.$.semActs = yyvstack[yysp].semActs; } // t: !!
    break;

case 94:
    /*! Production::    litInlineNodeConstraint : IT_LITERAL _QxsFacet_E_Star */

    this.$ = (extend({ type: "NodeConstraint", nodeKind: "literal" }, yyvstack[yysp]));
    break;

case 95:
    /*! Production::    litInlineNodeConstraint : datatype _QxsFacet_E_Star */

    if (numericDatatypes.indexOf(yyvstack[yysp - 1]) === -1)
      numericFacets.forEach(function (facet) {
        if (facet in yyvstack[yysp])
          error(new Error("Parse error: facet " + facet + " not allowed for unknown datatype " + yyvstack[yysp - 1]), yy);
      });
    this.$ = extend({ type: "NodeConstraint", datatype: yyvstack[yysp - 1] }, yyvstack[yysp]) // t: 1datatype
    break;

case 96:
    /*! Production::    litInlineNodeConstraint : valueSet _QxsFacet_E_Star */

    this.$ = ({ type: "NodeConstraint", values: yyvstack[yysp - 1] });
    break;

case 97:
    /*! Production::    litInlineNodeConstraint : _QnumericFacet_E_Plus */

    this.$ = (extend({ type: "NodeConstraint"}, yyvstack[yysp]));
    break;

case 98:
    /*! Production::    _QxsFacet_E_Star : %epsilon */
case 104:
    /*! Production::    _QstringFacet_E_Star : %epsilon */
case 168:
    /*! Production::    _Qcardinality_E_Opt : %epsilon */

    this.$ = ({});
    break;

case 99:
    /*! Production::    _QxsFacet_E_Star : _QxsFacet_E_Star xsFacet */

    if (Object.keys(yyvstack[yysp - 1]).indexOf(Object.keys(yyvstack[yysp])[0]) !== -1) {
      error(new Error("Parse error: facet "+Object.keys(yyvstack[yysp])[0]+" defined multiple times"), yy);
    }
    this.$ = extend(yyvstack[yysp - 1], yyvstack[yysp]) // t: 1literalLength
    break;

case 101:
    /*! Production::    _QnumericFacet_E_Plus : _QnumericFacet_E_Plus numericFacet */
case 107:
    /*! Production::    _QstringFacet_E_Plus : _QstringFacet_E_Plus stringFacet */

    if (Object.keys(yyvstack[yysp - 1]).indexOf(Object.keys(yyvstack[yysp])[0]) !== -1) {
      error(new Error("Parse error: facet "+Object.keys(yyvstack[yysp])[0]+" defined multiple times"), yy);
    }
    this.$ = extend(yyvstack[yysp - 1], yyvstack[yysp]) // t: !! look to 1literalLength
    break;

case 102:
    /*! Production::    nonLitInlineNodeConstraint : nonLiteralKind _QstringFacet_E_Star */

    this.$ = (extend({ type: "NodeConstraint" }, yyvstack[yysp - 1], yyvstack[yysp] ? yyvstack[yysp] : {}));
    break;

case 103:
    /*! Production::    nonLitInlineNodeConstraint : _QstringFacet_E_Plus */

    this.$ = (extend({ type: "NodeConstraint" }, yyvstack[yysp]));
    break;

case 105:
    /*! Production::    _QstringFacet_E_Star : _QstringFacet_E_Star stringFacet */

    if (Object.keys(yyvstack[yysp - 1]).indexOf(Object.keys(yyvstack[yysp])[0]) !== -1) {
      error(new Error("Parse error: facet "+Object.keys(yyvstack[yysp])[0]+" defined multiple times"), yy);
    }
    this.$ = extend(yyvstack[yysp - 1], yyvstack[yysp])
    break;

case 108:
    /*! Production::    nonLiteralKind : IT_IRI */

    this.$ = ({ nodeKind: "iri" });
    break;

case 109:
    /*! Production::    nonLiteralKind : IT_BNODE */

    this.$ = ({ nodeKind: "bnode" });
    break;

case 110:
    /*! Production::    nonLiteralKind : IT_NONLITERAL */

    this.$ = ({ nodeKind: "nonliteral" });
    break;

case 113:
    /*! Production::    stringFacet : stringLength INTEGER */
case 119:
    /*! Production::    numericFacet : numericLength INTEGER */

    this.$ = (keyValObject(yyvstack[yysp - 1], parseInt(yyvstack[yysp], 10)));
    break;

case 114:
    /*! Production::    stringFacet : REGEXP */

    this.$ = (unescapeRegexp(yyvstack[yysp]));
    break;

case 115:
    /*! Production::    stringLength : IT_LENGTH */

    this.$ = ("length");
    break;

case 116:
    /*! Production::    stringLength : IT_MINLENGTH */

    this.$ = ("minlength");
    break;

case 117:
    /*! Production::    stringLength : IT_MAXLENGTH */

    this.$ = ("maxlength");
    break;

case 118:
    /*! Production::    numericFacet : numericRange _rawNumeric */

    this.$ = (keyValObject(yyvstack[yysp - 1], yyvstack[yysp]));
    break;

case 120:
    /*! Production::    _rawNumeric : INTEGER */

    this.$ = (parseInt(yyvstack[yysp], 10));
    break;

case 121:
    /*! Production::    _rawNumeric : DECIMAL */
case 122:
    /*! Production::    _rawNumeric : DOUBLE */

    this.$ = (parseFloat(yyvstack[yysp]));
    break;

case 123:
    /*! Production::    _rawNumeric : string "^^" datatype */

    // ## deprecated
    if (yyvstack[yysp] === XSD_DECIMAL || yyvstack[yysp] === XSD_FLOAT || yyvstack[yysp] === XSD_DOUBLE)
      this.$ = parseFloat(yyvstack[yysp - 2].value);
    else if (numericDatatypes.indexOf(yyvstack[yysp]) !== -1)
      this.$ = parseInt(yyvstack[yysp - 2].value)
    else
      error(new Error("Parse error: numeric range facet expected numeric datatype instead of " + yyvstack[yysp]), yy);
    break;

case 124:
    /*! Production::    numericRange : IT_MININCLUSIVE */

    this.$ = ("mininclusive");
    break;

case 125:
    /*! Production::    numericRange : IT_MINEXCLUSIVE */

    this.$ = ("minexclusive");
    break;

case 126:
    /*! Production::    numericRange : IT_MAXINCLUSIVE */

    this.$ = ("maxinclusive");
    break;

case 127:
    /*! Production::    numericRange : IT_MAXEXCLUSIVE */

    this.$ = ("maxexclusive");
    break;

case 128:
    /*! Production::    numericLength : IT_TOTALDIGITS */

    this.$ = ("totaldigits");
    break;

case 129:
    /*! Production::    numericLength : IT_FRACTIONDIGITS */

    this.$ = ("fractiondigits");
    break;

case 130:
    /*! Production::    shapeDefinition : inlineShapeDefinition _Qannotation_E_Star semanticActions */

    // t: 1dotInherit3
    this.$ = yyvstack[yysp - 2] === EmptyShape ? { type: "Shape" } : yyvstack[yysp - 2]; // t: 0
    if (yyvstack[yysp - 1].length) { this.$.annotations = yyvstack[yysp - 1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
    if (yyvstack[yysp]) { this.$.semActs = yyvstack[yysp].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot
    break;

case 131:
    /*! Production::    inlineShapeDefinition : _Q_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star "{" _QtripleExpression_E_Opt "}" */

    // t: 1dotInherit3
      var exprObj = yyvstack[yysp - 1] ? { expression: yyvstack[yysp - 1] } : EmptyObject; // t: 0, 0Inherit1
      this.$ = (exprObj === EmptyObject && yyvstack[yysp - 3] === EmptyObject) ?
    EmptyShape :
    extend({ type: "Shape" }, exprObj, yyvstack[yysp - 3]);
    break;

case 132:
    /*! Production::    _O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C : extension */

    this.$ = ([ "inherit", yyvstack[yysp] ]);
    break;

case 133:
    /*! Production::    _O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C : extraPropertySet */

    this.$ = ([ "extra", yyvstack[yysp] ]);
    break;

case 134:
    /*! Production::    _O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C : IT_CLOSED */

    this.$ = ([ "closed", true ]);
    break;

case 135:
    /*! Production::    _Q_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star : %epsilon */

    this.$ = (EmptyObject);
    break;

case 136:
    /*! Production::    _Q_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star : _Q_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star _O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C */

    if (yyvstack[yysp - 1] === EmptyObject)
      yyvstack[yysp - 1] = {};
    if (yyvstack[yysp][0] === "closed")
      yyvstack[yysp - 1]["closed"] = true; // t: 1dotClosed
    else if (yyvstack[yysp][0] in yyvstack[yysp - 1])
      yyvstack[yysp - 1][yyvstack[yysp][0]] = unionAll(yyvstack[yysp - 1][yyvstack[yysp][0]], yyvstack[yysp][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
    else
      yyvstack[yysp - 1][yyvstack[yysp][0]] = yyvstack[yysp][1]; // t: 1dotInherit1
    this.$ = yyvstack[yysp - 1];
    break;

case 145:
    /*! Production::    multiElementOneOf : groupTripleExpr _Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus */

    this.$ = ({ type: "OneOf", expressions: unionAll([yyvstack[yysp - 1]], yyvstack[yysp]) });
    break;

case 151:
    /*! Production::    singleElementGroup : unaryTripleExpr _QGT_SEMI_E_Opt */
case 178:
    /*! Production::    valueSet : "[" _QvalueSetValue_E_Star "]" */

    this.$ = (yyvstack[yysp - 1]);
    break;

case 155:
    /*! Production::    multiElementGroup : unaryTripleExpr _Q_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C_E_Plus _QGT_SEMI_E_Opt */

    this.$ = ({ type: "EachOf", expressions: unionAll([yyvstack[yysp - 2]], yyvstack[yysp - 1]) });
    break;

case 160:
    /*! Production::    unaryTripleExpr : _Q_O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C_E_Opt _O_QtripleConstraint_E_Or_QbracketedTripleExpr_E_C */

    if (yyvstack[yysp - 1]) {
      this.$ = extend({ id: yyvstack[yysp - 1] }, yyvstack[yysp]);
      addProduction(yyvstack[yysp - 1],  this.$, yy);
    } else {
      this.$ = yyvstack[yysp]
    }
    break;

case 167:
    /*! Production::    bracketedTripleExpr : "(" tripleExpression ")" _Qcardinality_E_Opt _Qannotation_E_Star semanticActions */

    // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
    this.$ = yyvstack[yysp - 4];
    // Copy all of the new attributes into the encapsulated shape.
    if ("min" in yyvstack[yysp - 2]) { this.$.min = yyvstack[yysp - 2].min; } // t: open3groupdotclosecard23Annot3Code2
    if ("max" in yyvstack[yysp - 2]) { this.$.max = yyvstack[yysp - 2].max; } // t: open3groupdotclosecard23Annot3Code2
    if (yyvstack[yysp - 1].length) { this.$.annotations = yyvstack[yysp - 1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
    if (yyvstack[yysp]) { this.$.semActs = "semActs" in yyvstack[yysp - 4] ? yyvstack[yysp - 4].semActs.concat(yyvstack[yysp].semActs) : yyvstack[yysp].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
    break;

case 170:
    /*! Production::    tripleConstraint : _QsenseFlags_E_Opt predicate inlineShapeExpression _Qcardinality_E_Opt _Qannotation_E_Star semanticActions */

    // $6: t: 1dotCode1
    if (yyvstack[yysp - 3] !== EmptyShape && false) {
      var t = blank();
      addShape(t, yyvstack[yysp - 3], yy);
      yyvstack[yysp - 3] = t; // ShapeRef
    }
        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, yyvstack[yysp - 5] ? yyvstack[yysp - 5] : {}, { predicate: yyvstack[yysp - 4] }, (yyvstack[yysp - 3] === EmptyShape ? {} : { valueExpr: yyvstack[yysp - 3] }), yyvstack[yysp - 2], yyvstack[yysp]); // t: 1dot // t: 1inversedot
        if (yyvstack[yysp - 1].length)
          this.$["annotations"] = yyvstack[yysp - 1]; // t: 1dotAnnot3 // t: 1inversedotAnnot3
    break;

case 173:
    /*! Production::    cardinality : "*" */

    this.$ = ({ min:0, max:UNBOUNDED });
    break;

case 174:
    /*! Production::    cardinality : "+" */

    this.$ = ({ min:1, max:UNBOUNDED });
    break;

case 175:
    /*! Production::    cardinality : "?" */

    this.$ = ({ min:0, max:1 });
    break;

case 176:
    /*! Production::    cardinality : REPEAT_RANGE */

    yyvstack[yysp] = yyvstack[yysp].substr(1, yyvstack[yysp].length-2);
    var nums = yyvstack[yysp].match(/(\d+)/g);
    this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
    if (nums.length === 2)
        this.$["max"] = parseInt(nums[1], 10); // t: 1card23
    else if (yyvstack[yysp].indexOf(',') === -1) // t: 1card2
        this.$["max"] = parseInt(nums[0], 10);
    else
        this.$["max"] = UNBOUNDED;
    break;

case 177:
    /*! Production::    senseFlags : "^" */

    this.$ = ({ inverse: true });
    break;

case 191:
    /*! Production::    _O_QiriExclusion_E_Plus_Or_QliteralExclusion_E_Plus_Or_QlanguageExclusion_E_Plus_C : _QiriExclusion_E_Plus */

    this.$ = ({ type: "IriStemRange", stem: { type: "Wildcard" }, exclusions: yyvstack[yysp] });
    break;

case 192:
    /*! Production::    _O_QiriExclusion_E_Plus_Or_QliteralExclusion_E_Plus_Or_QlanguageExclusion_E_Plus_C : _QliteralExclusion_E_Plus */

    this.$ = ({ type: "LiteralStemRange", stem: { type: "Wildcard" }, exclusions: yyvstack[yysp] });
    break;

case 193:
    /*! Production::    _O_QiriExclusion_E_Plus_Or_QliteralExclusion_E_Plus_Or_QlanguageExclusion_E_Plus_C : _QlanguageExclusion_E_Plus */

    this.$ = ({ type: "LanguageStemRange", stem: { type: "Wildcard" }, exclusions: yyvstack[yysp] });
    break;

case 194:
    /*! Production::    iriRange : iri _Q_O_QGT_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt */

    if (yyvstack[yysp]) {
      this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
        type: yyvstack[yysp].length ? "IriStemRange" : "IriStem",
        stem: yyvstack[yysp - 1]
      };
      if (yyvstack[yysp].length)
        this.$["exclusions"] = yyvstack[yysp]; // t: 1val1iriStemMinusiri3
    } else {
      this.$ = yyvstack[yysp - 1]; // t: 1val1IRIREF, 1AvalA
    }
    break;

case 200:
    /*! Production::    iriExclusion : "-" iri _QGT_TILDE_E_Opt */

    this.$ = (yyvstack[yysp] ? { type: "IriStem", stem: yyvstack[yysp - 1] } /* t: 1val1iriStemMinusiriStem3 */ : yyvstack[yysp - 1]);
    break;

case 203:
    /*! Production::    literalRange : literal _Q_O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt */

    if (yyvstack[yysp]) {
      this.$ = {  // t: 1val1literalStemMinusliteralStem3, 1val1literalStem
        type: yyvstack[yysp].length ? "LiteralStemRange" : "LiteralStem",
        stem: yyvstack[yysp - 1].value
      };
      if (yyvstack[yysp].length)
        this.$["exclusions"] = yyvstack[yysp]; // t: 1val1literalStemMinusliteral3
    } else {
      this.$ = yyvstack[yysp - 1]; // t: 1val1LITERAL
    }
    break;

case 209:
    /*! Production::    literalExclusion : "-" literal _QGT_TILDE_E_Opt */

    this.$ = (yyvstack[yysp] ? { type: "LiteralStem", stem: yyvstack[yysp - 1].value } /* t: 1val1literalStemMinusliteral3 */ : yyvstack[yysp - 1].value);
    break;

case 210:
    /*! Production::    languageRange : LANGTAG _Q_O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt */

    if (yyvstack[yysp]) {
      this.$ = {  // t: 1val1languageStemMinuslanguage3 1val1languageStemMinuslanguageStem3 : 1val1languageStem
        type: yyvstack[yysp].length ? "LanguageStemRange" : "LanguageStem",
        stem: yyvstack[yysp - 1]
      };
      if (yyvstack[yysp].length)
        this.$["exclusions"] = yyvstack[yysp]; // t: 1val1languageStemMinuslanguage3, 1val1languageStemMinuslanguageStem3
    } else {
      this.$ = { type: "Language", languageTag: yyvstack[yysp - 1] }; // t: 1val1language
    }
    break;

case 211:
    /*! Production::    languageRange : "@" _O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C */

    this.$ = {  // t: @@
      type: yyvstack[yysp].length ? "LanguageStemRange" : "LanguageStem",
      stem: ""
    };
    if (yyvstack[yysp].length)
      this.$["exclusions"] = yyvstack[yysp]; // t: @@
    break;

case 217:
    /*! Production::    languageExclusion : "-" LANGTAG _QGT_TILDE_E_Opt */

    this.$ = (yyvstack[yysp] ? { type: "LanguageStem", stem: yyvstack[yysp - 1] } /* t: 1val1languageStemMinuslanguageStem3 */ : yyvstack[yysp - 1]);
    break;

case 219:
    /*! Production::    annotation : "//" predicate _O_Qiri_E_Or_Qliteral_E_C */

    this.$ = ({ type: "Annotation", predicate: yyvstack[yysp - 1], object: yyvstack[yysp] });
    break;

case 222:
    /*! Production::    semanticActions : _QcodeDecl_E_Star */

    this.$ = (yyvstack[yysp].length ? { semActs: yyvstack[yysp] } : null);
    break;

case 225:
    /*! Production::    codeDecl : "%" iri _O_QCODE_E_Or_QGT_MODULO_E_C */

    this.$ = (yyvstack[yysp] ? unescapeSemanticAction(yyvstack[yysp - 1], yyvstack[yysp]) /* t: 1dotCode1 */ : { type: "SemAct", name: yyvstack[yysp - 1] });
    break;

case 232:
    /*! Production::    predicate : a */

    this.$ = (RDF_TYPE);
    break;

case 238:
    /*! Production::    numericLiteral : INTEGER */

    this.$ = (createLiteral(yyvstack[yysp], XSD_INTEGER));
    break;

case 239:
    /*! Production::    numericLiteral : DECIMAL */

    this.$ = (createLiteral(yyvstack[yysp], XSD_DECIMAL));
    break;

case 240:
    /*! Production::    numericLiteral : DOUBLE */

    this.$ = (createLiteral(yyvstack[yysp], XSD_DOUBLE));
    break;

case 242:
    /*! Production::    rdfLiteral : string _Q_O_QGT_DTYPE_E_S_Qdatatype_E_C_E_Opt */

    this.$ = (yyvstack[yysp] ? extend(yyvstack[yysp - 1], { type: yyvstack[yysp] }) : yyvstack[yysp - 1]);
    break;

case 246:
    /*! Production::    booleanLiteral : IT_true */

    this.$ = ({ value: "true", type: XSD_BOOLEAN });
    break;

case 247:
    /*! Production::    booleanLiteral : IT_false */

    this.$ = ({ value: "false", type: XSD_BOOLEAN });
    break;

case 248:
    /*! Production::    string : STRING_LITERAL1 */
case 250:
    /*! Production::    string : STRING_LITERAL2 */

    this.$ = (unescapeString(yyvstack[yysp], 1));
    break;

case 249:
    /*! Production::    string : STRING_LITERAL_LONG1 */
case 251:
    /*! Production::    string : STRING_LITERAL_LONG2 */

    this.$ = (unescapeString(yyvstack[yysp], 3));
    break;

case 252:
    /*! Production::    langString : LANG_STRING_LITERAL1 */
case 254:
    /*! Production::    langString : LANG_STRING_LITERAL2 */

    this.$ = (unescapeLangString(yyvstack[yysp], 1));
    break;

case 253:
    /*! Production::    langString : LANG_STRING_LITERAL_LONG1 */
case 255:
    /*! Production::    langString : LANG_STRING_LITERAL_LONG2 */

    this.$ = (unescapeLangString(yyvstack[yysp], 3));
    break;

case 256:
    /*! Production::    iri : IRIREF */

    // t: 1dot
    var unesc = ShExUtil.unescapeText(yyvstack[yysp].slice(1,-1), {});
    this.$ = Parser._base === null || absoluteIRI.test(unesc) ? unesc : _resolveIRI(unesc)
    break;

case 258:
    /*! Production::    prefixedName : PNAME_LN */

    // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
    var namePos = yyvstack[yysp].indexOf(':');
    this.$ = expandPrefix(yyvstack[yysp].substr(0, namePos), yy) + ShExUtil.unescapeText(yyvstack[yysp].substr(namePos + 1), pnameEscapeReplacements);
    break;

case 259:
    /*! Production::    prefixedName : PNAME_NS */

    // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
    this.$ = expandPrefix(yyvstack[yysp].substr(0, yyvstack[yysp].length - 1), yy);
    break;

}
},
table: bt({
  len: u([
  2,
  1,
  1,
  27,
  1,
  s,
  [0, 5],
  s,
  [1, 3],
  5,
  s,
  [0, 4],
  11,
  1,
  34,
  s,
  [0, 3],
  c,
  [11, 5],
  0,
  0,
  21,
  c,
  [9, 8],
  32,
  s,
  [0, 3],
  45,
  29,
  7,
  0,
  0,
  8,
  3,
  s,
  [0, 12],
  c,
  [52, 3],
  c,
  [47, 3],
  1,
  1,
  50,
  0,
  17,
  25,
  0,
  25,
  32,
  c,
  [69, 4],
  c,
  [80, 3],
  1,
  1,
  22,
  9,
  c,
  [31, 6],
  0,
  c,
  [92, 4],
  9,
  c,
  [97, 6],
  s,
  [0, 6],
  17,
  c,
  [67, 3],
  0,
  11,
  13,
  c,
  [82, 3],
  31,
  s,
  [0, 12],
  c,
  [103, 6],
  c,
  [102, 7],
  11,
  12,
  0,
  c,
  [78, 5],
  s,
  [0, 4],
  8,
  c,
  [105, 7],
  c,
  [81, 3],
  1,
  1,
  19,
  c,
  [85, 7],
  c,
  [36, 3],
  24,
  16,
  23,
  27,
  0,
  s,
  [29, 3],
  0,
  20,
  s,
  [0, 4],
  9,
  c,
  [39, 3],
  c,
  [48, 6],
  c,
  [108, 12],
  c,
  [207, 5],
  c,
  [19, 3],
  50,
  0,
  50,
  c,
  [164, 4],
  c,
  [163, 31],
  c,
  [154, 15],
  c,
  [73, 9],
  16,
  20,
  16,
  c,
  [120, 4],
  9,
  17,
  0,
  17,
  c,
  [62, 6],
  19,
  s,
  [1, 3],
  14,
  c,
  [62, 16],
  c,
  [16, 3],
  8,
  0,
  3,
  c,
  [199, 3],
  c,
  [62, 4],
  21,
  c,
  [297, 3],
  13,
  c,
  [4, 3],
  20,
  c,
  [4, 3],
  c,
  [37, 4],
  9,
  1,
  c,
  [34, 3],
  4,
  s,
  [0, 3],
  7,
  c,
  [143, 3],
  8,
  8,
  c,
  [100, 3],
  s,
  [0, 6],
  12,
  s,
  [0, 12],
  8,
  s,
  [23, 3],
  2,
  s,
  [0, 8],
  24,
  s,
  [0, 13],
  6,
  c,
  [273, 7],
  c,
  [71, 4],
  c,
  [189, 6],
  c,
  [9, 3],
  c,
  [282, 6],
  c,
  [93, 4],
  c,
  [356, 8],
  c,
  [36, 35],
  c,
  [347, 33],
  c,
  [344, 10],
  c,
  [336, 18],
  c,
  [332, 8],
  c,
  [21, 10],
  c,
  [60, 6],
  c,
  [24, 3],
  c,
  [60, 5],
  16,
  8,
  15,
  19,
  0,
  s,
  [21, 3],
  c,
  [60, 20],
  c,
  [567, 3],
  c,
  [60, 5],
  5,
  25,
  c,
  [498, 8],
  25,
  c,
  [12, 8],
  c,
  [39, 3],
  3,
  0,
  15,
  0,
  6,
  14,
  14,
  s,
  [0, 4],
  7,
  18,
  s,
  [0, 21],
  s,
  [22, 3],
  c,
  [226, 5],
  c,
  [46, 4],
  c,
  [3, 6],
  0,
  6,
  s,
  [0, 7],
  c,
  [431, 8],
  8,
  c,
  [201, 15],
  c,
  [200, 6],
  23,
  s,
  [0, 8],
  32,
  c,
  [554, 5],
  c,
  [149, 7],
  c,
  [47, 50],
  c,
  [525, 13],
  c,
  [483, 22],
  c,
  [423, 74],
  0,
  8,
  20,
  8,
  c,
  [342, 5],
  c,
  [100, 5],
  5,
  c,
  [4, 3],
  12,
  c,
  [104, 12],
  c,
  [588, 3],
  c,
  [654, 7],
  c,
  [19, 3],
  c,
  [655, 5],
  c,
  [69, 21],
  c,
  [36, 35],
  c,
  [974, 12],
  c,
  [628, 14],
  c,
  [26, 12],
  16,
  c,
  [26, 25],
  c,
  [303, 9],
  c,
  [680, 6],
  s,
  [0, 6],
  c,
  [1089, 4],
  c,
  [103, 5],
  c,
  [755, 7],
  8,
  c,
  [991, 3],
  19,
  0,
  1,
  s,
  [23, 3],
  s,
  [0, 8],
  c,
  [517, 8],
  c,
  [476, 12],
  50,
  c,
  [102, 9],
  c,
  [356, 16],
  c,
  [178, 8],
  c,
  [364, 3],
  1,
  6,
  c,
  [38, 38],
  c,
  [435, 6],
  c,
  [612, 6],
  c,
  [615, 10],
  c,
  [561, 103],
  c,
  [123, 41],
  c,
  [825, 10],
  c,
  [824, 6],
  15,
  c,
  [123, 30],
  c,
  [47, 38],
  c,
  [390, 7],
  c,
  [6, 12],
  c,
  [1129, 3],
  1,
  1,
  47,
  12,
  c,
  [870, 27],
  c,
  [40, 5],
  c,
  [665, 36],
  c,
  [220, 10],
  c,
  [114, 7],
  c,
  [977, 9],
  c,
  [27, 28],
  c,
  [615, 80],
  c,
  [556, 78],
  c,
  [132, 38],
  c,
  [1327, 7],
  c,
  [26, 19],
  c,
  [392, 9],
  c,
  [158, 8],
  c,
  [43, 9],
  c,
  [966, 16],
  c,
  [120, 8],
  c,
  [974, 3],
  1,
  6,
  c,
  [38, 38],
  c,
  [348, 10],
  c,
  [17, 3],
  13,
  c,
  [420, 7],
  26,
  s,
  [1, 3],
  21,
  c,
  [375, 9],
  c,
  [1660, 4],
  c,
  [417, 8],
  c,
  [516, 7],
  34,
  c,
  [8, 7],
  c,
  [695, 44],
  c,
  [421, 52],
  6,
  c,
  [422, 26],
  c,
  [80, 81],
  c,
  [732, 23],
  c,
  [695, 91],
  c,
  [114, 24],
  c,
  [1405, 36],
  c,
  [114, 53],
  9,
  c,
  [2246, 3],
  c,
  [1059, 5],
  c,
  [2127, 5],
  0,
  1,
  c,
  [934, 5],
  c,
  [438, 3],
  26,
  0,
  s,
  [28, 3],
  c,
  [427, 8],
  c,
  [71, 10],
  9,
  c,
  [984, 6],
  c,
  [1299, 40],
  c,
  [200, 17],
  c,
  [224, 24],
  c,
  [12, 15],
  c,
  [581, 208],
  c,
  [1366, 49],
  c,
  [1057, 52],
  c,
  [133, 13],
  c,
  [1058, 14],
  c,
  [80, 81],
  0,
  6,
  c,
  [481, 3],
  47,
  0,
  47,
  c,
  [544, 9],
  c,
  [1502, 8],
  c,
  [511, 5],
  c,
  [507, 3],
  c,
  [1087, 43],
  c,
  [783, 31],
  c,
  [182, 16],
  c,
  [627, 77],
  c,
  [1298, 43],
  c,
  [713, 44],
  5,
  25,
  c,
  [249, 34],
  c,
  [1369, 40],
  c,
  [1995, 9],
  c,
  [939, 48],
  c,
  [714, 81],
  c,
  [425, 38],
  c,
  [39, 39],
  c,
  [104, 12],
  c,
  [3291, 6],
  c,
  [2227, 14],
  c,
  [229, 38],
  c,
  [42, 43],
  c,
  [418, 3],
  c,
  [693, 32],
  c,
  [464, 25],
  c,
  [1124, 92],
  c,
  [911, 69],
  c,
  [166, 5],
  c,
  [217, 25],
  c,
  [241, 30],
  c,
  [686, 86],
  c,
  [808, 23],
  c,
  [1539, 34],
  c,
  [105, 48],
  c,
  [16, 16],
  c,
  [601, 116],
  s,
  [0, 14],
  c,
  [56, 41],
  c,
  [257, 8],
  c,
  [441, 55],
  c,
  [471, 31],
  c,
  [3323, 10],
  c,
  [337, 62],
  c,
  [474, 20],
  c,
  [227, 43],
  c,
  [638, 32],
  c,
  [375, 17],
  c,
  [106, 11],
  c,
  [36, 7]
]),
  symbol: u([
  74,
  75,
  1,
  76,
  1,
  23,
  s,
  [25, 6, 1],
  71,
  72,
  77,
  s,
  [79, 10, 1],
  90,
  195,
  200,
  209,
  210,
  211,
  1,
  78,
  26,
  28,
  26,
  28,
  71,
  209,
  210,
  c,
  [36, 10],
  195,
  3,
  4,
  6,
  7,
  8,
  18,
  22,
  26,
  28,
  31,
  32,
  s,
  [35, 6, 1],
  s,
  [42, 4, 1],
  s,
  [49, 8, 1],
  71,
  73,
  91,
  92,
  110,
  121,
  c,
  [51, 6],
  c,
  [50, 8],
  c,
  [83, 6],
  89,
  90,
  c,
  [81, 4],
  c,
  [26, 5],
  c,
  [65, 8],
  c,
  [64, 21],
  104,
  109,
  110,
  4,
  6,
  c,
  [31, 5],
  c,
  [28, 18],
  115,
  122,
  124,
  125,
  127,
  128,
  130,
  131,
  133,
  134,
  135,
  s,
  [137, 4, 1],
  142,
  167,
  199,
  c,
  [77, 10],
  c,
  [76, 20],
  121,
  33,
  34,
  s,
  [95, 5, 1],
  c,
  [118, 3],
  72,
  c,
  [126, 4],
  23,
  60,
  196,
  c,
  [208, 7],
  c,
  [197, 35],
  100,
  105,
  c,
  [91, 28],
  112,
  119,
  121,
  c,
  [141, 19],
  c,
  [244, 7],
  33,
  34,
  71,
  72,
  93,
  c,
  [122, 5],
  1,
  7,
  8,
  22,
  c,
  [20, 8],
  35,
  36,
  c,
  [57, 3],
  72,
  73,
  113,
  119,
  121,
  c,
  [46, 3],
  c,
  [42, 9],
  c,
  [90, 7],
  71,
  72,
  114,
  124,
  c,
  [77, 5],
  c,
  [285, 29],
  c,
  [151, 3],
  s,
  [123, 3],
  129,
  c,
  [86, 4],
  c,
  [401, 7],
  c,
  [87, 4],
  c,
  [36, 4],
  55,
  56,
  59,
  c,
  [92, 3],
  133,
  134,
  s,
  [126, 3],
  c,
  [428, 8],
  33,
  34,
  c,
  [57, 6],
  c,
  [25, 3],
  c,
  [162, 3],
  8,
  22,
  55,
  56,
  73,
  141,
  144,
  212,
  213,
  168,
  41,
  41,
  46,
  47,
  s,
  [63, 4, 1],
  136,
  207,
  41,
  c,
  [176, 17],
  c,
  [298, 8],
  c,
  [25, 8],
  71,
  72,
  96,
  c,
  [36, 11],
  98,
  100,
  c,
  [443, 34],
  c,
  [32, 27],
  109,
  110,
  c,
  [511, 118],
  c,
  [205, 23],
  c,
  [412, 82],
  c,
  [318, 8],
  123,
  c,
  [365, 9],
  c,
  [428, 3],
  c,
  [398, 9],
  c,
  [47, 4],
  c,
  [396, 3],
  133,
  134,
  41,
  5,
  c,
  [227, 82],
  c,
  [530, 14],
  c,
  [526, 6],
  191,
  193,
  194,
  c,
  [126, 10],
  c,
  [17, 3],
  c,
  [16, 13],
  c,
  [75, 7],
  c,
  [23, 7],
  c,
  [593, 26],
  c,
  [192, 14],
  c,
  [594, 9],
  s,
  [132, 4, 1],
  137,
  138,
  c,
  [29, 58],
  4,
  9,
  13,
  17,
  s,
  [22, 4, 2],
  71,
  143,
  146,
  147,
  148,
  151,
  152,
  154,
  157,
  158,
  159,
  190,
  c,
  [319, 8],
  214,
  c,
  [24, 4],
  145,
  198,
  209,
  210,
  6,
  7,
  19,
  26,
  28,
  c,
  [686, 3],
  58,
  s,
  [61, 11, 1],
  169,
  174,
  180,
  185,
  197,
  202,
  203,
  s,
  [206, 5, 1],
  48,
  c,
  [474, 11],
  c,
  [942, 51],
  c,
  [50, 50],
  c,
  [1044, 340],
  5,
  c,
  [676, 16],
  c,
  [539, 20],
  c,
  [712, 26],
  c,
  [854, 9],
  5,
  33,
  34,
  c,
  [176, 6],
  5,
  c,
  [266, 3],
  c,
  [346, 6],
  c,
  [344, 7],
  c,
  [26, 3],
  c,
  [120, 7],
  c,
  [336, 43],
  c,
  [70, 4],
  23,
  c,
  [330, 11],
  c,
  [328, 6],
  5,
  c,
  [19, 3],
  c,
  [322, 7],
  c,
  [320, 24],
  c,
  [136, 9],
  c,
  [312, 8],
  5,
  33,
  96,
  c,
  [20, 3],
  c,
  [296, 65],
  c,
  [995, 17],
  c,
  [476, 3],
  195,
  c,
  [295, 4],
  c,
  [809, 3],
  c,
  [271, 10],
  c,
  [1953, 3],
  c,
  [20, 17],
  c,
  [591, 9],
  c,
  [27, 8],
  c,
  [174, 11],
  9,
  9,
  10,
  149,
  150,
  s,
  [9, 4, 1],
  153,
  155,
  156,
  4,
  17,
  c,
  [32, 4],
  160,
  161,
  163,
  164,
  166,
  c,
  [188, 4],
  201,
  c,
  [1968, 6],
  c,
  [8, 5],
  8,
  c,
  [152, 3],
  c,
  [114, 5],
  c,
  [209, 4],
  8,
  c,
  [414, 4],
  c,
  [149, 4],
  c,
  [75, 3],
  21,
  s,
  [170, 4, 1],
  178,
  184,
  189,
  c,
  [939, 3],
  20,
  c,
  [940, 17],
  176,
  177,
  c,
  [23, 21],
  182,
  183,
  c,
  [23, 21],
  187,
  188,
  20,
  187,
  c,
  [25, 9],
  48,
  c,
  [26, 12],
  204,
  205,
  c,
  [136, 3],
  c,
  [843, 14],
  c,
  [1470, 83],
  c,
  [837, 55],
  123,
  c,
  [488, 8],
  168,
  c,
  [527, 9],
  c,
  [846, 12],
  c,
  [167, 167],
  c,
  [1827, 145],
  c,
  [1746, 197],
  c,
  [1729, 145],
  9,
  c,
  [376, 12],
  c,
  [1229, 4],
  c,
  [306, 5],
  c,
  [368, 4],
  c,
  [1264, 9],
  c,
  [1260, 4],
  c,
  [321, 3],
  c,
  [29, 4],
  59,
  c,
  [8, 7],
  c,
  [346, 8],
  c,
  [15, 4],
  c,
  [1303, 18],
  c,
  [71, 8],
  c,
  [272, 7],
  c,
  [270, 6],
  c,
  [21, 42],
  c,
  [312, 53],
  c,
  [1364, 3],
  c,
  [304, 101],
  c,
  [2737, 5],
  c,
  [139, 5],
  c,
  [138, 11],
  192,
  c,
  [135, 8],
  c,
  [30, 60],
  48,
  c,
  [1401, 3],
  4,
  c,
  [250, 7],
  c,
  [246, 7],
  c,
  [1415, 6],
  4,
  9,
  10,
  c,
  [23, 7],
  c,
  [20, 4],
  c,
  [14, 14],
  c,
  [1472, 7],
  c,
  [56, 8],
  c,
  [305, 13],
  21,
  c,
  [306, 17],
  178,
  c,
  [22, 21],
  184,
  c,
  [22, 21],
  189,
  c,
  [18, 17],
  c,
  [169, 8],
  175,
  181,
  186,
  c,
  [1406, 6],
  c,
  [1696, 31],
  c,
  [1121, 9],
  c,
  [986, 73],
  c,
  [963, 113],
  c,
  [1100, 23],
  c,
  [654, 32],
  c,
  [706, 20],
  48,
  c,
  [271, 271],
  c,
  [2534, 72],
  c,
  [2310, 87],
  c,
  [2144, 352],
  c,
  [1614, 8],
  c,
  [502, 20],
  c,
  [1642, 12],
  c,
  [1679, 7],
  c,
  [1677, 11],
  c,
  [478, 9],
  c,
  [31, 4],
  c,
  [12, 12],
  c,
  [188, 7],
  c,
  [462, 26],
  c,
  [2933, 4],
  c,
  [3084, 68],
  c,
  [3083, 37],
  c,
  [255, 31],
  c,
  [135, 134],
  c,
  [4864, 3],
  c,
  [475, 15],
  48,
  c,
  [472, 6],
  204,
  205,
  c,
  [27, 4],
  c,
  [24, 9],
  48,
  c,
  [20, 3],
  c,
  [19, 15],
  c,
  [148, 7],
  c,
  [26, 6],
  c,
  [1552, 35],
  94,
  101,
  106,
  110,
  111,
  5,
  5,
  c,
  [3165, 3],
  5,
  c,
  [3165, 28],
  c,
  [440, 3],
  c,
  [1823, 12],
  c,
  [1091, 6],
  58,
  c,
  [3078, 4],
  c,
  [1699, 18],
  179,
  c,
  [23, 56],
  c,
  [3148, 15],
  c,
  [1836, 66],
  c,
  [4101, 51],
  c,
  [1278, 118],
  c,
  [1065, 12],
  c,
  [1289, 26],
  c,
  [1278, 8],
  c,
  [164, 163],
  c,
  [7, 4],
  c,
  [2449, 88],
  c,
  [2272, 573],
  c,
  [665, 143],
  c,
  [3547, 38],
  c,
  [3532, 81],
  c,
  [3629, 15],
  c,
  [601, 73],
  c,
  [207, 187],
  c,
  [1208, 6],
  c,
  [6, 12],
  c,
  [3559, 4],
  14,
  15,
  16,
  23,
  57,
  59,
  162,
  165,
  103,
  108,
  c,
  [1612, 28],
  116,
  120,
  121,
  c,
  [1610, 10],
  c,
  [4033, 7],
  c,
  [61, 11],
  c,
  [1886, 3],
  c,
  [3650, 15],
  c,
  [1900, 6],
  4,
  5,
  c,
  [3650, 13],
  c,
  [14, 13],
  c,
  [3650, 25],
  c,
  [1540, 7],
  c,
  [2639, 166],
  c,
  [878, 61],
  c,
  [403, 4],
  c,
  [31, 27],
  c,
  [92, 92],
  c,
  [2433, 86],
  c,
  [2183, 370],
  c,
  [410, 3],
  c,
  [1134, 9],
  c,
  [450, 4],
  c,
  [448, 6],
  c,
  [1071, 4],
  48,
  59,
  c,
  [11, 9],
  c,
  [434, 9],
  c,
  [432, 58],
  c,
  [3383, 79],
  c,
  [3473, 15],
  c,
  [3394, 15],
  c,
  [3383, 8],
  c,
  [116, 115],
  123,
  c,
  [1239, 8],
  33,
  57,
  59,
  102,
  c,
  [12, 9],
  34,
  57,
  59,
  107,
  s,
  [7, 6, 1],
  c,
  [15, 3],
  c,
  [101, 8],
  57,
  59,
  73,
  117,
  120,
  121,
  140,
  142,
  c,
  [38, 10],
  c,
  [83, 7],
  57,
  59,
  118,
  c,
  [1169, 37],
  129,
  c,
  [83, 15],
  c,
  [1167, 6],
  c,
  [87, 3],
  c,
  [1166, 5],
  c,
  [87, 10],
  c,
  [53, 6],
  57,
  c,
  [3414, 4],
  c,
  [1156, 10],
  c,
  [1174, 8],
  c,
  [214, 11],
  123,
  c,
  [3336, 35],
  c,
  [2349, 271],
  c,
  [1287, 46],
  c,
  [883, 9],
  c,
  [1293, 23],
  c,
  [78, 78],
  c,
  [1968, 18],
  c,
  [1812, 351],
  c,
  [369, 18],
  c,
  [4398, 135],
  c,
  [337, 184],
  c,
  [1219, 4],
  23,
  c,
  [1474, 5],
  c,
  [294, 28],
  c,
  [1175, 3],
  c,
  [32, 29],
  110,
  111,
  c,
  [1269, 17],
  129,
  c,
  [1309, 10],
  c,
  [1393, 6],
  c,
  [1202, 4],
  c,
  [1358, 26],
  c,
  [46, 14],
  c,
  [1359, 8],
  c,
  [1102, 6],
  c,
  [28, 56],
  c,
  [3484, 54],
  c,
  [273, 8],
  c,
  [2847, 4],
  c,
  [2938, 57],
  c,
  [61, 12],
  c,
  [2212, 164],
  c,
  [6, 36],
  c,
  [1688, 427],
  c,
  [3863, 207],
  c,
  [2882, 30],
  c,
  [2918, 10],
  c,
  [2888, 14],
  c,
  [54, 54],
  c,
  [1024, 5],
  c,
  [798, 8],
  c,
  [1015, 48],
  c,
  [47, 48],
  c,
  [237, 19],
  c,
  [1335, 19],
  c,
  [6317, 17],
  123,
  c,
  [1119, 8],
  c,
  [2818, 4],
  c,
  [12, 9],
  c,
  [2818, 4],
  c,
  [241, 3],
  c,
  [2818, 22],
  c,
  [38, 10],
  c,
  [2818, 48],
  c,
  [83, 15],
  c,
  [2818, 14],
  c,
  [87, 10],
  c,
  [2818, 41],
  c,
  [1742, 92],
  c,
  [1387, 200],
  c,
  [3415, 116],
  c,
  [6, 39],
  c,
  [2124, 31],
  c,
  [3468, 171],
  c,
  [162, 162],
  9,
  48,
  c,
  [864, 4],
  c,
  [2463, 86],
  c,
  [954, 10],
  c,
  [2463, 10],
  c,
  [1003, 26],
  c,
  [46, 14],
  c,
  [2407, 14],
  c,
  [28, 56],
  c,
  [8219, 54],
  c,
  [273, 8],
  c,
  [1841, 78],
  c,
  [5156, 187],
  c,
  [1713, 5],
  c,
  [1722, 4],
  c,
  [2978, 232],
  c,
  [201, 201],
  c,
  [1516, 7],
  c,
  [2161, 127],
  c,
  [1033, 19],
  c,
  [2161, 17],
  c,
  [6, 18],
  c,
  [2814, 81],
  c,
  [2475, 51],
  c,
  [5417, 34],
  c,
  [2420, 75],
  c,
  [56, 56],
  c,
  [960, 30],
  c,
  [2493, 175],
  c,
  [162, 162],
  9,
  c,
  [6980, 19],
  c,
  [6, 18],
  c,
  [2043, 164],
  9,
  c,
  [3319, 5],
  c,
  [1501, 57],
  c,
  [2016, 183],
  c,
  [201, 201],
  c,
  [617, 6],
  c,
  [1708, 207],
  c,
  [6, 12],
  c,
  [1659, 103],
  c,
  [56, 76],
  c,
  [1456, 36],
  c,
  [1251, 164],
  c,
  [1053, 4],
  c,
  [809, 207],
  c,
  [602, 13],
  c,
  [499, 55],
  c,
  [1532, 8]
]),
  type: u([
  0,
  0,
  1,
  0,
  s,
  [2, 10],
  s,
  [0, 17],
  2,
  c,
  [29, 6],
  c,
  [9, 3],
  c,
  [36, 10],
  s,
  [2, 31],
  c,
  [55, 5],
  c,
  [51, 13],
  c,
  [81, 13],
  c,
  [77, 14],
  c,
  [64, 22],
  c,
  [92, 29],
  c,
  [163, 17],
  c,
  [76, 28],
  c,
  [51, 7],
  c,
  [152, 10],
  c,
  [208, 18],
  c,
  [105, 27],
  c,
  [34, 34],
  c,
  [141, 27],
  c,
  [67, 25],
  c,
  [25, 24],
  c,
  [208, 35],
  c,
  [36, 33],
  c,
  [116, 27],
  c,
  [32, 18],
  c,
  [42, 14],
  c,
  [90, 10],
  c,
  [68, 14],
  c,
  [212, 14],
  c,
  [443, 57],
  c,
  [63, 9],
  c,
  [511, 119],
  c,
  [205, 19],
  c,
  [412, 82],
  c,
  [355, 14],
  c,
  [52, 23],
  c,
  [71, 29],
  c,
  [227, 66],
  c,
  [332, 27],
  c,
  [40, 23],
  c,
  [371, 30],
  c,
  [802, 52],
  c,
  [29, 44],
  c,
  [233, 15],
  c,
  [646, 23],
  c,
  [290, 22],
  c,
  [667, 41],
  c,
  [942, 33],
  c,
  [50, 39],
  c,
  [1044, 343],
  c,
  [48, 23],
  c,
  [375, 24],
  c,
  [854, 25],
  c,
  [369, 33],
  c,
  [336, 60],
  c,
  [92, 19],
  c,
  [320, 24],
  c,
  [312, 16],
  c,
  [1272, 63],
  c,
  [359, 26],
  c,
  [100, 8],
  c,
  [20, 32],
  c,
  [27, 23],
  c,
  [164, 8],
  c,
  [23, 13],
  c,
  [500, 17],
  c,
  [943, 17],
  c,
  [181, 13],
  c,
  [339, 28],
  c,
  [23, 49],
  c,
  [260, 23],
  c,
  [477, 8],
  c,
  [1470, 94],
  c,
  [837, 55],
  c,
  [1526, 19],
  c,
  [437, 31],
  c,
  [167, 157],
  c,
  [1827, 157],
  c,
  [1746, 180],
  c,
  [1729, 141],
  c,
  [2817, 9],
  c,
  [178, 15],
  c,
  [1564, 26],
  c,
  [1401, 37],
  c,
  [299, 33],
  c,
  [21, 36],
  c,
  [312, 46],
  c,
  [304, 103],
  c,
  [105, 20],
  c,
  [30, 73],
  c,
  [828, 19],
  c,
  [1710, 16],
  c,
  [964, 21],
  c,
  [180, 18],
  c,
  [2589, 24],
  c,
  [22, 59],
  c,
  [262, 16],
  c,
  [987, 41],
  c,
  [986, 92],
  c,
  [963, 103],
  c,
  [1123, 37],
  c,
  [381, 18],
  c,
  [873, 17],
  c,
  [271, 266],
  c,
  [2534, 75],
  c,
  [2310, 86],
  c,
  [2144, 355],
  c,
  [502, 28],
  c,
  [1679, 26],
  c,
  [431, 12],
  c,
  [470, 19],
  c,
  [462, 29],
  c,
  [3084, 70],
  c,
  [3083, 36],
  c,
  [422, 41],
  c,
  [135, 126],
  c,
  [2913, 27],
  c,
  [3465, 17],
  c,
  [1579, 25],
  c,
  [1552, 39],
  c,
  [1794, 11],
  c,
  [3165, 25],
  c,
  [1012, 18],
  c,
  [1173, 27],
  c,
  [23, 68],
  c,
  [3197, 25],
  c,
  [22, 65],
  c,
  [2170, 42],
  c,
  [1278, 114],
  c,
  [58, 34],
  c,
  [164, 171],
  c,
  [2449, 90],
  c,
  [2272, 575],
  c,
  [665, 148],
  c,
  [3547, 40],
  c,
  [3532, 79],
  c,
  [601, 88],
  c,
  [207, 178],
  c,
  [2188, 10],
  c,
  [1848, 18],
  c,
  [3732, 51],
  c,
  [1953, 23],
  c,
  [3650, 69],
  c,
  [5788, 88],
  c,
  [2639, 86],
  c,
  [848, 61],
  c,
  [31, 61],
  c,
  [61, 60],
  c,
  [2433, 104],
  c,
  [2183, 352],
  c,
  [429, 26],
  c,
  [30, 18],
  c,
  [432, 63],
  c,
  [3383, 82],
  c,
  [42, 27],
  c,
  [116, 118],
  c,
  [3962, 25],
  c,
  [1396, 26],
  c,
  [8118, 53],
  c,
  [1394, 29],
  c,
  [1256, 27],
  c,
  [1174, 17],
  c,
  [6324, 34],
  c,
  [85, 13],
  c,
  [2349, 273],
  c,
  [1287, 46],
  c,
  [883, 21],
  c,
  [1319, 33],
  c,
  [78, 56],
  c,
  [1968, 26],
  c,
  [1812, 343],
  c,
  [369, 27],
  c,
  [4533, 128],
  c,
  [337, 183],
  c,
  [6065, 42],
  c,
  [1097, 32],
  c,
  [294, 18],
  c,
  [6836, 39],
  c,
  [28, 24],
  c,
  [449, 28],
  c,
  [28, 54],
  c,
  [5756, 39],
  c,
  [2938, 78],
  c,
  [2376, 165],
  c,
  [6, 33],
  c,
  [1688, 427],
  c,
  [3863, 209],
  c,
  [2882, 30],
  c,
  [269, 20],
  c,
  [2936, 34],
  c,
  [54, 24],
  c,
  [798, 11],
  c,
  [1015, 58],
  c,
  [47, 46],
  c,
  [67, 27],
  c,
  [6317, 20],
  c,
  [2818, 193],
  c,
  [1742, 94],
  c,
  [1387, 194],
  c,
  [3531, 119],
  c,
  [6, 38],
  c,
  [382, 37],
  c,
  [650, 163],
  c,
  [162, 170],
  c,
  [2463, 278],
  c,
  [3529, 79],
  c,
  [5156, 191],
  c,
  [515, 239],
  c,
  [201, 199],
  c,
  [1025, 9],
  c,
  [2161, 158],
  c,
  [6, 20],
  c,
  [2814, 93],
  c,
  [2475, 40],
  c,
  [259, 109],
  c,
  [315, 58],
  c,
  [1843, 367],
  c,
  [2400, 38],
  c,
  [362, 163],
  c,
  [1501, 455],
  c,
  [207, 204],
  c,
  [11234, 37],
  c,
  [1400, 134],
  c,
  [56, 62],
  c,
  [1413, 164],
  c,
  [602, 223],
  c,
  [443, 52],
  s,
  [0, 3]
]),
  state: u([
  1,
  2,
  3,
  10,
  6,
  4,
  5,
  7,
  8,
  9,
  14,
  16,
  15,
  18,
  17,
  21,
  20,
  22,
  26,
  23,
  31,
  34,
  36,
  39,
  41,
  42,
  44,
  46,
  50,
  52,
  56,
  58,
  59,
  60,
  57,
  61,
  55,
  62,
  67,
  c,
  [22, 3],
  68,
  36,
  69,
  70,
  71,
  73,
  75,
  74,
  80,
  87,
  79,
  83,
  82,
  92,
  96,
  95,
  100,
  101,
  76,
  81,
  88,
  86,
  85,
  93,
  99,
  113,
  117,
  120,
  118,
  121,
  119,
  124,
  125,
  128,
  126,
  132,
  137,
  139,
  143,
  144,
  146,
  s,
  [148, 4, 1],
  154,
  158,
  153,
  152,
  c,
  [41, 10],
  157,
  c,
  [41, 6],
  162,
  163,
  c,
  [41, 4],
  164,
  165,
  167,
  166,
  s,
  [168, 5, 1],
  174,
  173,
  178,
  179,
  181,
  182,
  s,
  [184, 6, 1],
  96,
  s,
  [190, 4, 1],
  100,
  101,
  195,
  197,
  196,
  199,
  203,
  205,
  209,
  215,
  c,
  [41, 5],
  216,
  217,
  220,
  218,
  224,
  226,
  225,
  s,
  [227, 6, 1],
  139,
  s,
  [233, 4, 1],
  238,
  237,
  243,
  250,
  242,
  246,
  245,
  255,
  259,
  258,
  263,
  264,
  239,
  244,
  251,
  249,
  248,
  256,
  262,
  267,
  271,
  274,
  272,
  275,
  273,
  278,
  279,
  280,
  c,
  [86, 5],
  281,
  c,
  [86, 6],
  282,
  182,
  184,
  283,
  284,
  287,
  285,
  291,
  c,
  [79, 4],
  293,
  294,
  295,
  179,
  298,
  300,
  299,
  305,
  312,
  304,
  308,
  307,
  317,
  321,
  320,
  325,
  326,
  301,
  306,
  313,
  311,
  310,
  318,
  324,
  329,
  333,
  336,
  334,
  337,
  335,
  341,
  340,
  342,
  345,
  344,
  346,
  349,
  348,
  350,
  352,
  96,
  353,
  354,
  356,
  355,
  358,
  359,
  c,
  [6, 12],
  360,
  361,
  362,
  364,
  363,
  365,
  366,
  367,
  370,
  368,
  369,
  374,
  375,
  378,
  376,
  373,
  382,
  383,
  384,
  387,
  s,
  [391, 4, 1],
  397,
  403,
  402,
  404,
  408,
  407,
  396,
  401,
  278,
  423,
  424,
  427,
  433,
  426,
  425,
  431,
  439,
  430,
  435,
  434,
  447,
  452,
  450,
  456,
  457,
  432,
  440,
  451,
  438,
  437,
  448,
  455,
  460,
  463,
  469,
  462,
  461,
  467,
  475,
  466,
  471,
  470,
  483,
  488,
  486,
  492,
  493,
  468,
  476,
  487,
  474,
  473,
  484,
  491,
  496,
  497,
  498,
  501,
  505,
  500,
  499,
  c,
  [194, 10],
  504,
  c,
  [194, 6],
  509,
  510,
  c,
  [194, 4],
  511,
  512,
  514,
  513,
  s,
  [515, 5, 1],
  521,
  520,
  525,
  526,
  528,
  182,
  184,
  s,
  [529, 5, 1],
  259,
  s,
  [534, 4, 1],
  263,
  264,
  c,
  [199, 4],
  539,
  541,
  545,
  547,
  c,
  [41, 5],
  548,
  549,
  552,
  550,
  556,
  558,
  557,
  s,
  [559, 5, 1],
  345,
  565,
  346,
  566,
  c,
  [164, 10],
  345,
  567,
  346,
  568,
  179,
  569,
  570,
  c,
  [215, 4],
  571,
  572,
  574,
  573,
  s,
  [575, 5, 1],
  581,
  580,
  585,
  586,
  588,
  182,
  184,
  s,
  [589, 5, 1],
  321,
  s,
  [594, 4, 1],
  325,
  326,
  c,
  [78, 4],
  599,
  601,
  605,
  607,
  c,
  [41, 5],
  608,
  609,
  612,
  610,
  616,
  618,
  617,
  s,
  [619, 6, 1],
  626,
  627,
  630,
  633,
  635,
  627,
  630,
  636,
  638,
  627,
  630,
  640,
  644,
  648,
  647,
  650,
  654,
  651,
  655,
  657,
  s,
  [656, 4, 2],
  663,
  666,
  664,
  670,
  671,
  674,
  672,
  678,
  c,
  [260, 3],
  679,
  384,
  387,
  681,
  682,
  683,
  680,
  684,
  685,
  686,
  689,
  688,
  692,
  691,
  695,
  694,
  697,
  699,
  698,
  701,
  702,
  704,
  707,
  709,
  710,
  712,
  711,
  713,
  s,
  [717, 4, 1],
  722,
  721,
  726,
  727,
  729,
  182,
  184,
  s,
  [730, 4, 1],
  452,
  s,
  [734, 4, 1],
  456,
  457,
  738,
  739,
  740,
  743,
  741,
  747,
  c,
  [117, 4],
  750,
  754,
  756,
  757,
  759,
  758,
  760,
  s,
  [764, 4, 1],
  769,
  768,
  773,
  774,
  776,
  182,
  184,
  s,
  [777, 4, 1],
  488,
  s,
  [781, 4, 1],
  492,
  493,
  785,
  786,
  787,
  790,
  788,
  794,
  c,
  [39, 4],
  797,
  801,
  803,
  804,
  805,
  c,
  [270, 5],
  806,
  c,
  [270, 6],
  807,
  182,
  184,
  808,
  809,
  812,
  810,
  816,
  c,
  [29, 4],
  818,
  819,
  820,
  526,
  824,
  823,
  825,
  828,
  827,
  829,
  832,
  831,
  833,
  835,
  259,
  836,
  837,
  839,
  838,
  841,
  842,
  c,
  [6, 12],
  843,
  c,
  [272, 10],
  c,
  [427, 12],
  803,
  846,
  847,
  850,
  856,
  849,
  848,
  854,
  862,
  853,
  858,
  857,
  870,
  875,
  873,
  879,
  880,
  855,
  863,
  874,
  861,
  860,
  871,
  878,
  883,
  886,
  892,
  885,
  884,
  890,
  898,
  889,
  894,
  893,
  906,
  911,
  909,
  915,
  916,
  891,
  899,
  910,
  897,
  896,
  907,
  914,
  920,
  c,
  [107, 4],
  922,
  923,
  924,
  586,
  928,
  927,
  929,
  932,
  931,
  933,
  936,
  935,
  937,
  939,
  321,
  940,
  941,
  943,
  942,
  945,
  946,
  c,
  [6, 12],
  947,
  c,
  [107, 22],
  950,
  951,
  952,
  955,
  961,
  954,
  953,
  959,
  967,
  958,
  963,
  962,
  975,
  980,
  978,
  984,
  985,
  960,
  968,
  979,
  966,
  965,
  976,
  983,
  988,
  991,
  997,
  990,
  989,
  995,
  1003,
  994,
  999,
  998,
  1011,
  1016,
  1014,
  1020,
  1021,
  996,
  1004,
  1015,
  1002,
  1001,
  1012,
  1019,
  1024,
  52,
  1025,
  1027,
  1031,
  1030,
  1032,
  1036,
  1035,
  1026,
  1029,
  1050,
  52,
  1051,
  1053,
  1057,
  1056,
  1058,
  1062,
  1061,
  1052,
  1055,
  1076,
  52,
  1077,
  1079,
  1083,
  1082,
  1084,
  1088,
  1087,
  1078,
  1081,
  1103,
  1104,
  c,
  [99, 6],
  1105,
  1106,
  1107,
  c,
  [6, 3],
  1108,
  c,
  [4, 3],
  1109,
  1110,
  1113,
  1116,
  1117,
  1119,
  1118,
  1120,
  1121,
  1122,
  370,
  1123,
  s,
  [1124, 4, 2],
  1133,
  1138,
  1137,
  1139,
  1143,
  1142,
  1132,
  1136,
  s,
  [1157, 5, 1],
  401,
  s,
  [1162, 5, 1],
  1169,
  1167,
  c,
  [194, 4],
  1174,
  1175,
  1176,
  727,
  1180,
  1179,
  1181,
  1184,
  1183,
  1185,
  1187,
  452,
  1188,
  1189,
  1191,
  1190,
  1193,
  1194,
  c,
  [6, 12],
  1196,
  1195,
  1197,
  c,
  [183, 12],
  1200,
  c,
  [206, 10],
  1202,
  1203,
  1204,
  1207,
  1205,
  c,
  [65, 4],
  1212,
  1213,
  1214,
  774,
  1218,
  1217,
  1219,
  1222,
  1221,
  1223,
  1225,
  488,
  1226,
  1227,
  1229,
  1228,
  1231,
  1232,
  c,
  [6, 12],
  1234,
  1233,
  1235,
  c,
  [65, 12],
  1238,
  c,
  [65, 10],
  828,
  1241,
  829,
  1242,
  c,
  [14, 11],
  1243,
  829,
  1244,
  526,
  1245,
  1247,
  627,
  630,
  1248,
  1250,
  627,
  630,
  1251,
  1253,
  627,
  630,
  1255,
  1259,
  1262,
  1263,
  1265,
  1268,
  1270,
  1271,
  1273,
  1272,
  1274,
  s,
  [1278, 4, 1],
  1283,
  1282,
  1287,
  1288,
  1290,
  182,
  184,
  s,
  [1291, 4, 1],
  875,
  s,
  [1295, 4, 1],
  879,
  880,
  1299,
  1300,
  1301,
  1304,
  1302,
  1308,
  c,
  [130, 4],
  1311,
  1315,
  1317,
  1318,
  1320,
  1319,
  1321,
  s,
  [1325, 4, 1],
  1330,
  1329,
  1334,
  1335,
  1337,
  182,
  184,
  s,
  [1338, 4, 1],
  911,
  s,
  [1342, 4, 1],
  915,
  916,
  1346,
  1347,
  1348,
  1351,
  1349,
  1355,
  c,
  [39, 4],
  1358,
  1362,
  932,
  1364,
  933,
  1365,
  c,
  [115, 10],
  932,
  1366,
  933,
  1367,
  586,
  1368,
  1370,
  627,
  630,
  1371,
  1373,
  627,
  630,
  1374,
  1376,
  627,
  630,
  1378,
  1382,
  1385,
  1386,
  1388,
  1391,
  1393,
  1394,
  1396,
  1395,
  1397,
  s,
  [1401, 4, 1],
  1406,
  1405,
  1410,
  1411,
  1413,
  182,
  184,
  s,
  [1414, 4, 1],
  980,
  s,
  [1418, 4, 1],
  984,
  985,
  1422,
  1423,
  1424,
  1427,
  1425,
  1431,
  c,
  [76, 4],
  1434,
  1438,
  1440,
  1441,
  1443,
  1442,
  1444,
  s,
  [1448, 4, 1],
  1453,
  1452,
  1457,
  1458,
  1460,
  182,
  184,
  s,
  [1461, 4, 1],
  1016,
  s,
  [1465, 4, 1],
  1020,
  1021,
  1469,
  1470,
  1471,
  1474,
  1472,
  1478,
  c,
  [39, 4],
  1481,
  1485,
  1487,
  1491,
  1490,
  1493,
  1497,
  1496,
  1499,
  1503,
  1502,
  1505,
  1506,
  1508,
  1511,
  1512,
  1513,
  1515,
  1514,
  1518,
  1517,
  1520,
  1524,
  1521,
  1525,
  1527,
  1526,
  1528,
  660,
  1530,
  1531,
  1534,
  1532,
  1132,
  1136,
  c,
  [409, 6],
  1538,
  1540,
  1541,
  1543,
  1542,
  s,
  [1545, 4, 1],
  1551,
  1557,
  1550,
  1549,
  1555,
  1563,
  1554,
  1559,
  1558,
  1571,
  1576,
  1574,
  1580,
  1581,
  1556,
  1564,
  1575,
  1562,
  1561,
  1572,
  1579,
  1184,
  1584,
  1185,
  1585,
  c,
  [184, 10],
  1184,
  1586,
  1185,
  1587,
  727,
  1588,
  1590,
  627,
  630,
  1591,
  1593,
  627,
  630,
  1595,
  1599,
  1601,
  1603,
  627,
  630,
  1605,
  1606,
  1608,
  1222,
  1611,
  1223,
  1612,
  c,
  [36, 10],
  1222,
  1613,
  1223,
  1614,
  774,
  1615,
  1617,
  627,
  630,
  1618,
  1620,
  627,
  630,
  1622,
  1626,
  1628,
  1630,
  627,
  630,
  1632,
  1633,
  1635,
  1639,
  52,
  1640,
  1642,
  1646,
  1645,
  1647,
  1651,
  1650,
  1641,
  1644,
  1665,
  52,
  1666,
  1668,
  1672,
  1671,
  1673,
  1677,
  1676,
  1667,
  1670,
  1691,
  52,
  1692,
  1694,
  1698,
  1697,
  1699,
  1703,
  1702,
  1693,
  1696,
  s,
  [1718, 5, 1],
  1725,
  1723,
  c,
  [187, 4],
  1730,
  1731,
  1732,
  1288,
  1736,
  1735,
  1737,
  1740,
  1739,
  1741,
  1743,
  875,
  1744,
  1745,
  1747,
  1746,
  1749,
  1750,
  c,
  [6, 12],
  1752,
  1751,
  1753,
  c,
  [471, 12],
  1756,
  c,
  [122, 10],
  1758,
  1759,
  1760,
  1763,
  1761,
  c,
  [65, 4],
  1768,
  1769,
  1770,
  1335,
  1774,
  1773,
  1775,
  1778,
  1777,
  1779,
  1781,
  911,
  1782,
  1783,
  1785,
  1784,
  1787,
  1788,
  c,
  [6, 12],
  1790,
  1789,
  1791,
  c,
  [65, 12],
  1794,
  c,
  [65, 10],
  1797,
  52,
  1798,
  1800,
  1804,
  1803,
  1805,
  1809,
  1808,
  1799,
  1802,
  1823,
  52,
  1824,
  1826,
  1830,
  1829,
  1831,
  1835,
  1834,
  1825,
  1828,
  1849,
  52,
  1850,
  1852,
  1856,
  1855,
  1857,
  1861,
  1860,
  1851,
  1854,
  s,
  [1876, 5, 1],
  1883,
  1881,
  c,
  [100, 4],
  1888,
  1889,
  1890,
  1411,
  1894,
  1893,
  1895,
  1898,
  1897,
  1899,
  1901,
  980,
  1902,
  1903,
  1905,
  1904,
  1907,
  1908,
  c,
  [6, 12],
  1910,
  1909,
  1911,
  c,
  [100, 12],
  1914,
  c,
  [100, 10],
  1916,
  1917,
  1918,
  1921,
  1919,
  c,
  [65, 4],
  1926,
  1927,
  1928,
  1458,
  1932,
  1931,
  1933,
  1936,
  1935,
  1937,
  1939,
  1016,
  1940,
  1941,
  1943,
  1942,
  1945,
  1946,
  c,
  [6, 12],
  1948,
  1947,
  1949,
  c,
  [65, 12],
  1952,
  c,
  [65, 10],
  1954,
  1955,
  1029,
  1956,
  1957,
  1055,
  1958,
  1959,
  1081,
  1960,
  1961,
  1966,
  1967,
  1968,
  1971,
  1981,
  1970,
  1979,
  1969,
  1975,
  1974,
  1985,
  1993,
  1988,
  1997,
  1998,
  1980,
  1989,
  1978,
  1977,
  1986,
  1996,
  2001,
  1961,
  2002,
  2003,
  c,
  [892, 6],
  2004,
  2005,
  2006,
  c,
  [6, 3],
  2007,
  c,
  [4, 3],
  2008,
  1110,
  1113,
  2009,
  c,
  [915, 9],
  2010,
  2011,
  1136,
  2012,
  2013,
  2015,
  2014,
  2016,
  s,
  [2020, 4, 1],
  2025,
  2024,
  2029,
  2030,
  2032,
  182,
  184,
  s,
  [2033, 4, 1],
  1576,
  s,
  [2037, 4, 1],
  1580,
  1581,
  2041,
  2042,
  2043,
  2046,
  2044,
  2050,
  c,
  [161, 4],
  2053,
  2057,
  2060,
  52,
  2061,
  2063,
  2067,
  2066,
  2068,
  2072,
  2071,
  2062,
  2065,
  2086,
  52,
  2087,
  2089,
  2093,
  2092,
  2094,
  2098,
  2097,
  2088,
  2091,
  2113,
  52,
  2114,
  2116,
  2120,
  2119,
  2121,
  2125,
  2124,
  2115,
  2118,
  2140,
  52,
  2141,
  2143,
  2147,
  2146,
  2148,
  2152,
  2151,
  2142,
  2145,
  2166,
  52,
  2167,
  2169,
  2173,
  2172,
  2174,
  2178,
  2177,
  2168,
  2171,
  2193,
  52,
  2194,
  2196,
  2200,
  2199,
  2201,
  2205,
  2204,
  2195,
  2198,
  2219,
  2223,
  2222,
  2225,
  2229,
  2228,
  2231,
  2235,
  2234,
  2237,
  2238,
  2240,
  2243,
  2246,
  2252,
  2245,
  2244,
  2250,
  2258,
  2249,
  2254,
  2253,
  2266,
  2271,
  2269,
  2275,
  2276,
  2251,
  2259,
  2270,
  2257,
  2256,
  2267,
  2274,
  1740,
  2279,
  1741,
  2280,
  c,
  [221, 10],
  1740,
  2281,
  1741,
  2282,
  1288,
  2283,
  2285,
  627,
  630,
  2286,
  2288,
  627,
  630,
  2290,
  2294,
  2296,
  2298,
  627,
  630,
  2300,
  2301,
  2303,
  1778,
  2306,
  1779,
  2307,
  c,
  [36, 10],
  1778,
  2308,
  1779,
  2309,
  1335,
  2310,
  2312,
  627,
  630,
  2313,
  2315,
  627,
  630,
  2317,
  2321,
  2323,
  2325,
  627,
  630,
  2327,
  2328,
  2330,
  2333,
  2337,
  2336,
  2339,
  2343,
  2342,
  2345,
  2349,
  2348,
  2351,
  2352,
  2354,
  2357,
  2360,
  2366,
  2359,
  2358,
  2364,
  2372,
  2363,
  2368,
  2367,
  2380,
  2385,
  2383,
  2389,
  2390,
  2365,
  2373,
  2384,
  2371,
  2370,
  2381,
  2388,
  1898,
  2393,
  1899,
  2394,
  c,
  [70, 10],
  1898,
  2395,
  1899,
  2396,
  1411,
  2397,
  2399,
  627,
  630,
  2400,
  2402,
  627,
  630,
  2404,
  2408,
  2410,
  2412,
  627,
  630,
  2414,
  2415,
  2417,
  1936,
  2420,
  1937,
  2421,
  c,
  [36, 10],
  1936,
  2422,
  1937,
  2423,
  1458,
  2424,
  2426,
  627,
  630,
  2427,
  2429,
  627,
  630,
  2431,
  2435,
  2437,
  2439,
  627,
  630,
  2441,
  2442,
  2444,
  2447,
  2448,
  2450,
  2452,
  2453,
  2455,
  2454,
  2456,
  2460,
  2461,
  2463,
  2462,
  2467,
  2468,
  2470,
  182,
  184,
  2471,
  2472,
  1993,
  s,
  [2473, 4, 1],
  1997,
  1998,
  2477,
  c,
  [311, 4],
  2479,
  2480,
  2483,
  2481,
  2488,
  2492,
  s,
  [2494, 4, 1],
  2499,
  2498,
  2501,
  2502,
  2503,
  2506,
  2504,
  c,
  [21, 4],
  2511,
  2512,
  2513,
  2030,
  2517,
  2516,
  2518,
  2521,
  2520,
  2522,
  2524,
  1576,
  2525,
  2526,
  2528,
  2527,
  2530,
  2531,
  c,
  [6, 12],
  2533,
  2532,
  2534,
  c,
  [493, 12],
  2537,
  c,
  [130, 10],
  2539,
  2543,
  2542,
  2545,
  2549,
  2548,
  2551,
  2552,
  2554,
  2557,
  2561,
  2560,
  2563,
  2567,
  2566,
  2569,
  2573,
  2572,
  2575,
  2576,
  2578,
  2581,
  2585,
  2584,
  2587,
  2588,
  1644,
  2589,
  2590,
  1670,
  2591,
  2592,
  1696,
  2593,
  2594,
  2596,
  2595,
  2597,
  s,
  [2601, 4, 1],
  2606,
  2605,
  2610,
  2611,
  2613,
  182,
  184,
  s,
  [2614, 4, 1],
  2271,
  s,
  [2618, 4, 1],
  2275,
  2276,
  2622,
  2623,
  2624,
  2627,
  2625,
  2631,
  c,
  [126, 4],
  2634,
  2638,
  2641,
  52,
  2642,
  2644,
  2648,
  2647,
  2649,
  2653,
  2652,
  2643,
  2646,
  2667,
  52,
  2668,
  2670,
  2674,
  2673,
  2675,
  2679,
  2678,
  2669,
  2672,
  2694,
  52,
  2695,
  2697,
  2701,
  2700,
  2702,
  2706,
  2705,
  2696,
  2699,
  2721,
  52,
  2722,
  2724,
  2728,
  2727,
  2729,
  2733,
  2732,
  2723,
  2726,
  2747,
  52,
  2748,
  2750,
  2754,
  2753,
  2755,
  2759,
  2758,
  2749,
  2752,
  2774,
  52,
  2775,
  2777,
  2781,
  2780,
  2782,
  2786,
  2785,
  2776,
  2779,
  2800,
  2801,
  1802,
  2802,
  2803,
  1828,
  2804,
  2805,
  1854,
  2806,
  2807,
  2809,
  2808,
  2810,
  s,
  [2814, 4, 1],
  2819,
  2818,
  2823,
  2824,
  2826,
  182,
  184,
  s,
  [2827, 4, 1],
  2385,
  s,
  [2831, 4, 1],
  2389,
  2390,
  2835,
  2836,
  2837,
  2840,
  2838,
  2844,
  c,
  [114, 4],
  2847,
  2851,
  2854,
  52,
  2855,
  2857,
  2861,
  2860,
  2862,
  2866,
  2865,
  2856,
  2859,
  2880,
  52,
  2881,
  2883,
  2887,
  2886,
  2888,
  2892,
  2891,
  2882,
  2885,
  2907,
  52,
  2908,
  2910,
  2914,
  2913,
  2915,
  2919,
  2918,
  2909,
  2912,
  2934,
  52,
  2935,
  2937,
  2941,
  2940,
  2942,
  2946,
  2945,
  2936,
  2939,
  2960,
  52,
  2961,
  2963,
  2967,
  2966,
  2968,
  2972,
  2971,
  2962,
  2965,
  2987,
  52,
  2988,
  2990,
  2994,
  2993,
  2995,
  2999,
  2998,
  2989,
  2992,
  3014,
  s,
  [3013, 4, 2],
  3018,
  3021,
  3020,
  c,
  [80, 4],
  3023,
  3024,
  3027,
  3025,
  3031,
  3032,
  2468,
  3035,
  1993,
  3036,
  3037,
  3039,
  3038,
  3041,
  3042,
  c,
  [6, 12],
  c,
  [314, 12],
  3044,
  c,
  [314, 10],
  3014,
  3046,
  3015,
  3047,
  3048,
  3053,
  3054,
  3055,
  3058,
  3068,
  3057,
  3066,
  3056,
  3062,
  3061,
  3072,
  3080,
  3075,
  3084,
  3085,
  3067,
  3076,
  3065,
  3064,
  3073,
  3083,
  3088,
  3048,
  2521,
  3089,
  2522,
  3090,
  c,
  [42, 10],
  2521,
  3091,
  2522,
  3092,
  2030,
  3093,
  3095,
  627,
  630,
  3096,
  3098,
  627,
  630,
  3100,
  3104,
  3106,
  3108,
  627,
  630,
  3110,
  3111,
  3113,
  3116,
  3117,
  2065,
  3118,
  3119,
  2091,
  3120,
  3121,
  2118,
  3122,
  3123,
  2145,
  3124,
  3125,
  2171,
  3126,
  3127,
  2198,
  3128,
  3129,
  3130,
  3133,
  3131,
  c,
  [141, 4],
  3138,
  3139,
  3140,
  2611,
  3144,
  3143,
  3145,
  3148,
  3147,
  3149,
  3151,
  2271,
  3152,
  3153,
  3155,
  3154,
  3157,
  3158,
  c,
  [6, 12],
  3160,
  3159,
  3161,
  c,
  [147, 12],
  3164,
  c,
  [105, 10],
  3166,
  3170,
  3169,
  3172,
  3176,
  3175,
  3178,
  3179,
  3181,
  3184,
  3188,
  3187,
  3190,
  3194,
  3193,
  3196,
  3200,
  3199,
  3202,
  3203,
  3205,
  3208,
  3212,
  3211,
  3214,
  3215,
  3216,
  3219,
  3217,
  c,
  [89, 4],
  3224,
  3225,
  3226,
  2824,
  3230,
  3229,
  3231,
  3234,
  3233,
  3235,
  3237,
  2385,
  3238,
  3239,
  3241,
  3240,
  3243,
  3244,
  c,
  [6, 12],
  3246,
  3245,
  3247,
  c,
  [89, 12],
  3250,
  c,
  [89, 10],
  3252,
  3256,
  3255,
  3258,
  3262,
  3261,
  3264,
  3265,
  3267,
  3270,
  3274,
  3273,
  3276,
  3280,
  3279,
  3282,
  3286,
  3285,
  3288,
  3289,
  3291,
  3294,
  3298,
  3297,
  3300,
  3302,
  627,
  630,
  3303,
  3304,
  3307,
  3317,
  3306,
  3315,
  3305,
  3311,
  3310,
  3321,
  3329,
  3324,
  3333,
  3334,
  3316,
  3325,
  3314,
  3313,
  3322,
  3332,
  3337,
  3340,
  3350,
  3339,
  3348,
  3338,
  3344,
  3343,
  3354,
  3362,
  3357,
  3366,
  3367,
  3349,
  3358,
  3347,
  3346,
  3355,
  3365,
  3370,
  c,
  [78, 10],
  3371,
  2468,
  3373,
  3377,
  3380,
  3381,
  3383,
  3386,
  3387,
  3389,
  3391,
  3392,
  3394,
  3393,
  3395,
  3399,
  3400,
  3402,
  3401,
  3406,
  3407,
  3409,
  182,
  184,
  3410,
  3411,
  3080,
  s,
  [3412, 4, 1],
  3084,
  3085,
  3416,
  c,
  [172, 4],
  3418,
  3419,
  3422,
  3420,
  3427,
  3431,
  3433,
  3435,
  52,
  3436,
  3438,
  3442,
  3441,
  3443,
  3447,
  3446,
  3437,
  3440,
  3461,
  52,
  3462,
  3464,
  3468,
  3467,
  3469,
  3473,
  3472,
  3463,
  3466,
  3488,
  52,
  3489,
  3491,
  3495,
  3494,
  3496,
  3500,
  3499,
  3490,
  3493,
  3148,
  3514,
  3149,
  3515,
  c,
  [92, 10],
  3148,
  3516,
  3149,
  3517,
  2611,
  3518,
  3520,
  627,
  630,
  3521,
  3523,
  627,
  630,
  3525,
  3529,
  3531,
  3533,
  627,
  630,
  3535,
  3536,
  3538,
  3541,
  3542,
  2646,
  3543,
  3544,
  2672,
  3545,
  3546,
  2699,
  3547,
  3548,
  2726,
  3549,
  3550,
  2752,
  3551,
  3552,
  2779,
  3234,
  3553,
  3235,
  3554,
  c,
  [54, 10],
  3234,
  3555,
  3235,
  3556,
  2824,
  3557,
  3559,
  627,
  630,
  3560,
  3562,
  627,
  630,
  3564,
  3568,
  3570,
  3572,
  627,
  630,
  3574,
  3575,
  3577,
  3580,
  3581,
  2859,
  3582,
  3583,
  2885,
  3584,
  3585,
  2912,
  3586,
  3587,
  2939,
  3588,
  3589,
  2965,
  3590,
  3591,
  2992,
  3592,
  52,
  3593,
  3595,
  3599,
  3598,
  3600,
  3604,
  3603,
  3594,
  3597,
  3618,
  3620,
  3621,
  3623,
  3622,
  3624,
  3628,
  3629,
  3631,
  3630,
  3635,
  3636,
  3638,
  182,
  184,
  3639,
  3640,
  3329,
  s,
  [3641, 4, 1],
  3333,
  3334,
  3645,
  c,
  [188, 4],
  3647,
  3648,
  3651,
  3649,
  3656,
  3660,
  3662,
  3663,
  3665,
  3664,
  3666,
  3670,
  3671,
  3673,
  3672,
  3677,
  3678,
  3680,
  182,
  184,
  3681,
  3682,
  3362,
  s,
  [3683, 4, 1],
  3366,
  3367,
  3687,
  c,
  [34, 4],
  3689,
  3690,
  3693,
  3691,
  3698,
  3702,
  3707,
  s,
  [3706, 4, 2],
  3711,
  3714,
  3713,
  c,
  [18, 4],
  3716,
  3717,
  3720,
  3718,
  3724,
  3725,
  3407,
  3728,
  3080,
  3729,
  3730,
  3732,
  3731,
  3734,
  3735,
  c,
  [6, 12],
  c,
  [406, 12],
  3737,
  c,
  [182, 10],
  3707,
  3739,
  3708,
  3740,
  3744,
  3743,
  3746,
  3750,
  3749,
  3752,
  3753,
  3755,
  3758,
  3762,
  3761,
  3765,
  52,
  3766,
  3768,
  3772,
  3771,
  3773,
  3777,
  3776,
  3767,
  3770,
  3791,
  52,
  3792,
  3794,
  3798,
  3797,
  3799,
  3803,
  3802,
  3793,
  3796,
  3818,
  52,
  3819,
  3821,
  3825,
  3824,
  3826,
  3830,
  3829,
  3820,
  3823,
  3845,
  52,
  3846,
  3848,
  3852,
  3851,
  3853,
  3857,
  3856,
  3847,
  3850,
  3871,
  52,
  3872,
  3874,
  3878,
  3877,
  3879,
  3883,
  3882,
  3873,
  3876,
  3898,
  52,
  3899,
  3901,
  3905,
  3904,
  3906,
  3910,
  3909,
  3900,
  3903,
  3924,
  3928,
  3927,
  3931,
  3930,
  c,
  [140, 4],
  3933,
  3934,
  3937,
  3935,
  3941,
  3942,
  3636,
  3945,
  3329,
  3946,
  3947,
  3949,
  3948,
  3951,
  3952,
  c,
  [6, 12],
  c,
  [140, 12],
  3954,
  c,
  [140, 10],
  c,
  [54, 4],
  3957,
  3958,
  3961,
  3959,
  3965,
  3966,
  3678,
  3969,
  3362,
  3970,
  3971,
  3973,
  3972,
  3975,
  3976,
  c,
  [6, 12],
  c,
  [54, 12],
  3978,
  c,
  [54, 10],
  3980,
  3981,
  3983,
  3986,
  3988,
  627,
  630,
  3989,
  3990,
  3993,
  4003,
  3992,
  4001,
  3991,
  3997,
  3996,
  4007,
  4015,
  4010,
  4019,
  4020,
  4002,
  4011,
  4000,
  3999,
  4008,
  4018,
  4023,
  4026,
  4036,
  4025,
  4034,
  4024,
  4030,
  4029,
  4040,
  4048,
  4043,
  4052,
  4053,
  4035,
  4044,
  4033,
  4032,
  4041,
  4051,
  4056,
  c,
  [57, 10],
  4057,
  3407,
  4059,
  4063,
  4066,
  4067,
  4069,
  4072,
  4073,
  3440,
  4074,
  4075,
  3466,
  4076,
  4077,
  3493,
  4078,
  4082,
  4081,
  4084,
  4088,
  4087,
  4090,
  4091,
  4093,
  4096,
  4100,
  4099,
  4102,
  4106,
  4105,
  4108,
  4112,
  4111,
  4114,
  4115,
  4117,
  4120,
  4124,
  4123,
  4126,
  4127,
  3597,
  4128,
  4131,
  4141,
  4130,
  4139,
  4129,
  4135,
  4134,
  4145,
  4153,
  4148,
  4157,
  4158,
  4140,
  4149,
  4138,
  4137,
  4146,
  4156,
  4161,
  c,
  [73, 10],
  4162,
  3636,
  4164,
  4168,
  4171,
  4172,
  4174,
  4177,
  c,
  [18, 10],
  4178,
  3678,
  4180,
  4184,
  4187,
  4188,
  4190,
  4193,
  52,
  4194,
  4196,
  4200,
  4199,
  4201,
  4205,
  4204,
  4195,
  4198,
  4219,
  4221,
  4222,
  4224,
  4223,
  4225,
  4229,
  4230,
  4232,
  4231,
  4236,
  4237,
  4239,
  182,
  184,
  4240,
  4241,
  4015,
  s,
  [4242, 4, 1],
  4019,
  4020,
  4246,
  c,
  [245, 4],
  4248,
  4249,
  4252,
  4250,
  4257,
  4261,
  4263,
  4264,
  4266,
  4265,
  4267,
  4271,
  4272,
  4274,
  4273,
  4278,
  4279,
  4281,
  182,
  184,
  4282,
  4283,
  4048,
  s,
  [4284, 4, 1],
  4052,
  4053,
  4288,
  c,
  [34, 4],
  4290,
  4291,
  4294,
  4292,
  4299,
  4303,
  4307,
  4308,
  3770,
  4309,
  4310,
  3796,
  4311,
  4312,
  3823,
  4313,
  4314,
  3850,
  4315,
  4316,
  3876,
  4317,
  4318,
  3903,
  4319,
  4320,
  4322,
  4321,
  4323,
  4327,
  4328,
  4330,
  4329,
  4334,
  4335,
  4337,
  182,
  184,
  4338,
  4339,
  4153,
  s,
  [4340, 4, 1],
  4157,
  4158,
  4344,
  c,
  [52, 4],
  4346,
  4347,
  4350,
  4348,
  4355,
  4359,
  4365,
  4369,
  4368,
  4372,
  4371,
  c,
  [15, 4],
  4374,
  4375,
  4378,
  4376,
  4382,
  4383,
  4237,
  4386,
  4015,
  4387,
  4388,
  4390,
  4389,
  4392,
  4393,
  c,
  [6, 12],
  c,
  [346, 12],
  4395,
  c,
  [400, 14],
  4398,
  4399,
  4402,
  4400,
  4406,
  4407,
  4279,
  4410,
  4048,
  4411,
  4412,
  4414,
  4413,
  4416,
  4417,
  c,
  [6, 12],
  c,
  [54, 12],
  4419,
  c,
  [54, 10],
  4421,
  4422,
  4424,
  c,
  [57, 4],
  4428,
  4429,
  4432,
  4430,
  4436,
  4437,
  4335,
  4440,
  4153,
  4441,
  4442,
  4444,
  4443,
  4446,
  4447,
  c,
  [6, 12],
  c,
  [57, 12],
  4449,
  c,
  [57, 10],
  4451,
  4452,
  4454,
  4457,
  4458,
  4460,
  4463,
  4464,
  4198,
  4465,
  4468,
  4478,
  4467,
  4476,
  4466,
  4472,
  4471,
  4482,
  4490,
  4485,
  4494,
  4495,
  4477,
  4486,
  4475,
  4474,
  4483,
  4493,
  4498,
  c,
  [39, 10],
  4499,
  4237,
  4501,
  4505,
  4508,
  4509,
  4511,
  4514,
  c,
  [18, 10],
  4515,
  4279,
  4517,
  4521,
  4524,
  4525,
  4527,
  4530,
  c,
  [18, 10],
  4531,
  4335,
  4533,
  4537,
  4540,
  4541,
  4543,
  4546,
  4547,
  4549,
  4548,
  4550,
  4554,
  4555,
  4557,
  4556,
  4561,
  4562,
  4564,
  182,
  184,
  4565,
  4566,
  4490,
  s,
  [4567, 4, 1],
  4494,
  4495,
  4571,
  c,
  [160, 4],
  4573,
  4574,
  4577,
  4575,
  4582,
  4586,
  c,
  [10, 4],
  4595,
  4596,
  4599,
  4597,
  4603,
  4604,
  4562,
  4607,
  4490,
  4608,
  4609,
  4611,
  4610,
  4613,
  4614,
  c,
  [6, 12],
  c,
  [170, 12],
  4616,
  c,
  [95, 10],
  4618,
  4619,
  4621,
  4624,
  4625,
  4627,
  4630,
  4631,
  4633,
  4636,
  c,
  [20, 10],
  4637,
  4562,
  4639,
  4643,
  4646,
  4647,
  4649,
  4654,
  4655,
  4657
]),
  mode: u([
  2,
  s,
  [1, 15],
  2,
  1,
  s,
  [2, 8],
  c,
  [9, 3],
  c,
  [12, 6],
  c,
  [23, 5],
  s,
  [2, 17],
  c,
  [44, 5],
  c,
  [56, 11],
  c,
  [54, 10],
  c,
  [44, 20],
  c,
  [24, 3],
  s,
  [1, 16],
  c,
  [44, 6],
  c,
  [99, 8],
  c,
  [97, 21],
  c,
  [46, 17],
  c,
  [141, 29],
  c,
  [98, 17],
  c,
  [54, 10],
  c,
  [99, 8],
  c,
  [59, 11],
  c,
  [71, 16],
  c,
  [200, 11],
  c,
  [106, 9],
  s,
  [2, 33],
  c,
  [142, 20],
  c,
  [72, 9],
  c,
  [139, 16],
  c,
  [119, 9],
  c,
  [15, 12],
  c,
  [56, 11],
  c,
  [11, 21],
  c,
  [116, 19],
  c,
  [137, 23],
  c,
  [386, 84],
  c,
  [155, 22],
  c,
  [326, 65],
  c,
  [566, 17],
  c,
  [276, 9],
  c,
  [643, 7],
  c,
  [170, 57],
  c,
  [295, 24],
  c,
  [277, 20],
  c,
  [52, 19],
  c,
  [463, 25],
  c,
  [26, 17],
  c,
  [23, 38],
  c,
  [847, 7],
  s,
  [1, 29],
  c,
  [879, 11],
  c,
  [710, 27],
  c,
  [28, 56],
  c,
  [766, 230],
  c,
  [11, 15],
  c,
  [1222, 11],
  c,
  [54, 19],
  c,
  [233, 9],
  c,
  [414, 9],
  c,
  [260, 15],
  c,
  [258, 36],
  c,
  [1268, 13],
  c,
  [1338, 7],
  c,
  [1353, 15],
  c,
  [1360, 9],
  c,
  [923, 30],
  c,
  [29, 33],
  c,
  [25, 16],
  c,
  [1447, 14],
  c,
  [16, 18],
  c,
  [1344, 22],
  c,
  [378, 11],
  c,
  [544, 11],
  c,
  [4, 7],
  c,
  [237, 6],
  c,
  [70, 6],
  c,
  [354, 32],
  c,
  [833, 29],
  c,
  [370, 25],
  c,
  [1088, 77],
  c,
  [648, 58],
  c,
  [316, 18],
  c,
  [128, 115],
  c,
  [1365, 114],
  c,
  [1310, 178],
  c,
  [1302, 69],
  c,
  [752, 11],
  c,
  [261, 14],
  c,
  [128, 8],
  c,
  [698, 21],
  c,
  [986, 17],
  c,
  [177, 10],
  c,
  [15, 27],
  c,
  [205, 29],
  c,
  [1751, 23],
  c,
  [197, 40],
  s,
  [1, 52],
  c,
  [145, 5],
  c,
  [1242, 9],
  c,
  [1301, 13],
  c,
  [171, 11],
  c,
  [22, 13],
  c,
  [1016, 59],
  c,
  [450, 26],
  c,
  [2224, 25],
  c,
  [685, 74],
  c,
  [665, 81],
  c,
  [128, 18],
  c,
  [225, 22],
  c,
  [500, 17],
  c,
  [206, 198],
  c,
  [1870, 53],
  c,
  [1705, 72],
  c,
  [1580, 274],
  c,
  [411, 10],
  c,
  [403, 10],
  c,
  [1347, 10],
  c,
  [347, 14],
  c,
  [180, 15],
  c,
  [486, 34],
  c,
  [2293, 78],
  c,
  [127, 10],
  c,
  [96, 90],
  c,
  [66, 17],
  c,
  [1253, 12],
  c,
  [570, 12],
  c,
  [891, 22],
  c,
  [1178, 33],
  c,
  [2346, 20],
  c,
  [127, 16],
  c,
  [197, 22],
  c,
  [22, 44],
  c,
  [819, 24],
  c,
  [1413, 62],
  c,
  [3079, 32],
  c,
  [979, 85],
  c,
  [813, 21],
  c,
  [32, 15],
  c,
  [128, 128],
  s,
  [1, 59],
  c,
  [1736, 442],
  c,
  [500, 100],
  c,
  [2652, 34],
  c,
  [2640, 55],
  c,
  [707, 30],
  c,
  [436, 23],
  c,
  [142, 145],
  c,
  [4254, 35],
  c,
  [3877, 9],
  c,
  [2735, 43],
  c,
  [1946, 131],
  s,
  [1, 120],
  c,
  [1789, 64],
  c,
  [1574, 286],
  c,
  [129, 15],
  c,
  [135, 8],
  c,
  [283, 14],
  c,
  [326, 35],
  c,
  [2484, 48],
  c,
  [158, 20],
  c,
  [2564, 60],
  c,
  [80, 32],
  c,
  [3839, 19],
  c,
  [349, 15],
  c,
  [291, 22],
  c,
  [851, 65],
  c,
  [4730, 10],
  c,
  [1396, 54],
  c,
  [1691, 200],
  c,
  [967, 40],
  c,
  [98, 20],
  c,
  [246, 21],
  c,
  [66, 51],
  c,
  [3300, 135],
  c,
  [1361, 128],
  c,
  [3248, 97],
  c,
  [1575, 121],
  c,
  [5753, 59],
  c,
  [880, 25],
  c,
  [978, 21],
  c,
  [844, 37],
  c,
  [22, 34],
  c,
  [821, 30],
  c,
  [1275, 13],
  c,
  [2137, 42],
  c,
  [3194, 154],
  c,
  [1227, 339],
  c,
  [2820, 134],
  c,
  [2118, 24],
  c,
  [72, 14],
  c,
  [166, 13],
  c,
  [42, 31],
  c,
  [1984, 13],
  c,
  [7176, 54],
  c,
  [762, 18],
  c,
  [884, 18],
  c,
  [2075, 23],
  c,
  [16, 14],
  c,
  [2075, 114],
  c,
  [2863, 69],
  c,
  [1023, 136],
  c,
  [2511, 80],
  c,
  [263, 46],
  c,
  [2537, 131],
  c,
  [128, 129],
  c,
  [1821, 218],
  c,
  [1355, 75],
  c,
  [2224, 125],
  c,
  [375, 169],
  c,
  [147, 150],
  c,
  [1582, 103],
  c,
  [4246, 51],
  c,
  [2052, 35],
  c,
  [1844, 33],
  c,
  [3965, 31],
  c,
  [1768, 38],
  c,
  [224, 47],
  c,
  [4128, 21],
  c,
  [1814, 127],
  c,
  [1942, 149],
  c,
  [1500, 129],
  c,
  [1101, 337],
  c,
  [150, 160],
  c,
  [1034, 100],
  c,
  [38, 39],
  c,
  [913, 142],
  c,
  [729, 149],
  c,
  [1400, 41]
]),
  goto: u([
  10,
  24,
  11,
  25,
  12,
  29,
  13,
  19,
  28,
  27,
  30,
  32,
  33,
  35,
  38,
  37,
  21,
  24,
  s,
  [21, 8],
  40,
  57,
  57,
  49,
  s,
  [57, 5],
  43,
  45,
  47,
  48,
  s,
  [57, 18],
  51,
  54,
  53,
  9,
  63,
  25,
  64,
  29,
  65,
  66,
  28,
  27,
  c,
  [56, 3],
  s,
  [57, 8],
  72,
  s,
  [57, 20],
  77,
  78,
  135,
  94,
  135,
  98,
  106,
  84,
  89,
  90,
  91,
  97,
  102,
  103,
  104,
  s,
  [107, 6, 1],
  135,
  135,
  105,
  135,
  58,
  58,
  116,
  s,
  [58, 5],
  114,
  115,
  s,
  [58, 18],
  122,
  123,
  127,
  131,
  130,
  129,
  134,
  133,
  135,
  136,
  138,
  141,
  140,
  142,
  c,
  [141, 8],
  145,
  147,
  c,
  [141, 20],
  155,
  156,
  161,
  c,
  [98, 5],
  159,
  160,
  c,
  [100, 18],
  s,
  [32, 7],
  122,
  123,
  32,
  32,
  65,
  116,
  135,
  135,
  s,
  [65, 8],
  114,
  115,
  c,
  [12, 4],
  135,
  s,
  [67, 9],
  175,
  176,
  177,
  180,
  c,
  [56, 3],
  67,
  67,
  c,
  [106, 8],
  183,
  c,
  [105, 20],
  s,
  [103, 15],
  c,
  [106, 4],
  c,
  [10, 7],
  s,
  [97, 9],
  c,
  [122, 6],
  s,
  [97, 3],
  194,
  202,
  198,
  200,
  201,
  204,
  206,
  207,
  208,
  s,
  [210, 5, 1],
  c,
  [135, 11],
  219,
  223,
  222,
  221,
  s,
  [35, 7],
  122,
  35,
  35,
  s,
  [43, 8],
  123,
  43,
  43,
  c,
  [325, 29],
  c,
  [29, 29],
  c,
  [291, 3],
  c,
  [32, 29],
  240,
  241,
  135,
  257,
  135,
  261,
  266,
  247,
  252,
  253,
  254,
  260,
  c,
  [286, 11],
  265,
  c,
  [386, 3],
  270,
  s,
  [58, 5],
  268,
  269,
  s,
  [58, 18],
  276,
  277,
  s,
  [20, 7],
  122,
  20,
  20,
  s,
  [49, 8],
  123,
  49,
  49,
  c,
  [326, 66],
  286,
  290,
  289,
  288,
  292,
  c,
  [286, 4],
  s,
  [103, 10],
  c,
  [54, 4],
  s,
  [103, 3],
  296,
  297,
  302,
  303,
  135,
  319,
  135,
  323,
  328,
  309,
  314,
  315,
  316,
  322,
  c,
  [170, 11],
  327,
  c,
  [170, 3],
  332,
  s,
  [58, 5],
  330,
  331,
  s,
  [58, 18],
  338,
  339,
  s,
  [223, 17],
  343,
  s,
  [223, 13],
  347,
  s,
  [223, 19],
  351,
  223,
  223,
  s,
  [102, 15],
  c,
  [463, 4],
  s,
  [102, 6],
  s,
  [94, 10],
  357,
  c,
  [133, 9],
  s,
  [94, 3],
  s,
  [95, 10],
  c,
  [23, 10],
  s,
  [95, 3],
  s,
  [96, 10],
  c,
  [23, 10],
  s,
  [96, 3],
  163,
  137,
  372,
  163,
  371,
  s,
  [163, 4],
  377,
  381,
  380,
  379,
  385,
  386,
  389,
  388,
  395,
  399,
  390,
  400,
  406,
  409,
  410,
  411,
  398,
  412,
  413,
  s,
  [418, 4, 1],
  s,
  [414, 4, 1],
  405,
  422,
  s,
  [36, 7],
  122,
  36,
  36,
  428,
  429,
  443,
  135,
  449,
  135,
  454,
  459,
  441,
  442,
  436,
  444,
  445,
  446,
  453,
  c,
  [254, 11],
  458,
  135,
  464,
  465,
  479,
  135,
  485,
  135,
  490,
  495,
  477,
  478,
  472,
  480,
  481,
  482,
  489,
  c,
  [28, 11],
  494,
  135,
  502,
  503,
  508,
  c,
  [478, 5],
  506,
  507,
  c,
  [480, 18],
  s,
  [32, 7],
  276,
  277,
  c,
  [766, 3],
  270,
  c,
  [440, 10],
  268,
  269,
  c,
  [440, 14],
  522,
  523,
  524,
  527,
  c,
  [766, 49],
  c,
  [106, 4],
  c,
  [766, 25],
  538,
  c,
  [480, 4],
  540,
  542,
  543,
  544,
  c,
  [766, 4],
  546,
  c,
  [135, 11],
  551,
  555,
  554,
  553,
  s,
  [35, 7],
  276,
  c,
  [766, 10],
  277,
  c,
  [766, 60],
  564,
  c,
  [489, 13],
  c,
  [375, 9],
  c,
  [22, 13],
  s,
  [102, 10],
  c,
  [619, 4],
  s,
  [102, 3],
  32,
  338,
  339,
  65,
  332,
  c,
  [262, 4],
  330,
  331,
  s,
  [135, 3],
  s,
  [67, 3],
  582,
  583,
  584,
  587,
  c,
  [27, 3],
  c,
  [258, 38],
  c,
  [668, 4],
  c,
  [250, 8],
  c,
  [244, 7],
  598,
  c,
  [242, 4],
  600,
  602,
  603,
  604,
  c,
  [242, 4],
  606,
  c,
  [95, 3],
  611,
  615,
  614,
  613,
  35,
  338,
  43,
  43,
  339,
  c,
  [218, 58],
  s,
  [222, 4],
  625,
  s,
  [222, 15],
  628,
  629,
  632,
  631,
  222,
  634,
  c,
  [16, 15],
  637,
  s,
  [222, 17],
  c,
  [23, 4],
  639,
  641,
  642,
  643,
  c,
  [142, 4],
  645,
  646,
  143,
  649,
  152,
  152,
  652,
  653,
  659,
  661,
  s,
  [171, 4],
  665,
  669,
  668,
  667,
  673,
  677,
  676,
  675,
  261,
  261,
  377,
  381,
  261,
  261,
  380,
  379,
  261,
  139,
  139,
  c,
  [670, 3],
  139,
  139,
  388,
  139,
  687,
  s,
  [198, 3],
  690,
  s,
  [198, 17],
  s,
  [207, 3],
  693,
  s,
  [207, 17],
  s,
  [215, 3],
  696,
  s,
  [215, 17],
  696,
  s,
  [244, 9],
  700,
  s,
  [244, 12],
  703,
  706,
  705,
  s,
  [49, 8],
  708,
  c,
  [1088, 3],
  716,
  c,
  [648, 10],
  714,
  715,
  c,
  [648, 14],
  723,
  724,
  725,
  728,
  c,
  [648, 49],
  c,
  [810, 4],
  c,
  [648, 25],
  742,
  746,
  745,
  744,
  748,
  c,
  [410, 4],
  749,
  751,
  752,
  753,
  c,
  [268, 4],
  755,
  65,
  763,
  c,
  [128, 10],
  761,
  762,
  c,
  [128, 14],
  770,
  771,
  772,
  775,
  c,
  [128, 49],
  c,
  [910, 4],
  c,
  [128, 25],
  789,
  793,
  792,
  791,
  795,
  c,
  [128, 4],
  796,
  798,
  799,
  800,
  c,
  [128, 4],
  802,
  s,
  [20, 7],
  276,
  c,
  [1365, 10],
  277,
  c,
  [277, 3],
  c,
  [925, 65],
  811,
  815,
  814,
  813,
  817,
  c,
  [1365, 14],
  c,
  [54, 4],
  s,
  [103, 3],
  821,
  822,
  s,
  [223, 17],
  826,
  s,
  [223, 13],
  830,
  s,
  [223, 19],
  834,
  c,
  [1310, 17],
  c,
  [1007, 4],
  c,
  [1310, 16],
  840,
  c,
  [1310, 22],
  c,
  [23, 10],
  c,
  [1310, 13],
  c,
  [23, 10],
  c,
  [1310, 12],
  395,
  399,
  844,
  c,
  [1302, 17],
  845,
  s,
  [36, 7],
  276,
  36,
  36,
  851,
  852,
  866,
  135,
  872,
  135,
  877,
  882,
  864,
  865,
  859,
  867,
  868,
  869,
  876,
  c,
  [1246, 11],
  881,
  135,
  887,
  888,
  902,
  135,
  908,
  135,
  913,
  918,
  900,
  901,
  895,
  903,
  904,
  905,
  912,
  c,
  [28, 11],
  917,
  135,
  919,
  921,
  c,
  [269, 8],
  c,
  [982, 4],
  103,
  925,
  926,
  s,
  [223, 11],
  930,
  s,
  [223, 5],
  934,
  s,
  [223, 11],
  938,
  s,
  [102, 9],
  c,
  [986, 4],
  c,
  [229, 8],
  944,
  c,
  [223, 10],
  s,
  [95, 4],
  c,
  [15, 10],
  c,
  [213, 5],
  c,
  [15, 10],
  c,
  [205, 12],
  948,
  c,
  [205, 17],
  949,
  36,
  338,
  956,
  957,
  971,
  135,
  977,
  135,
  982,
  987,
  969,
  970,
  964,
  972,
  973,
  974,
  981,
  c,
  [169, 11],
  986,
  135,
  992,
  993,
  1007,
  135,
  1013,
  135,
  1018,
  1023,
  1005,
  1006,
  1000,
  1008,
  1009,
  1010,
  1017,
  c,
  [28, 11],
  1022,
  135,
  c,
  [2406, 3],
  1028,
  1034,
  s,
  [1037, 5, 1],
  s,
  [1046, 4, 1],
  s,
  [1042, 4, 1],
  1033,
  c,
  [19, 3],
  1054,
  1060,
  s,
  [1063, 5, 1],
  s,
  [1072, 4, 1],
  s,
  [1068, 4, 1],
  1059,
  c,
  [19, 3],
  1080,
  1086,
  s,
  [1089, 5, 1],
  s,
  [1098, 4, 1],
  s,
  [1094, 4, 1],
  1085,
  1102,
  145,
  649,
  163,
  c,
  [147, 7],
  c,
  [1017, 4],
  163,
  153,
  153,
  c,
  [14, 7],
  163,
  154,
  154,
  c,
  [10, 7],
  1111,
  1112,
  1115,
  1114,
  c,
  [36, 3],
  1125,
  s,
  [163, 4],
  s,
  [191, 3],
  1127,
  s,
  [191, 17],
  s,
  [192, 3],
  1129,
  s,
  [192, 17],
  s,
  [193, 3],
  1131,
  s,
  [193, 17],
  1135,
  1141,
  1144,
  1145,
  1146,
  1134,
  1147,
  1148,
  s,
  [1153, 4, 1],
  s,
  [1149, 4, 1],
  1140,
  400,
  406,
  405,
  c,
  [1240, 29],
  1168,
  1172,
  1171,
  1170,
  1173,
  c,
  [685, 14],
  c,
  [1016, 4],
  s,
  [103, 3],
  1177,
  1178,
  s,
  [223, 17],
  1182,
  s,
  [223, 13],
  1186,
  c,
  [665, 17],
  c,
  [1024, 4],
  c,
  [665, 16],
  1192,
  c,
  [665, 22],
  c,
  [23, 10],
  c,
  [665, 13],
  c,
  [23, 10],
  s,
  [96, 3],
  s,
  [223, 17],
  1198,
  223,
  223,
  395,
  399,
  1199,
  c,
  [471, 17],
  c,
  [500, 9],
  1201,
  1206,
  1210,
  1209,
  1208,
  1211,
  c,
  [206, 14],
  c,
  [1094, 4],
  s,
  [103, 3],
  1215,
  1216,
  s,
  [223, 17],
  1220,
  s,
  [223, 13],
  1224,
  c,
  [206, 17],
  c,
  [1102, 4],
  c,
  [206, 16],
  1230,
  c,
  [206, 22],
  c,
  [23, 10],
  c,
  [206, 13],
  c,
  [23, 10],
  c,
  [206, 20],
  1236,
  c,
  [206, 4],
  1237,
  c,
  [206, 26],
  1239,
  1240,
  c,
  [1049, 13],
  c,
  [1870, 19],
  c,
  [22, 3],
  s,
  [102, 10],
  c,
  [1124, 4],
  s,
  [102, 3],
  s,
  [222, 4],
  1246,
  c,
  [1705, 20],
  1249,
  c,
  [16, 15],
  1252,
  c,
  [1705, 21],
  1254,
  1256,
  1257,
  1258,
  c,
  [1309, 4],
  1260,
  1261,
  1264,
  1267,
  1266,
  s,
  [49, 8],
  1269,
  c,
  [1303, 3],
  1277,
  c,
  [1303, 10],
  1275,
  1276,
  c,
  [1303, 14],
  1284,
  1285,
  1286,
  1289,
  c,
  [1452, 49],
  c,
  [1088, 4],
  c,
  [1452, 25],
  1303,
  1307,
  1306,
  1305,
  1309,
  c,
  [456, 4],
  1310,
  1312,
  1313,
  1314,
  c,
  [143, 4],
  1316,
  65,
  1324,
  c,
  [128, 10],
  1322,
  1323,
  c,
  [128, 14],
  1331,
  1332,
  1333,
  1336,
  c,
  [128, 49],
  c,
  [1188, 4],
  c,
  [128, 25],
  1350,
  1354,
  1353,
  1352,
  1356,
  c,
  [128, 4],
  1357,
  1359,
  1360,
  1361,
  c,
  [128, 4],
  1363,
  c,
  [1191, 5],
  c,
  [387, 13],
  934,
  s,
  [102, 4],
  c,
  [1234, 4],
  c,
  [371, 5],
  1369,
  c,
  [347, 12],
  1372,
  c,
  [8, 7],
  1375,
  c,
  [347, 13],
  1377,
  1379,
  1380,
  1381,
  c,
  [76, 4],
  1383,
  1384,
  1387,
  1390,
  1389,
  49,
  49,
  1392,
  65,
  1400,
  c,
  [199, 4],
  1398,
  1399,
  c,
  [2293, 6],
  1407,
  1408,
  1409,
  1412,
  c,
  [2293, 41],
  c,
  [1208, 4],
  c,
  [2293, 15],
  1426,
  1430,
  1429,
  1428,
  1432,
  c,
  [179, 4],
  1433,
  1435,
  1436,
  1437,
  c,
  [103, 4],
  1439,
  65,
  1447,
  c,
  [96, 4],
  1445,
  1446,
  c,
  [96, 6],
  1454,
  1455,
  1456,
  1459,
  c,
  [96, 41],
  c,
  [1276, 4],
  c,
  [96, 15],
  1473,
  1477,
  1476,
  1475,
  1479,
  c,
  [96, 4],
  1480,
  1482,
  1483,
  1484,
  c,
  [96, 4],
  1486,
  1489,
  1488,
  s,
  [244, 15],
  1492,
  s,
  [244, 6],
  1495,
  1494,
  s,
  [244, 10],
  1498,
  s,
  [244, 3],
  1501,
  1500,
  s,
  [244, 17],
  1504,
  s,
  [244, 3],
  1507,
  1510,
  1509,
  c,
  [1178, 29],
  1516,
  143,
  1519,
  152,
  152,
  1522,
  1523,
  1529,
  c,
  [2346, 5],
  1533,
  1537,
  1536,
  1535,
  1135,
  1141,
  1140,
  s,
  [1144, 5, 1],
  c,
  [1244, 8],
  1134,
  s,
  [201, 3],
  1539,
  s,
  [201, 21],
  c,
  [22, 41],
  s,
  [244, 10],
  1544,
  s,
  [244, 12],
  s,
  [197, 3],
  1127,
  s,
  [197, 17],
  s,
  [206, 3],
  1129,
  s,
  [206, 17],
  s,
  [214, 3],
  1131,
  s,
  [214, 17],
  1552,
  1553,
  1567,
  135,
  1573,
  135,
  1578,
  1583,
  1565,
  1566,
  1560,
  1568,
  1569,
  1570,
  1577,
  c,
  [1608, 11],
  1582,
  135,
  c,
  [1343, 13],
  c,
  [979, 19],
  c,
  [1365, 13],
  c,
  [1418, 4],
  c,
  [979, 7],
  1589,
  c,
  [979, 20],
  1592,
  c,
  [16, 14],
  1594,
  1596,
  1597,
  1598,
  c,
  [410, 4],
  1600,
  222,
  1602,
  c,
  [988, 21],
  1604,
  1607,
  1610,
  1609,
  c,
  [1265, 13],
  c,
  [128, 19],
  c,
  [1287, 13],
  c,
  [1340, 4],
  c,
  [128, 7],
  1616,
  c,
  [128, 20],
  1619,
  c,
  [16, 14],
  1621,
  1623,
  1624,
  1625,
  c,
  [128, 4],
  1627,
  222,
  1629,
  c,
  [128, 21],
  1631,
  1634,
  1637,
  1636,
  1638,
  c,
  [1827, 3],
  1643,
  1649,
  s,
  [1652, 5, 1],
  s,
  [1661, 4, 1],
  s,
  [1657, 4, 1],
  1648,
  c,
  [19, 3],
  1669,
  1675,
  s,
  [1678, 5, 1],
  s,
  [1687, 4, 1],
  s,
  [1683, 4, 1],
  1674,
  c,
  [19, 3],
  1695,
  1701,
  s,
  [1704, 5, 1],
  s,
  [1713, 4, 1],
  s,
  [1709, 4, 1],
  1700,
  1717,
  c,
  [558, 29],
  1724,
  1728,
  1727,
  1726,
  1729,
  c,
  [1530, 14],
  c,
  [1172, 4],
  s,
  [103, 3],
  1733,
  1734,
  s,
  [223, 17],
  1738,
  s,
  [223, 13],
  1742,
  c,
  [1530, 17],
  c,
  [1180, 4],
  c,
  [1530, 16],
  1748,
  c,
  [1530, 22],
  c,
  [23, 10],
  c,
  [1530, 13],
  c,
  [23, 10],
  c,
  [1530, 20],
  1754,
  c,
  [1530, 4],
  1755,
  c,
  [1530, 26],
  1757,
  1762,
  1766,
  1765,
  1764,
  1767,
  c,
  [206, 14],
  c,
  [1250, 4],
  s,
  [103, 3],
  1771,
  1772,
  s,
  [223, 17],
  1776,
  s,
  [223, 13],
  1780,
  c,
  [206, 17],
  c,
  [1258, 4],
  c,
  [206, 16],
  1786,
  c,
  [206, 22],
  c,
  [23, 10],
  c,
  [206, 13],
  c,
  [23, 10],
  c,
  [206, 20],
  1792,
  c,
  [206, 4],
  1793,
  c,
  [206, 26],
  1795,
  1796,
  c,
  [462, 3],
  1801,
  1807,
  s,
  [1810, 5, 1],
  s,
  [1819, 4, 1],
  s,
  [1815, 4, 1],
  1806,
  c,
  [19, 3],
  1827,
  1833,
  s,
  [1836, 5, 1],
  s,
  [1845, 4, 1],
  s,
  [1841, 4, 1],
  1832,
  c,
  [19, 3],
  1853,
  1859,
  s,
  [1862, 5, 1],
  s,
  [1871, 4, 1],
  s,
  [1867, 4, 1],
  1858,
  1875,
  c,
  [500, 29],
  1882,
  1886,
  1885,
  1884,
  1887,
  c,
  [294, 8],
  c,
  [1341, 4],
  103,
  1891,
  1892,
  s,
  [223, 11],
  1896,
  s,
  [223, 5],
  1900,
  s,
  [102, 9],
  c,
  [1333, 4],
  c,
  [262, 8],
  1906,
  c,
  [2640, 14],
  c,
  [15, 10],
  c,
  [246, 5],
  c,
  [15, 10],
  c,
  [238, 12],
  1912,
  395,
  399,
  1913,
  c,
  [230, 26],
  1915,
  1920,
  1924,
  1923,
  1922,
  1925,
  c,
  [142, 8],
  c,
  [1387, 4],
  103,
  1929,
  1930,
  s,
  [223, 11],
  1934,
  s,
  [223, 5],
  1938,
  s,
  [102, 9],
  c,
  [1379, 4],
  c,
  [142, 8],
  1944,
  c,
  [142, 14],
  c,
  [15, 10],
  c,
  [142, 5],
  c,
  [15, 10],
  c,
  [142, 12],
  1950,
  395,
  399,
  1951,
  c,
  [142, 26],
  1953,
  1028,
  1034,
  1033,
  1054,
  1060,
  1059,
  1080,
  1086,
  1085,
  s,
  [168, 4],
  1962,
  1963,
  1964,
  168,
  1965,
  168,
  1972,
  1973,
  1992,
  135,
  1987,
  135,
  1995,
  2000,
  1990,
  1991,
  1976,
  1982,
  1983,
  1984,
  1994,
  c,
  [1175, 11],
  1999,
  135,
  c,
  [38, 10],
  145,
  1519,
  c,
  [2699, 8],
  c,
  [1406, 4],
  c,
  [2735, 5],
  c,
  [14, 5],
  c,
  [2735, 5],
  c,
  [10, 5],
  c,
  [2735, 12],
  c,
  [1428, 3],
  65,
  2019,
  c,
  [1946, 10],
  2017,
  2018,
  c,
  [1946, 14],
  2026,
  2027,
  2028,
  2031,
  c,
  [1946, 49],
  c,
  [1329, 4],
  c,
  [1946, 25],
  2045,
  2049,
  2048,
  2047,
  2051,
  c,
  [358, 4],
  2052,
  2054,
  2055,
  2056,
  c,
  [1133, 4],
  2058,
  2059,
  c,
  [568, 3],
  2064,
  2070,
  s,
  [2073, 5, 1],
  s,
  [2082, 4, 1],
  s,
  [2078, 4, 1],
  2069,
  c,
  [19, 3],
  2090,
  2096,
  s,
  [2099, 5, 1],
  s,
  [2108, 4, 1],
  s,
  [2104, 4, 1],
  2095,
  2112,
  c,
  [20, 3],
  2117,
  2123,
  s,
  [2126, 5, 1],
  s,
  [2135, 4, 1],
  s,
  [2131, 4, 1],
  2122,
  2139,
  c,
  [20, 3],
  2144,
  2150,
  s,
  [2153, 5, 1],
  s,
  [2162, 4, 1],
  s,
  [2158, 4, 1],
  2149,
  c,
  [19, 3],
  2170,
  2176,
  s,
  [2179, 5, 1],
  s,
  [2188, 4, 1],
  s,
  [2184, 4, 1],
  2175,
  2192,
  c,
  [20, 3],
  2197,
  2203,
  s,
  [2206, 5, 1],
  s,
  [2215, 4, 1],
  s,
  [2211, 4, 1],
  2202,
  2221,
  2220,
  s,
  [244, 15],
  2224,
  s,
  [244, 6],
  2227,
  2226,
  s,
  [244, 10],
  2230,
  s,
  [244, 3],
  2233,
  2232,
  s,
  [244, 17],
  2236,
  s,
  [244, 3],
  2239,
  2242,
  2241,
  2247,
  2248,
  2262,
  135,
  2268,
  135,
  2273,
  2278,
  2260,
  2261,
  2255,
  2263,
  2264,
  2265,
  2272,
  c,
  [399, 11],
  2277,
  c,
  [1574, 11],
  c,
  [1181, 3],
  c,
  [1446, 19],
  c,
  [1203, 13],
  c,
  [1256, 4],
  c,
  [1446, 7],
  2284,
  c,
  [1446, 20],
  2287,
  c,
  [16, 14],
  2289,
  2291,
  2292,
  2293,
  c,
  [313, 4],
  2295,
  222,
  2297,
  c,
  [1446, 21],
  2299,
  2302,
  2305,
  2304,
  c,
  [1103, 13],
  c,
  [128, 19],
  c,
  [1125, 13],
  c,
  [1178, 4],
  c,
  [128, 7],
  2311,
  c,
  [128, 20],
  2314,
  c,
  [16, 14],
  2316,
  2318,
  2319,
  2320,
  c,
  [128, 4],
  2322,
  222,
  2324,
  c,
  [128, 21],
  2326,
  2329,
  2332,
  2331,
  2335,
  2334,
  s,
  [244, 9],
  2338,
  s,
  [244, 4],
  2341,
  2340,
  s,
  [244, 4],
  2344,
  244,
  2347,
  2346,
  s,
  [244, 11],
  2350,
  244,
  2353,
  2356,
  2355,
  2361,
  2362,
  2376,
  135,
  2382,
  135,
  2387,
  2392,
  2374,
  2375,
  2369,
  2377,
  2378,
  2379,
  2386,
  c,
  [326, 11],
  2391,
  c,
  [326, 5],
  1900,
  c,
  [190, 13],
  c,
  [1037, 5],
  c,
  [1066, 4],
  c,
  [174, 5],
  2398,
  c,
  [166, 12],
  2401,
  c,
  [8, 6],
  2403,
  2405,
  2406,
  2407,
  c,
  [158, 4],
  2409,
  222,
  2411,
  c,
  [150, 13],
  2413,
  2416,
  2419,
  2418,
  c,
  [961, 5],
  c,
  [80, 13],
  c,
  [975, 5],
  c,
  [1004, 4],
  c,
  [80, 5],
  2425,
  c,
  [80, 12],
  2428,
  c,
  [8, 6],
  2430,
  2432,
  2433,
  2434,
  c,
  [80, 4],
  2436,
  222,
  2438,
  c,
  [80, 13],
  2440,
  2443,
  2446,
  2445,
  s,
  [45, 8],
  2449,
  45,
  45,
  s,
  [52, 9],
  2451,
  52,
  52,
  2459,
  135,
  s,
  [79, 7],
  c,
  [8, 4],
  2457,
  2458,
  135,
  c,
  [7, 3],
  135,
  s,
  [81, 10],
  2464,
  2465,
  2466,
  2469,
  c,
  [113, 3],
  81,
  81,
  c,
  [851, 44],
  c,
  [1005, 4],
  c,
  [850, 23],
  2478,
  c,
  [845, 4],
  2482,
  2486,
  2485,
  2484,
  2487,
  2489,
  2490,
  2491,
  c,
  [170, 4],
  2493,
  c,
  [1396, 29],
  2500,
  2505,
  2509,
  2508,
  2507,
  2510,
  c,
  [1691, 14],
  c,
  [995, 4],
  s,
  [103, 3],
  2514,
  2515,
  s,
  [223, 17],
  2519,
  s,
  [223, 13],
  2523,
  c,
  [1691, 17],
  c,
  [1003, 4],
  c,
  [1691, 16],
  2529,
  c,
  [1691, 22],
  c,
  [23, 10],
  c,
  [1691, 13],
  c,
  [23, 10],
  c,
  [1691, 20],
  2535,
  c,
  [1691, 4],
  2536,
  c,
  [1319, 26],
  2538,
  2541,
  2540,
  s,
  [244, 15],
  2544,
  s,
  [244, 6],
  2547,
  2546,
  s,
  [244, 10],
  2550,
  s,
  [244, 3],
  2553,
  2556,
  2555,
  2559,
  2558,
  s,
  [244, 17],
  2562,
  s,
  [244, 3],
  2565,
  2564,
  s,
  [244, 15],
  2568,
  s,
  [244, 6],
  2571,
  2570,
  s,
  [244, 10],
  2574,
  s,
  [244, 3],
  2577,
  2580,
  2579,
  2583,
  2582,
  s,
  [244, 17],
  2586,
  s,
  [244, 3],
  1643,
  1649,
  1648,
  1669,
  1675,
  1674,
  1695,
  1701,
  1700,
  65,
  2600,
  c,
  [1354, 10],
  2598,
  2599,
  c,
  [1354, 14],
  2607,
  2608,
  2609,
  2612,
  c,
  [1354, 49],
  c,
  [1109, 4],
  c,
  [1354, 25],
  2626,
  2630,
  2629,
  2628,
  2632,
  c,
  [457, 4],
  2633,
  2635,
  2636,
  2637,
  c,
  [505, 4],
  2639,
  2640,
  c,
  [1256, 3],
  2645,
  2651,
  s,
  [2654, 5, 1],
  s,
  [2663, 4, 1],
  s,
  [2659, 4, 1],
  2650,
  c,
  [19, 3],
  2671,
  2677,
  s,
  [2680, 5, 1],
  s,
  [2689, 4, 1],
  s,
  [2685, 4, 1],
  2676,
  2693,
  c,
  [20, 3],
  2698,
  2704,
  s,
  [2707, 5, 1],
  s,
  [2716, 4, 1],
  s,
  [2712, 4, 1],
  2703,
  2720,
  c,
  [20, 3],
  2725,
  2731,
  s,
  [2734, 5, 1],
  s,
  [2743, 4, 1],
  s,
  [2739, 4, 1],
  2730,
  c,
  [19, 3],
  2751,
  2757,
  s,
  [2760, 5, 1],
  s,
  [2769, 4, 1],
  s,
  [2765, 4, 1],
  2756,
  2773,
  c,
  [20, 3],
  2778,
  2784,
  s,
  [2787, 5, 1],
  s,
  [2796, 4, 1],
  s,
  [2792, 4, 1],
  2783,
  1801,
  1807,
  1806,
  1827,
  1833,
  1832,
  1853,
  1859,
  1858,
  65,
  2813,
  c,
  [243, 4],
  2811,
  2812,
  c,
  [3248, 6],
  2820,
  2821,
  2822,
  2825,
  c,
  [3248, 41],
  c,
  [1016, 4],
  c,
  [3248, 15],
  2839,
  2843,
  2842,
  2841,
  2845,
  c,
  [223, 4],
  2846,
  2848,
  2849,
  2850,
  c,
  [223, 4],
  2852,
  2853,
  c,
  [125, 3],
  2858,
  2864,
  s,
  [2867, 5, 1],
  s,
  [2876, 4, 1],
  s,
  [2872, 4, 1],
  2863,
  c,
  [19, 3],
  2884,
  2890,
  s,
  [2893, 5, 1],
  s,
  [2902, 4, 1],
  s,
  [2898, 4, 1],
  2889,
  2906,
  c,
  [20, 3],
  2911,
  2917,
  s,
  [2920, 5, 1],
  s,
  [2929, 4, 1],
  s,
  [2925, 4, 1],
  2916,
  2933,
  c,
  [20, 3],
  2938,
  2944,
  s,
  [2947, 5, 1],
  s,
  [2956, 4, 1],
  s,
  [2952, 4, 1],
  2943,
  c,
  [19, 3],
  2964,
  2970,
  s,
  [2973, 5, 1],
  s,
  [2982, 4, 1],
  s,
  [2978, 4, 1],
  2969,
  2986,
  c,
  [20, 3],
  2991,
  2997,
  s,
  [3000, 5, 1],
  s,
  [3009, 4, 1],
  s,
  [3005, 4, 1],
  2996,
  s,
  [223, 5],
  3016,
  c,
  [5753, 58],
  3022,
  c,
  [196, 4],
  3026,
  3030,
  3029,
  3028,
  s,
  [103, 10],
  c,
  [1024, 4],
  103,
  103,
  3033,
  3034,
  s,
  [102, 15],
  c,
  [997, 4],
  c,
  [844, 15],
  3040,
  c,
  [844, 11],
  s,
  [95, 10],
  c,
  [22, 10],
  c,
  [842, 12],
  c,
  [22, 10],
  96,
  96,
  395,
  399,
  3043,
  c,
  [821, 26],
  3045,
  c,
  [211, 6],
  s,
  [168, 4],
  3049,
  3050,
  3051,
  168,
  3052,
  168,
  3059,
  3060,
  3079,
  135,
  3074,
  135,
  3082,
  3087,
  3077,
  3078,
  3063,
  3069,
  3070,
  3071,
  3081,
  c,
  [1412, 11],
  3086,
  c,
  [2137, 5],
  c,
  [38, 6],
  c,
  [1032, 13],
  c,
  [1620, 19],
  c,
  [1054, 13],
  c,
  [1107, 4],
  c,
  [1620, 7],
  3094,
  c,
  [1620, 20],
  3097,
  c,
  [16, 14],
  3099,
  3101,
  3102,
  3103,
  c,
  [484, 4],
  3105,
  222,
  3107,
  c,
  [1620, 21],
  3109,
  3112,
  3115,
  3114,
  2064,
  2070,
  2069,
  2090,
  2096,
  2095,
  2117,
  2123,
  2122,
  2144,
  2150,
  2149,
  2170,
  2176,
  2175,
  2197,
  2203,
  2202,
  3132,
  3136,
  3135,
  3134,
  3137,
  c,
  [1227, 14],
  c,
  [868, 4],
  s,
  [103, 3],
  3141,
  3142,
  s,
  [223, 17],
  3146,
  s,
  [223, 13],
  3150,
  c,
  [1227, 17],
  c,
  [876, 4],
  c,
  [1227, 16],
  3156,
  c,
  [1227, 22],
  c,
  [23, 10],
  c,
  [1227, 13],
  c,
  [23, 10],
  c,
  [1227, 20],
  3162,
  c,
  [1227, 4],
  3163,
  c,
  [406, 26],
  3165,
  3168,
  3167,
  s,
  [244, 15],
  3171,
  s,
  [244, 6],
  3174,
  3173,
  s,
  [244, 10],
  3177,
  s,
  [244, 3],
  3180,
  3183,
  3182,
  3186,
  3185,
  s,
  [244, 17],
  3189,
  s,
  [244, 3],
  3192,
  3191,
  s,
  [244, 15],
  3195,
  s,
  [244, 6],
  3198,
  3197,
  s,
  [244, 10],
  3201,
  s,
  [244, 3],
  3204,
  3207,
  3206,
  3210,
  3209,
  s,
  [244, 17],
  3213,
  s,
  [244, 3],
  3218,
  3222,
  3221,
  3220,
  3223,
  c,
  [338, 8],
  c,
  [959, 4],
  103,
  3227,
  3228,
  s,
  [223, 11],
  3232,
  s,
  [223, 5],
  3236,
  s,
  [102, 9],
  c,
  [951, 4],
  c,
  [306, 8],
  3242,
  c,
  [2820, 14],
  c,
  [15, 10],
  c,
  [290, 5],
  c,
  [15, 10],
  c,
  [282, 12],
  3248,
  395,
  399,
  3249,
  c,
  [274, 26],
  3251,
  3254,
  3253,
  s,
  [244, 9],
  3257,
  s,
  [244, 4],
  3260,
  3259,
  s,
  [244, 4],
  3263,
  244,
  3266,
  3269,
  3268,
  3272,
  3271,
  s,
  [244, 11],
  3275,
  244,
  3278,
  3277,
  s,
  [244, 9],
  3281,
  s,
  [244, 4],
  3284,
  3283,
  s,
  [244, 4],
  3287,
  244,
  3290,
  3293,
  3292,
  3296,
  3295,
  s,
  [244, 11],
  3299,
  244,
  s,
  [222, 4],
  3301,
  c,
  [595, 4],
  3308,
  3309,
  3328,
  135,
  3323,
  135,
  3331,
  3336,
  3326,
  3327,
  3312,
  3318,
  3319,
  3320,
  3330,
  c,
  [757, 11],
  3335,
  135,
  3341,
  3342,
  3361,
  135,
  3356,
  135,
  3364,
  3369,
  3359,
  3360,
  3345,
  3351,
  3352,
  3353,
  3363,
  c,
  [28, 11],
  3368,
  135,
  c,
  [159, 9],
  s,
  [102, 10],
  c,
  [976, 4],
  102,
  102,
  3372,
  3374,
  3375,
  3376,
  c,
  [708, 4],
  3378,
  3379,
  3382,
  3385,
  3384,
  s,
  [45, 8],
  3388,
  c,
  [2075, 11],
  3390,
  52,
  52,
  79,
  3398,
  c,
  [2076, 7],
  c,
  [7, 4],
  3396,
  3397,
  c,
  [2075, 15],
  3403,
  3404,
  3405,
  3408,
  c,
  [2075, 49],
  c,
  [943, 4],
  c,
  [1571, 23],
  3417,
  c,
  [458, 4],
  3421,
  3425,
  3424,
  3423,
  3426,
  3428,
  3429,
  3430,
  c,
  [155, 4],
  3432,
  3434,
  c,
  [1249, 3],
  3439,
  3445,
  s,
  [3448, 5, 1],
  s,
  [3457, 4, 1],
  s,
  [3453, 4, 1],
  3444,
  c,
  [19, 3],
  3465,
  3471,
  s,
  [3474, 5, 1],
  s,
  [3483, 4, 1],
  s,
  [3479, 4, 1],
  3470,
  3487,
  c,
  [20, 3],
  3492,
  3498,
  s,
  [3501, 5, 1],
  s,
  [3510, 4, 1],
  s,
  [3506, 4, 1],
  3497,
  c,
  [828, 13],
  c,
  [1023, 19],
  c,
  [850, 13],
  c,
  [903, 4],
  c,
  [1023, 7],
  3519,
  c,
  [1023, 20],
  3522,
  c,
  [16, 14],
  3524,
  3526,
  3527,
  3528,
  c,
  [160, 4],
  3530,
  222,
  3532,
  c,
  [1023, 21],
  3534,
  3537,
  3540,
  3539,
  2645,
  2651,
  2650,
  2671,
  2677,
  2676,
  2698,
  2704,
  2703,
  2725,
  2731,
  2730,
  2751,
  2757,
  2756,
  2778,
  2784,
  2783,
  c,
  [652, 5],
  c,
  [138, 13],
  c,
  [666, 5],
  c,
  [695, 4],
  c,
  [122, 5],
  3558,
  c,
  [114, 12],
  3561,
  c,
  [8, 6],
  3563,
  3565,
  3566,
  3567,
  c,
  [106, 4],
  3569,
  222,
  3571,
  c,
  [98, 13],
  3573,
  3576,
  3579,
  3578,
  2858,
  2864,
  2863,
  2884,
  2890,
  2889,
  2911,
  2917,
  2916,
  2938,
  2944,
  2943,
  2964,
  2970,
  2969,
  2991,
  2997,
  2996,
  c,
  [263, 3],
  3596,
  3602,
  s,
  [3605, 5, 1],
  s,
  [3614, 4, 1],
  s,
  [3610, 4, 1],
  3601,
  s,
  [52, 9],
  3619,
  52,
  52,
  3627,
  c,
  [2537, 12],
  3625,
  3626,
  c,
  [462, 15],
  3632,
  3633,
  3634,
  3637,
  c,
  [462, 49],
  c,
  [648, 4],
  c,
  [462, 23],
  3646,
  c,
  [462, 4],
  3650,
  3654,
  3653,
  3652,
  3655,
  3657,
  3658,
  3659,
  c,
  [196, 4],
  3661,
  3669,
  c,
  [128, 12],
  3667,
  3668,
  c,
  [128, 15],
  3674,
  3675,
  3676,
  3679,
  c,
  [128, 49],
  c,
  [748, 4],
  c,
  [128, 23],
  3688,
  c,
  [128, 4],
  3692,
  3696,
  3695,
  3694,
  3697,
  3699,
  3700,
  3701,
  c,
  [128, 4],
  3703,
  3704,
  3705,
  s,
  [223, 5],
  3709,
  c,
  [1821, 58],
  3715,
  c,
  [84, 4],
  3719,
  3723,
  3722,
  3721,
  s,
  [103, 10],
  c,
  [770, 4],
  103,
  103,
  3726,
  3727,
  s,
  [102, 15],
  c,
  [743, 4],
  c,
  [1438, 15],
  3733,
  c,
  [1821, 21],
  c,
  [22, 10],
  c,
  [1436, 12],
  c,
  [22, 10],
  c,
  [1821, 4],
  3736,
  c,
  [1141, 26],
  3738,
  c,
  [211, 6],
  3742,
  3741,
  s,
  [244, 15],
  3745,
  s,
  [244, 6],
  3748,
  3747,
  s,
  [244, 10],
  3751,
  s,
  [244, 3],
  3754,
  3757,
  3756,
  3760,
  3759,
  s,
  [244, 17],
  3763,
  s,
  [244, 3],
  3764,
  c,
  [573, 3],
  3769,
  3775,
  s,
  [3778, 5, 1],
  s,
  [3787, 4, 1],
  s,
  [3783, 4, 1],
  3774,
  c,
  [19, 3],
  3795,
  3801,
  s,
  [3804, 5, 1],
  s,
  [3813, 4, 1],
  s,
  [3809, 4, 1],
  3800,
  3817,
  c,
  [20, 3],
  3822,
  3828,
  s,
  [3831, 5, 1],
  s,
  [3840, 4, 1],
  s,
  [3836, 4, 1],
  3827,
  3844,
  c,
  [20, 3],
  3849,
  3855,
  s,
  [3858, 5, 1],
  s,
  [3867, 4, 1],
  s,
  [3863, 4, 1],
  3854,
  c,
  [19, 3],
  3875,
  3881,
  s,
  [3884, 5, 1],
  s,
  [3893, 4, 1],
  s,
  [3889, 4, 1],
  3880,
  3897,
  c,
  [20, 3],
  3902,
  3908,
  s,
  [3911, 5, 1],
  s,
  [3920, 4, 1],
  s,
  [3916, 4, 1],
  3907,
  3926,
  3925,
  s,
  [244, 5],
  3929,
  244,
  c,
  [375, 29],
  3932,
  c,
  [375, 4],
  3936,
  3940,
  3939,
  3938,
  s,
  [103, 10],
  c,
  [683, 4],
  103,
  103,
  3943,
  3944,
  s,
  [102, 15],
  c,
  [656, 4],
  c,
  [375, 15],
  3950,
  c,
  [375, 21],
  c,
  [22, 10],
  c,
  [375, 12],
  c,
  [22, 10],
  c,
  [375, 4],
  3953,
  c,
  [375, 26],
  3955,
  3956,
  c,
  [147, 4],
  3960,
  3964,
  3963,
  3962,
  s,
  [103, 10],
  c,
  [702, 4],
  103,
  103,
  3967,
  3968,
  s,
  [102, 15],
  c,
  [675, 4],
  c,
  [147, 15],
  3974,
  c,
  [147, 21],
  c,
  [22, 10],
  c,
  [147, 12],
  c,
  [22, 10],
  c,
  [147, 4],
  3977,
  c,
  [147, 26],
  3979,
  3982,
  3985,
  3984,
  s,
  [222, 4],
  3987,
  c,
  [1056, 4],
  3994,
  3995,
  4014,
  135,
  4009,
  135,
  4017,
  4022,
  4012,
  4013,
  3998,
  4004,
  4005,
  4006,
  4016,
  c,
  [1554, 11],
  4021,
  135,
  4027,
  4028,
  4047,
  135,
  4042,
  135,
  4050,
  4055,
  4045,
  4046,
  4031,
  4037,
  4038,
  4039,
  4049,
  c,
  [28, 11],
  4054,
  c,
  [1582, 20],
  c,
  [737, 4],
  102,
  102,
  4058,
  4060,
  4061,
  4062,
  c,
  [837, 4],
  4064,
  4065,
  4068,
  4071,
  4070,
  3439,
  3445,
  3444,
  3465,
  3471,
  3470,
  3492,
  3498,
  3497,
  4080,
  4079,
  s,
  [244, 15],
  4083,
  s,
  [244, 6],
  4086,
  4085,
  s,
  [244, 10],
  4089,
  s,
  [244, 3],
  4092,
  4095,
  4094,
  4098,
  4097,
  s,
  [244, 17],
  4101,
  s,
  [244, 3],
  4104,
  4103,
  s,
  [244, 9],
  4107,
  s,
  [244, 4],
  4110,
  4109,
  s,
  [244, 4],
  4113,
  244,
  4116,
  4119,
  4118,
  4122,
  4121,
  s,
  [244, 11],
  4125,
  244,
  3596,
  3602,
  3601,
  4132,
  4133,
  4152,
  135,
  4147,
  135,
  4155,
  4160,
  4150,
  4151,
  4136,
  4142,
  4143,
  4144,
  4154,
  c,
  [186, 11],
  4159,
  c,
  [186, 20],
  c,
  [548, 4],
  102,
  102,
  4163,
  4165,
  4166,
  4167,
  c,
  [186, 4],
  4169,
  4170,
  4173,
  4176,
  4175,
  c,
  [38, 19],
  c,
  [439, 4],
  102,
  102,
  4179,
  4181,
  4182,
  4183,
  c,
  [38, 4],
  4185,
  4186,
  4189,
  4192,
  4191,
  c,
  [681, 3],
  4197,
  4203,
  s,
  [4206, 5, 1],
  s,
  [4215, 4, 1],
  s,
  [4211, 4, 1],
  4202,
  s,
  [52, 9],
  4220,
  c,
  [1814, 3],
  4228,
  c,
  [1814, 11],
  4226,
  4227,
  c,
  [1224, 15],
  4233,
  4234,
  4235,
  4238,
  c,
  [1224, 49],
  c,
  [418, 4],
  c,
  [1224, 23],
  4247,
  c,
  [618, 4],
  4251,
  4255,
  4254,
  4253,
  4256,
  4258,
  4259,
  4260,
  c,
  [163, 4],
  4262,
  79,
  4270,
  c,
  [128, 11],
  4268,
  4269,
  c,
  [128, 15],
  4275,
  4276,
  4277,
  4280,
  c,
  [128, 49],
  c,
  [518, 4],
  c,
  [128, 23],
  4289,
  c,
  [128, 4],
  4293,
  4297,
  4296,
  4295,
  4298,
  4300,
  4301,
  4302,
  c,
  [128, 4],
  4304,
  4305,
  4306,
  3769,
  3775,
  3774,
  3795,
  3801,
  3800,
  3822,
  3828,
  3827,
  3849,
  3855,
  3854,
  3875,
  3881,
  3880,
  3902,
  3908,
  3907,
  4326,
  c,
  [1500, 12],
  4324,
  4325,
  c,
  [148, 15],
  4331,
  4332,
  4333,
  4336,
  c,
  [148, 49],
  c,
  [480, 4],
  c,
  [148, 23],
  4345,
  c,
  [148, 4],
  4349,
  4353,
  4352,
  4351,
  4354,
  4356,
  4357,
  4358,
  c,
  [148, 4],
  s,
  [4360, 5, 1],
  4367,
  4366,
  s,
  [244, 5],
  4370,
  c,
  [1101, 30],
  4373,
  c,
  [60, 4],
  4377,
  4381,
  4380,
  4379,
  s,
  [103, 10],
  c,
  [432, 4],
  103,
  103,
  4384,
  4385,
  s,
  [102, 15],
  c,
  [405, 4],
  c,
  [954, 15],
  4391,
  c,
  [954, 21],
  c,
  [22, 10],
  c,
  [954, 12],
  c,
  [22, 10],
  c,
  [954, 4],
  4394,
  c,
  [954, 26],
  4396,
  4397,
  c,
  [147, 4],
  4401,
  4405,
  4404,
  4403,
  s,
  [103, 10],
  c,
  [451, 4],
  103,
  103,
  4408,
  4409,
  s,
  [102, 15],
  c,
  [424, 4],
  c,
  [147, 15],
  4415,
  c,
  [147, 21],
  c,
  [22, 10],
  c,
  [147, 12],
  c,
  [22, 10],
  c,
  [147, 4],
  4418,
  c,
  [147, 26],
  4420,
  4423,
  4426,
  4425,
  4427,
  c,
  [150, 4],
  4431,
  4435,
  4434,
  4433,
  s,
  [103, 10],
  c,
  [453, 4],
  103,
  103,
  4438,
  4439,
  s,
  [102, 15],
  c,
  [426, 4],
  c,
  [150, 15],
  4445,
  c,
  [150, 21],
  c,
  [22, 10],
  c,
  [150, 12],
  c,
  [22, 10],
  c,
  [150, 4],
  4448,
  c,
  [150, 26],
  4450,
  4453,
  4456,
  4455,
  4459,
  4462,
  4461,
  4197,
  4203,
  4202,
  4469,
  4470,
  4489,
  135,
  4484,
  135,
  4492,
  4497,
  4487,
  4488,
  4473,
  4479,
  4480,
  4481,
  4491,
  c,
  [1034, 11],
  4496,
  c,
  [1034, 20],
  c,
  [481, 4],
  102,
  102,
  4500,
  4502,
  4503,
  4504,
  c,
  [557, 4],
  4506,
  4507,
  4510,
  4513,
  4512,
  c,
  [38, 19],
  c,
  [372, 4],
  102,
  102,
  4516,
  4518,
  4519,
  4520,
  c,
  [38, 4],
  4522,
  4523,
  4526,
  4529,
  4528,
  c,
  [38, 19],
  c,
  [260, 4],
  102,
  102,
  4532,
  4534,
  4535,
  4536,
  c,
  [38, 4],
  4538,
  4539,
  4542,
  4545,
  4544,
  79,
  4553,
  c,
  [913, 11],
  4551,
  4552,
  c,
  [765, 15],
  4558,
  4559,
  4560,
  4563,
  c,
  [765, 49],
  c,
  [211, 4],
  c,
  [765, 23],
  4572,
  c,
  [408, 4],
  4576,
  4580,
  4579,
  4578,
  4581,
  4583,
  4584,
  4585,
  c,
  [132, 4],
  s,
  [4587, 8, 1],
  c,
  [24, 4],
  4598,
  4602,
  4601,
  4600,
  s,
  [103, 10],
  c,
  [120, 4],
  103,
  103,
  4605,
  4606,
  s,
  [102, 15],
  c,
  [93, 4],
  c,
  [432, 15],
  4612,
  c,
  [432, 21],
  c,
  [22, 10],
  c,
  [432, 12],
  c,
  [22, 10],
  c,
  [432, 4],
  4615,
  c,
  [432, 26],
  4617,
  4620,
  4623,
  4622,
  4626,
  4629,
  4628,
  4632,
  4635,
  4634,
  c,
  [328, 19],
  c,
  [156, 4],
  102,
  102,
  4638,
  4640,
  4641,
  4642,
  c,
  [196, 4],
  4644,
  4645,
  4648,
  4651,
  4650,
  4652,
  4653,
  4656,
  4659,
  4658
])
}),
defaultActions: bda({
  idx: u([
  0,
  2,
  s,
  [5, 6, 1],
  s,
  [14, 4, 1],
  21,
  22,
  23,
  s,
  [25, 6, 1],
  32,
  s,
  [34, 6, 1],
  41,
  42,
  43,
  47,
  48,
  s,
  [51, 12, 1],
  68,
  69,
  70,
  72,
  75,
  s,
  [78, 5, 1],
  84,
  85,
  86,
  s,
  [89, 7, 1],
  97,
  98,
  99,
  s,
  [102, 11, 1],
  114,
  115,
  117,
  120,
  121,
  s,
  [124, 12, 1],
  s,
  [137, 5, 1],
  143,
  144,
  145,
  151,
  153,
  s,
  [156, 5, 1],
  s,
  [162, 7, 1],
  s,
  [170, 4, 1],
  s,
  [175, 4, 1],
  180,
  189,
  193,
  s,
  [195, 4, 1],
  201,
  202,
  s,
  [204, 5, 1],
  s,
  [210, 15, 1],
  226,
  227,
  228,
  230,
  232,
  233,
  234,
  238,
  s,
  [241, 5, 1],
  247,
  248,
  249,
  s,
  [252, 7, 1],
  260,
  261,
  262,
  265,
  266,
  268,
  269,
  271,
  274,
  275,
  s,
  [278, 4, 1],
  s,
  [283, 8, 1],
  295,
  296,
  297,
  300,
  s,
  [303, 5, 1],
  309,
  310,
  311,
  s,
  [314, 7, 1],
  322,
  323,
  324,
  327,
  328,
  330,
  331,
  333,
  336,
  337,
  340,
  341,
  344,
  345,
  348,
  349,
  s,
  [352, 4, 1],
  357,
  361,
  362,
  364,
  365,
  366,
  369,
  370,
  s,
  [374, 8, 1],
  s,
  [383, 12, 1],
  s,
  [400, 8, 1],
  s,
  [409, 13, 1],
  424,
  426,
  s,
  [429, 6, 1],
  436,
  437,
  438,
  440,
  441,
  442,
  s,
  [444, 7, 1],
  453,
  454,
  455,
  458,
  459,
  460,
  462,
  s,
  [465, 6, 1],
  472,
  473,
  474,
  476,
  477,
  478,
  s,
  [480, 7, 1],
  489,
  490,
  491,
  494,
  495,
  498,
  500,
  s,
  [503, 5, 1],
  s,
  [509, 7, 1],
  s,
  [517, 4, 1],
  s,
  [522, 4, 1],
  527,
  533,
  537,
  s,
  [540, 5, 1],
  s,
  [546, 11, 1],
  558,
  559,
  560,
  562,
  564,
  565,
  s,
  [567, 9, 1],
  s,
  [577, 4, 1],
  s,
  [582, 4, 1],
  587,
  593,
  597,
  s,
  [600, 5, 1],
  s,
  [606, 11, 1],
  618,
  619,
  620,
  622,
  624,
  s,
  [627, 7, 1],
  636,
  s,
  [639, 5, 1],
  645,
  646,
  648,
  650,
  s,
  [654, 4, 1],
  s,
  [660, 21, 1],
  684,
  685,
  686,
  s,
  [688, 12, 1],
  s,
  [701, 7, 1],
  s,
  [709, 7, 1],
  s,
  [718, 4, 1],
  s,
  [723, 4, 1],
  728,
  733,
  737,
  s,
  [739, 8, 1],
  s,
  [749, 5, 1],
  s,
  [755, 8, 1],
  s,
  [765, 4, 1],
  s,
  [770, 4, 1],
  775,
  780,
  784,
  s,
  [786, 8, 1],
  s,
  [796, 5, 1],
  s,
  [802, 5, 1],
  s,
  [808, 8, 1],
  s,
  [820, 5, 1],
  827,
  828,
  831,
  832,
  s,
  [835, 4, 1],
  840,
  844,
  847,
  849,
  s,
  [852, 6, 1],
  859,
  860,
  861,
  863,
  864,
  865,
  s,
  [867, 7, 1],
  876,
  877,
  878,
  881,
  882,
  883,
  885,
  s,
  [888, 6, 1],
  895,
  896,
  897,
  899,
  900,
  901,
  s,
  [903, 7, 1],
  912,
  913,
  914,
  917,
  918,
  919,
  s,
  [924, 5, 1],
  931,
  932,
  935,
  936,
  s,
  [939, 4, 1],
  944,
  s,
  [948, 4, 2],
  s,
  [957, 6, 1],
  964,
  965,
  966,
  968,
  969,
  970,
  s,
  [972, 7, 1],
  981,
  982,
  983,
  986,
  987,
  988,
  990,
  s,
  [993, 6, 1],
  1000,
  1001,
  1002,
  1004,
  1005,
  1006,
  s,
  [1008, 7, 1],
  1017,
  1018,
  1019,
  1022,
  1023,
  s,
  [1025, 11, 1],
  s,
  [1037, 13, 1],
  s,
  [1051, 11, 1],
  s,
  [1063, 13, 1],
  s,
  [1077, 11, 1],
  s,
  [1089, 13, 1],
  s,
  [1103, 6, 1],
  s,
  [1110, 6, 1],
  1117,
  1119,
  1120,
  1121,
  s,
  [1124, 4, 2],
  s,
  [1135, 8, 1],
  s,
  [1144, 13, 1],
  1160,
  1161,
  1162,
  s,
  [1165, 8, 1],
  s,
  [1176, 5, 1],
  1183,
  1184,
  s,
  [1187, 4, 1],
  1192,
  1195,
  1196,
  1199,
  s,
  [1203, 8, 1],
  s,
  [1214, 5, 1],
  1221,
  1222,
  s,
  [1225, 4, 1],
  1230,
  1233,
  1234,
  1237,
  1240,
  1241,
  1243,
  1244,
  s,
  [1245, 4, 3],
  s,
  [1255, 4, 1],
  s,
  [1260, 9, 1],
  s,
  [1270, 7, 1],
  s,
  [1279, 4, 1],
  s,
  [1284, 4, 1],
  1289,
  1294,
  1298,
  s,
  [1300, 8, 1],
  s,
  [1310, 5, 1],
  s,
  [1316, 8, 1],
  s,
  [1326, 4, 1],
  s,
  [1331, 4, 1],
  1336,
  1341,
  1345,
  s,
  [1347, 8, 1],
  s,
  [1357, 5, 1],
  1363,
  1364,
  1366,
  1367,
  s,
  [1368, 4, 3],
  s,
  [1378, 4, 1],
  s,
  [1383, 9, 1],
  s,
  [1393, 7, 1],
  s,
  [1402, 4, 1],
  s,
  [1407, 4, 1],
  1412,
  1417,
  1421,
  s,
  [1423, 8, 1],
  s,
  [1433, 5, 1],
  s,
  [1439, 8, 1],
  s,
  [1449, 4, 1],
  s,
  [1454, 4, 1],
  1459,
  1464,
  1468,
  s,
  [1470, 8, 1],
  s,
  [1480, 5, 1],
  s,
  [1486, 6, 1],
  s,
  [1493, 5, 1],
  s,
  [1499, 5, 1],
  s,
  [1505, 6, 1],
  1512,
  1513,
  1514,
  1518,
  1520,
  s,
  [1524, 4, 1],
  s,
  [1530, 14, 1],
  s,
  [1545, 4, 1],
  1550,
  s,
  [1553, 6, 1],
  1560,
  1561,
  1562,
  1564,
  1565,
  1566,
  s,
  [1568, 7, 1],
  1577,
  1578,
  1579,
  1582,
  1583,
  1584,
  1586,
  1587,
  1588,
  1591,
  s,
  [1594, 5, 1],
  1600,
  1601,
  s,
  [1604, 8, 1],
  1613,
  1614,
  1615,
  1618,
  s,
  [1621, 5, 1],
  1627,
  1628,
  s,
  [1631, 8, 1],
  s,
  [1640, 11, 1],
  s,
  [1652, 13, 1],
  s,
  [1666, 11, 1],
  s,
  [1678, 13, 1],
  s,
  [1692, 11, 1],
  s,
  [1704, 13, 1],
  1718,
  s,
  [1721, 8, 1],
  s,
  [1732, 5, 1],
  1739,
  1740,
  s,
  [1743, 4, 1],
  1748,
  1751,
  1752,
  1755,
  s,
  [1759, 8, 1],
  s,
  [1770, 5, 1],
  1777,
  1778,
  s,
  [1781, 4, 1],
  1786,
  1789,
  1790,
  1793,
  1796,
  s,
  [1798, 11, 1],
  s,
  [1810, 13, 1],
  s,
  [1824, 11, 1],
  s,
  [1836, 13, 1],
  s,
  [1850, 11, 1],
  s,
  [1862, 13, 1],
  1876,
  s,
  [1879, 8, 1],
  s,
  [1890, 5, 1],
  1897,
  1898,
  s,
  [1901, 4, 1],
  1906,
  1909,
  1910,
  1913,
  s,
  [1917, 8, 1],
  s,
  [1928, 5, 1],
  1935,
  1936,
  s,
  [1939, 4, 1],
  1944,
  1947,
  1948,
  1951,
  s,
  [1954, 12, 1],
  1968,
  1970,
  1973,
  1974,
  1976,
  1977,
  1978,
  s,
  [1980, 9, 1],
  1990,
  1991,
  1994,
  1995,
  1996,
  s,
  [1999, 9, 1],
  s,
  [2010, 9, 1],
  s,
  [2021, 4, 1],
  s,
  [2026, 4, 1],
  2031,
  2036,
  2040,
  s,
  [2042, 8, 1],
  s,
  [2052, 5, 1],
  2058,
  2059,
  s,
  [2061, 11, 1],
  s,
  [2073, 13, 1],
  s,
  [2087, 11, 1],
  s,
  [2099, 13, 1],
  s,
  [2114, 11, 1],
  s,
  [2126, 14, 1],
  s,
  [2141, 11, 1],
  s,
  [2153, 13, 1],
  s,
  [2167, 11, 1],
  s,
  [2179, 13, 1],
  s,
  [2194, 11, 1],
  s,
  [2206, 18, 1],
  s,
  [2225, 5, 1],
  s,
  [2231, 5, 1],
  s,
  [2237, 7, 1],
  2245,
  s,
  [2248, 6, 1],
  2255,
  2256,
  2257,
  2259,
  2260,
  2261,
  s,
  [2263, 7, 1],
  2272,
  2273,
  2274,
  2277,
  2278,
  2279,
  2281,
  2282,
  2283,
  2286,
  s,
  [2289, 5, 1],
  2295,
  2296,
  s,
  [2299, 8, 1],
  2308,
  2309,
  2310,
  2313,
  s,
  [2316, 5, 1],
  2322,
  2323,
  s,
  [2326, 12, 1],
  s,
  [2339, 5, 1],
  s,
  [2345, 5, 1],
  s,
  [2351, 7, 1],
  2359,
  s,
  [2362, 6, 1],
  2369,
  2370,
  2371,
  2373,
  2374,
  2375,
  s,
  [2377, 7, 1],
  2386,
  2387,
  2388,
  2391,
  2392,
  2393,
  2395,
  2396,
  2397,
  2400,
  s,
  [2403, 5, 1],
  2409,
  2410,
  s,
  [2413, 8, 1],
  2422,
  2423,
  2424,
  2427,
  s,
  [2430, 5, 1],
  2436,
  2437,
  s,
  [2440, 7, 1],
  2448,
  2450,
  s,
  [2452, 4, 1],
  2457,
  2458,
  2460,
  2461,
  2462,
  s,
  [2464, 4, 1],
  2469,
  2472,
  2476,
  s,
  [2479, 13, 1],
  2493,
  2496,
  2497,
  2498,
  s,
  [2502, 8, 1],
  s,
  [2513, 5, 1],
  2520,
  2521,
  s,
  [2524, 4, 1],
  2529,
  2532,
  2533,
  2536,
  s,
  [2539, 5, 1],
  s,
  [2545, 5, 1],
  s,
  [2551, 11, 1],
  s,
  [2563, 5, 1],
  s,
  [2569, 5, 1],
  s,
  [2575, 11, 1],
  s,
  [2587, 13, 1],
  s,
  [2602, 4, 1],
  s,
  [2607, 4, 1],
  2612,
  2617,
  2621,
  s,
  [2623, 8, 1],
  s,
  [2633, 5, 1],
  2639,
  2640,
  s,
  [2642, 11, 1],
  s,
  [2654, 13, 1],
  s,
  [2668, 11, 1],
  s,
  [2680, 13, 1],
  s,
  [2695, 11, 1],
  s,
  [2707, 14, 1],
  s,
  [2722, 11, 1],
  s,
  [2734, 13, 1],
  s,
  [2748, 11, 1],
  s,
  [2760, 13, 1],
  s,
  [2775, 11, 1],
  s,
  [2787, 26, 1],
  s,
  [2815, 4, 1],
  s,
  [2820, 4, 1],
  2825,
  2830,
  2834,
  s,
  [2836, 8, 1],
  s,
  [2846, 5, 1],
  2852,
  2853,
  s,
  [2855, 11, 1],
  s,
  [2867, 13, 1],
  s,
  [2881, 11, 1],
  s,
  [2893, 13, 1],
  s,
  [2908, 11, 1],
  s,
  [2920, 14, 1],
  s,
  [2935, 11, 1],
  s,
  [2947, 13, 1],
  s,
  [2961, 11, 1],
  s,
  [2973, 13, 1],
  s,
  [2988, 11, 1],
  s,
  [3000, 15, 1],
  3017,
  3018,
  3020,
  s,
  [3023, 8, 1],
  s,
  [3032, 7, 1],
  3040,
  3043,
  s,
  [3046, 7, 1],
  3055,
  3057,
  3060,
  3061,
  3063,
  3064,
  3065,
  s,
  [3067, 9, 1],
  3077,
  3078,
  3081,
  3082,
  3083,
  s,
  [3086, 4, 1],
  3091,
  3092,
  3093,
  3096,
  s,
  [3099, 5, 1],
  3105,
  3106,
  s,
  [3109, 19, 1],
  s,
  [3129, 8, 1],
  s,
  [3140, 5, 1],
  3147,
  3148,
  s,
  [3151, 4, 1],
  3156,
  3159,
  3160,
  3163,
  s,
  [3166, 5, 1],
  s,
  [3172, 5, 1],
  s,
  [3178, 11, 1],
  s,
  [3190, 5, 1],
  s,
  [3196, 5, 1],
  s,
  [3202, 11, 1],
  s,
  [3215, 8, 1],
  s,
  [3226, 5, 1],
  3233,
  3234,
  s,
  [3237, 4, 1],
  3242,
  3245,
  3246,
  3249,
  s,
  [3252, 5, 1],
  s,
  [3258, 5, 1],
  s,
  [3264, 11, 1],
  s,
  [3276, 5, 1],
  s,
  [3282, 5, 1],
  s,
  [3288, 11, 1],
  3300,
  3304,
  3306,
  3309,
  3310,
  3312,
  3313,
  3314,
  s,
  [3316, 9, 1],
  3326,
  3327,
  3330,
  3331,
  3332,
  3335,
  3336,
  3337,
  3339,
  3342,
  3343,
  3345,
  3346,
  3347,
  s,
  [3349, 9, 1],
  3359,
  3360,
  3363,
  3364,
  3365,
  3368,
  3369,
  s,
  [3371, 6, 1],
  s,
  [3378, 8, 1],
  3387,
  3389,
  s,
  [3391, 4, 1],
  3396,
  3397,
  3399,
  3400,
  3401,
  s,
  [3403, 4, 1],
  3408,
  3411,
  3415,
  s,
  [3418, 13, 1],
  3432,
  3434,
  s,
  [3436, 11, 1],
  s,
  [3448, 13, 1],
  s,
  [3462, 11, 1],
  s,
  [3474, 13, 1],
  s,
  [3489, 11, 1],
  s,
  [3501, 14, 1],
  3516,
  3517,
  3518,
  3521,
  s,
  [3524, 5, 1],
  3530,
  3531,
  s,
  [3534, 20, 1],
  3555,
  3556,
  3557,
  3560,
  s,
  [3563, 5, 1],
  3569,
  3570,
  s,
  [3573, 19, 1],
  s,
  [3593, 11, 1],
  s,
  [3605, 14, 1],
  s,
  [3620, 4, 1],
  3625,
  3626,
  3628,
  3629,
  3630,
  s,
  [3632, 4, 1],
  3637,
  3640,
  3644,
  s,
  [3647, 13, 1],
  s,
  [3661, 5, 1],
  3667,
  3668,
  3670,
  3671,
  3672,
  s,
  [3674, 4, 1],
  3679,
  3682,
  3686,
  s,
  [3689, 13, 1],
  3703,
  3704,
  3706,
  3707,
  3710,
  3711,
  3713,
  s,
  [3716, 8, 1],
  s,
  [3725, 7, 1],
  3733,
  3736,
  s,
  [3739, 6, 1],
  s,
  [3746, 5, 1],
  s,
  [3752, 11, 1],
  3764,
  s,
  [3766, 11, 1],
  s,
  [3778, 13, 1],
  s,
  [3792, 11, 1],
  s,
  [3804, 13, 1],
  s,
  [3819, 11, 1],
  s,
  [3831, 14, 1],
  s,
  [3846, 11, 1],
  s,
  [3858, 13, 1],
  s,
  [3872, 11, 1],
  s,
  [3884, 13, 1],
  s,
  [3899, 11, 1],
  s,
  [3911, 18, 1],
  3930,
  s,
  [3933, 8, 1],
  s,
  [3942, 7, 1],
  3950,
  3953,
  s,
  [3957, 8, 1],
  s,
  [3966, 7, 1],
  3974,
  3977,
  s,
  [3980, 7, 1],
  3990,
  3992,
  3995,
  3996,
  3998,
  3999,
  4000,
  s,
  [4002, 9, 1],
  4012,
  4013,
  4016,
  4017,
  4018,
  4021,
  4022,
  4023,
  4025,
  4028,
  4029,
  4031,
  4032,
  4033,
  s,
  [4035, 9, 1],
  4045,
  4046,
  4049,
  4050,
  4051,
  4054,
  4055,
  s,
  [4057, 6, 1],
  s,
  [4064, 19, 1],
  s,
  [4084, 5, 1],
  s,
  [4090, 11, 1],
  s,
  [4102, 5, 1],
  s,
  [4108, 5, 1],
  s,
  [4114, 11, 1],
  4126,
  4127,
  4128,
  4130,
  4133,
  4134,
  4136,
  4137,
  4138,
  s,
  [4140, 9, 1],
  4150,
  4151,
  4154,
  4155,
  4156,
  4159,
  4160,
  s,
  [4162, 6, 1],
  s,
  [4169, 8, 1],
  s,
  [4178, 6, 1],
  s,
  [4185, 8, 1],
  s,
  [4194, 11, 1],
  s,
  [4206, 14, 1],
  s,
  [4221, 4, 1],
  4226,
  4227,
  4229,
  4230,
  4231,
  s,
  [4233, 4, 1],
  4238,
  4241,
  4245,
  s,
  [4248, 13, 1],
  s,
  [4262, 5, 1],
  4268,
  4269,
  4271,
  4272,
  4273,
  s,
  [4275, 4, 1],
  4280,
  4283,
  4287,
  s,
  [4290, 13, 1],
  4304,
  4305,
  s,
  [4307, 16, 1],
  4324,
  4325,
  4327,
  4328,
  4329,
  s,
  [4331, 4, 1],
  4336,
  4339,
  4343,
  s,
  [4346, 13, 1],
  4360,
  4361,
  4363,
  s,
  [4365, 5, 1],
  4371,
  s,
  [4374, 8, 1],
  s,
  [4383, 7, 1],
  4391,
  4394,
  s,
  [4398, 8, 1],
  s,
  [4407, 7, 1],
  4415,
  4418,
  s,
  [4421, 6, 1],
  s,
  [4428, 8, 1],
  s,
  [4437, 7, 1],
  4445,
  4448,
  s,
  [4451, 15, 1],
  4467,
  4470,
  4471,
  4473,
  4474,
  4475,
  s,
  [4477, 9, 1],
  4487,
  4488,
  4491,
  4492,
  4493,
  4496,
  4497,
  s,
  [4499, 6, 1],
  s,
  [4506, 8, 1],
  s,
  [4515, 6, 1],
  s,
  [4522, 8, 1],
  s,
  [4531, 6, 1],
  s,
  [4538, 12, 1],
  4551,
  4552,
  4554,
  4555,
  4556,
  s,
  [4558, 4, 1],
  4563,
  4566,
  4570,
  s,
  [4573, 13, 1],
  4587,
  4588,
  4590,
  4592,
  s,
  [4595, 8, 1],
  s,
  [4604, 7, 1],
  4612,
  4615,
  s,
  [4618, 18, 1],
  s,
  [4637, 6, 1],
  s,
  [4644, 9, 1],
  s,
  [4654, 6, 1]
]),
  goto: u([
  2,
  3,
  4,
  s,
  [11, 4, 1],
  7,
  5,
  6,
  18,
  19,
  22,
  234,
  235,
  256,
  257,
  260,
  258,
  259,
  1,
  15,
  17,
  s,
  [256, 4, 1],
  23,
  26,
  27,
  28,
  87,
  88,
  c,
  [10, 4],
  8,
  24,
  25,
  c,
  [36, 3],
  18,
  19,
  16,
  43,
  50,
  58,
  70,
  73,
  s,
  [91, 3],
  104,
  s,
  [98, 3],
  108,
  109,
  110,
  106,
  233,
  179,
  100,
  114,
  256,
  257,
  115,
  116,
  117,
  258,
  259,
  s,
  [124, 6, 1],
  87,
  88,
  31,
  38,
  41,
  89,
  c,
  [72, 7],
  225,
  226,
  227,
  c,
  [74, 6],
  c,
  [73, 3],
  56,
  61,
  64,
  83,
  84,
  87,
  88,
  29,
  33,
  69,
  66,
  83,
  84,
  91,
  71,
  68,
  91,
  104,
  c,
  [64, 4],
  114,
  107,
  101,
  136,
  132,
  133,
  134,
  262,
  263,
  113,
  118,
  120,
  121,
  122,
  s,
  [248, 4, 1],
  119,
  30,
  c,
  [62, 8],
  39,
  42,
  37,
  50,
  40,
  c,
  [114, 3],
  c,
  [113, 19],
  258,
  259,
  c,
  [104, 5],
  44,
  51,
  60,
  62,
  c,
  [46, 8],
  107,
  113,
  72,
  c,
  [41, 26],
  93,
  92,
  90,
  92,
  130,
  92,
  105,
  99,
  111,
  112,
  114,
  138,
  142,
  144,
  149,
  150,
  161,
  164,
  264,
  c,
  [55, 7],
  140,
  231,
  232,
  c,
  [38, 4],
  178,
  s,
  [180, 4, 1],
  256,
  257,
  228,
  229,
  230,
  258,
  259,
  241,
  238,
  239,
  240,
  246,
  247,
  s,
  [252, 4, 1],
  c,
  [144, 4],
  c,
  [184, 3],
  91,
  91,
  83,
  84,
  c,
  [87, 4],
  91,
  87,
  88,
  c,
  [90, 12],
  c,
  [26, 29],
  c,
  [236, 22],
  c,
  [230, 5],
  c,
  [226, 15],
  63,
  130,
  93,
  105,
  c,
  [42, 38],
  224,
  c,
  [172, 6],
  224,
  224,
  c,
  [29, 6],
  131,
  147,
  151,
  158,
  160,
  165,
  166,
  172,
  177,
  218,
  236,
  237,
  c,
  [37, 5],
  162,
  c,
  [8, 7],
  265,
  141,
  184,
  185,
  187,
  189,
  194,
  199,
  195,
  203,
  208,
  204,
  210,
  216,
  212,
  211,
  242,
  245,
  123,
  233,
  c,
  [57, 4],
  51,
  60,
  c,
  [101, 4],
  87,
  88,
  62,
  c,
  [103, 10],
  c,
  [96, 8],
  c,
  [82, 6],
  c,
  [32, 32],
  c,
  [368, 15],
  c,
  [342, 11],
  178,
  c,
  [295, 52],
  131,
  c,
  [68, 15],
  44,
  c,
  [69, 52],
  219,
  220,
  221,
  c,
  [440, 21],
  c,
  [24, 48],
  148,
  146,
  155,
  159,
  156,
  157,
  c,
  [354, 6],
  c,
  [547, 5],
  186,
  188,
  190,
  c,
  [41, 21],
  243,
  233,
  40,
  c,
  [260, 10],
  63,
  c,
  [192, 4],
  c,
  [190, 5],
  130,
  92,
  178,
  c,
  [23, 23],
  c,
  [481, 4],
  s,
  [224, 3],
  c,
  [437, 7],
  c,
  [395, 71],
  c,
  [84, 84],
  c,
  [943, 3],
  242,
  245,
  c,
  [5, 10],
  c,
  [86, 6],
  34,
  47,
  54,
  c,
  [616, 6],
  c,
  [614, 8],
  200,
  202,
  209,
  217,
  242,
  245,
  196,
  205,
  213,
  c,
  [404, 26],
  c,
  [157, 5],
  c,
  [84, 6],
  224,
  c,
  [157, 7],
  c,
  [19, 19],
  131,
  c,
  [443, 72],
  c,
  [400, 47],
  c,
  [120, 120],
  243,
  233,
  243,
  233,
  243,
  233,
  91,
  169,
  s,
  [173, 4, 1],
  59,
  75,
  78,
  c,
  [312, 4],
  85,
  86,
  c,
  [311, 7],
  87,
  88,
  c,
  [313, 5],
  91,
  c,
  [646, 6],
  243,
  233,
  c,
  [427, 32],
  c,
  [196, 73],
  c,
  [73, 73],
  c,
  [573, 21],
  c,
  [547, 64],
  c,
  [85, 85],
  48,
  55,
  74,
  80,
  s,
  [85, 4, 1],
  76,
  82,
  c,
  [348, 22],
  c,
  [754, 3],
  c,
  [450, 23],
  c,
  [138, 16],
  c,
  [159, 21],
  c,
  [11, 5],
  c,
  [492, 6],
  c,
  [454, 178],
  c,
  [184, 184],
  170,
  92,
  46,
  54,
  53,
  c,
  [438, 10],
  77,
  c,
  [1617, 6],
  167,
  c,
  [877, 30],
  c,
  [540, 19],
  c,
  [256, 6],
  c,
  [4, 6],
  c,
  [517, 65],
  c,
  [65, 65],
  224,
  c,
  [186, 23],
  c,
  [23, 23],
  105,
  c,
  [1551, 13],
  c,
  [743, 32],
  c,
  [380, 73],
  c,
  [327, 31],
  c,
  [31, 31],
  c,
  [86, 24],
  c,
  [190, 31],
  c,
  [220, 31],
  c,
  [528, 23],
  c,
  [358, 21],
  c,
  [1356, 151],
  c,
  [191, 18],
  c,
  [17, 17],
  c,
  [197, 6],
  c,
  [550, 61],
  c,
  [389, 6],
  c,
  [1241, 44],
  c,
  [87, 37],
  c,
  [14, 14],
  c,
  [484, 86],
  c,
  [582, 12],
  c,
  [43, 31],
  131,
  c,
  [338, 46],
  c,
  [23, 23],
  c,
  [306, 8],
  c,
  [258, 51],
  c,
  [14, 14],
  c,
  [174, 32],
  131,
  c,
  [129, 29],
  c,
  [82, 20],
  c,
  [7, 7]
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack

    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks


    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 4660 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };








    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;

        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };






































































































































    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,

            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,

            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;


    try {
        this.__reentrant_call_depth++;

        lexer.setInput(input, sharedState_yy);

        // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
        // this initial `setInput()` call: hence we can now check and decide
        // whether we'll go with the standard, slower, lex() API or the
        // `fast_lex()` one:
        if (typeof lexer.canIUse === 'function') {
            var lexerInfo = lexer.canIUse();
            if (lexerInfo.fastLex && typeof fastLex === 'function') {
                lex = fastLex;
            }
        } 



        vstack[sp] = null;
        sstack[sp] = 0;
        stack[sp] = 0;
        ++sp;





        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];











                // handle parse error
                if (!action) {
                    var errStr;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    // Report error
                    if (typeof lexer.yylineno === 'number') {
                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                    } else {
                        errStr = 'Parse error: ';
                    }
                    if (typeof lexer.showPosition === 'function') {
                        errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                    }
                    if (expected.length) {
                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                    } else {
                        errStr += 'Unexpected ' + errSymbolDescr;
                    }
                    // we cannot recover from the error!
                    p = this.constructParseErrorInfo(errStr, null, expected, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }


            }










            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;

            // shift:
            case 1:
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;

                sstack[sp] = newState; // push state

                ++sp;
                symbol = 0;




                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:




                continue;

            // reduce:
            case 2:



                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                yyrulelen = this_production[1];










                r = this.performAction.call(yyval, newState, sp - 1, vstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= yyrulelen;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;

                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;









                continue;

            // accept:
            case 3:
                if (sp !== -2) {
                    retval = true;
                    // Return the `$accept` rule's `$$` result, if available.
                    //
                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                    // default, action):
                    //
                    //     $accept: <startSymbol> $end
                    //                  %{ $$ = $1; @$ = @1; %}
                    //
                    // which, combined with the parse kernel's `$accept` state behaviour coded below,
                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                    //
                    // In code:
                    //
                    //                  %{
                    //                      @$ = @1;            // if location tracking support is included
                    //                      if (typeof $1 !== 'undefined')
                    //                          return $1;
                    //                      else
                    //                          return true;           // the default parse result if the rule actions don't produce anything
                    //                  %}
                    sp--;
                    if (typeof vstack[sp] !== 'undefined') {
                        retval = vstack[sp];
                    }
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too, but keep the exception intact
        // if it is a known parser or lexer error which has been thrown by parseError() already:
        if (ex instanceof this.JisonParserError) {
            throw ex;
        }
        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
            throw ex;
        }

        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = false;
        r = this.parseError(p.errStr, p, this.JisonParserError);
        if (typeof r !== 'undefined') {
            retval = r;
        }
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }   // /finally

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;
/* lexer generated by jison-lex 0.6.1-215 */

/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


var lexer = function() {
  /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */
  function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
      enumerable: false,
      writable: false,
      value: 'JisonLexerError'
    });

    if (msg == null)
      msg = '???';

    Object.defineProperty(this, 'message', {
      enumerable: false,
      writable: true,
      value: msg
    });

    this.hash = hash;
    var stacktrace;

    if (hash && hash.exception instanceof Error) {
      var ex2 = hash.exception;
      this.message = ex2.message || msg;
      stacktrace = ex2.stack;
    }

    if (!stacktrace) {
      if (Error.hasOwnProperty('captureStackTrace')) {
        // V8
        Error.captureStackTrace(this, this.constructor);
      } else {
        stacktrace = new Error(msg).stack;
      }
    }

    if (stacktrace) {
      Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
      });
    }
  }

  if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
  } else {
    JisonLexerError.prototype = Object.create(Error.prototype);
  }

  JisonLexerError.prototype.constructor = JisonLexerError;
  JisonLexerError.prototype.name = 'JisonLexerError';

  var lexer = {
    
// Code Generator Information Report
// ---------------------------------
//
// Options:
//
//   backtracking: .................... false
//   location.ranges: ................. false
//   location line+column tracking: ... true
//
//
// Forwarded Parser Analysis flags:
//
//   uses yyleng: ..................... false
//   uses yylineno: ................... false
//   uses yytext: ..................... false
//   uses yylloc: ..................... false
//   uses lexer values: ............... true / true
//   location tracking: ............... false
//   location assignment: ............. false
//
//
// Lexer Analysis flags:
//
//   uses yyleng: ..................... ???
//   uses yylineno: ................... ???
//   uses yytext: ..................... ???
//   uses yylloc: ..................... ???
//   uses ParseError API: ............. ???
//   uses yyerror: .................... ???
//   uses location tracking & editing:  ???
//   uses more() API: ................. ???
//   uses unput() API: ................ ???
//   uses reject() API: ............... ???
//   uses less() API: ................. ???
//   uses display APIs pastInput(), upcomingInput(), showPosition():
//        ............................. ???
//   uses describeYYLLOC() API: ....... ???
//
// --------- END OF REPORT -----------

EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

    // options: {},                             /// <-- injected by the code generator

    // yy: ...,                                 /// <-- injected by setInput()

    __currentRuleSet__: null,                   /// INTERNAL USE ONLY: internal rule set cache for the current lexer state  

    __error_infos: [],                          /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  
    __decompressed: false,                      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  
    done: false,                                /// INTERNAL USE ONLY  
    _backtrack: false,                          /// INTERNAL USE ONLY  
    _input: '',                                 /// INTERNAL USE ONLY  
    _more: false,                               /// INTERNAL USE ONLY  
    _signaled_error_token: false,               /// INTERNAL USE ONLY  
    conditionStack: [],                         /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  
    match: '',                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  
    matched: '',                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  
    matches: false,                             /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  
    yytext: '',                                 /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  
    offset: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  
    yyleng: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  
    yylineno: 0,                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  
    yylloc: null,                               /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  

    /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
      msg = '' + msg;

      // heuristic to determine if the error message already contains a (partial) source code dump
      // as produced by either `showPosition()` or `prettyPrintRange()`:
      if (show_input_position == undefined) {
        show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
      }

      if (this.yylloc && show_input_position) {
        if (typeof this.prettyPrintRange === 'function') {
          var pretty_src = this.prettyPrintRange(this.yylloc);

          if (!/\n\s*$/.test(msg)) {
            msg += '\n';
          }

          msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
        } else if (typeof this.showPosition === 'function') {
          var pos_str = this.showPosition();

          if (pos_str) {
            if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') {
              msg += '\n' + pos_str;
            } else {
              msg += pos_str;
            }
          }
        }
      }

      /** @constructor */
      var pei = {
        errStr: msg,
        recoverable: !!recoverable,
        text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  
        token: null,
        line: this.yylineno,
        loc: this.yylloc,
        yy: this.yy,
        lexer: this,

        /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */
        destroy: function destructLexErrorInfo() {
          // remove cyclic references added to error info:
          // info.yy = null;
          // info.lexer = null;
          // ...
          var rec = !!this.recoverable;

          for (var key in this) {
            if (this.hasOwnProperty(key) && typeof key === 'object') {
              this[key] = undefined;
            }
          }

          this.recoverable = rec;
        }
      };

      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
      this.__error_infos.push(pei);

      return pei;
    },

    /**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */
    parseError: function lexer_parseError(str, hash, ExceptionClass) {
      if (!ExceptionClass) {
        ExceptionClass = this.JisonLexerError;
      }

      if (this.yy) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        }
      }

      throw new ExceptionClass(str, hash);
    },

    /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */
    yyerror: function yyError(str /*, ...args */) {
      var lineno_msg = '';

      if (this.yylloc) {
        lineno_msg = ' on line ' + (this.yylineno + 1);
      }

      var p = this.constructLexErrorInfo(
        'Lexical error' + lineno_msg + ': ' + str,
        this.options.lexerErrorsAreRecoverable
      );

      // Add any extra args to the hash under the name `extra_error_attributes`:
      var args = Array.prototype.slice.call(arguments, 1);

      if (args.length) {
        p.extra_error_attributes = args;
      }

      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
    },

    /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
      // prevent lingering circular references from causing memory leaks:
      this.setInput('', {});

      // nuke the error hash info instances created during this run.
      // Userland code must COPY any data/references
      // in the error hash instance(s) it is more permanently interested in.
      if (!do_not_nuke_errorinfos) {
        for (var i = this.__error_infos.length - 1; i >= 0; i--) {
          var el = this.__error_infos[i];

          if (el && typeof el.destroy === 'function') {
            el.destroy();
          }
        }

        this.__error_infos.length = 0;
      }

      return this;
    },

    /**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */
    clear: function lexer_clear() {
      this.yytext = '';
      this.yyleng = 0;
      this.match = '';

      // - DO NOT reset `this.matched`
      this.matches = false;

      this._more = false;
      this._backtrack = false;
      var col = (this.yylloc ? this.yylloc.last_column : 0);

      this.yylloc = {
        first_line: this.yylineno + 1,
        first_column: col,
        last_line: this.yylineno + 1,
        last_column: col,
        range: [this.offset, this.offset]
      };
    },

    /**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */
    setInput: function lexer_setInput(input, yy) {
      this.yy = yy || this.yy || {};

      // also check if we've fully initialized the lexer instance,
      // including expansion work to be done to go from a loaded
      // lexer to a usable lexer:
      if (!this.__decompressed) {
        // step 1: decompress the regex list:
        var rules = this.rules;

        for (var i = 0, len = rules.length; i < len; i++) {
          var rule_re = rules[i];

          // compression: is the RE an xref to another RE slot in the rules[] table?
          if (typeof rule_re === 'number') {
            rules[i] = rules[rule_re];
          }
        }

        // step 2: unfold the conditions[] set to make these ready for use:
        var conditions = this.conditions;

        for (var k in conditions) {
          var spec = conditions[k];
          var rule_ids = spec.rules;
          var len = rule_ids.length;
          var rule_regexes = new Array(len);             // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! 
          var rule_new_ids = new Array(len);

          for (var i = 0; i < len; i++) {
            var idx = rule_ids[i];
            var rule_re = rules[idx];
            rule_regexes[i] = rule_re;
            rule_new_ids[i] = idx;
          }

          spec.rules = rule_new_ids;
          spec.__rule_regexes = rule_regexes;
          spec.__rule_count = len;
        }

        this.__decompressed = true;
      }

      this._input = input || '';
      this.clear();
      this._signaled_error_token = false;
      this.done = false;
      this.yylineno = 0;
      this.matched = '';
      this.conditionStack = ['INITIAL'];
      this.__currentRuleSet__ = null;

      this.yylloc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      this.offset = 0;
      return this;
    },

    /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */
    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
      var rv = callback.call(this, this._input, cpsArg);

      if (typeof rv !== 'string') {
        if (rv) {
          this._input = '' + rv;
        } 
        // else: keep `this._input` as is.  
      } else {
        this._input = rv;
      }

      return this;
    },

    /**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    input: function lexer_input() {
      if (!this._input) {
        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
        return null;
      }

      var ch = this._input[0];
      this.yytext += ch;
      this.yyleng++;
      this.offset++;
      this.match += ch;
      this.matched += ch;

      // Count the linenumber up when we hit the LF (or a stand-alone CR).
      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
      // and we advance immediately past the LF as well, returning both together as if
      // it was all a single 'character' only.
      var slice_len = 1;

      var lines = false;

      if (ch === '\n') {
        lines = true;
      } else if (ch === '\r') {
        lines = true;
        var ch2 = this._input[1];

        if (ch2 === '\n') {
          slice_len++;
          ch += ch2;
          this.yytext += ch2;
          this.yyleng++;
          this.offset++;
          this.match += ch2;
          this.matched += ch2;
          this.yylloc.range[1]++;
        }
      }

      if (lines) {
        this.yylineno++;
        this.yylloc.last_line++;
        this.yylloc.last_column = 0;
      } else {
        this.yylloc.last_column++;
      }

      this.yylloc.range[1]++;
      this._input = this._input.slice(slice_len);
      return ch;
    },

    /**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    unput: function lexer_unput(ch) {
      var len = ch.length;
      var lines = ch.split(/(?:\r\n?|\n)/g);
      this._input = ch + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - len);
      this.yyleng = this.yytext.length;
      this.offset -= len;
      this.match = this.match.substr(0, this.match.length - len);
      this.matched = this.matched.substr(0, this.matched.length - len);

      if (lines.length > 1) {
        this.yylineno -= lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;

        // Get last entirely matched line into the `pre_lines[]` array's
        // last index slot; we don't mind when other previously 
        // matched lines end up in the array too. 
        var pre = this.match;

        var pre_lines = pre.split(/(?:\r\n?|\n)/g);

        if (pre_lines.length === 1) {
          pre = this.matched;
          pre_lines = pre.split(/(?:\r\n?|\n)/g);
        }

        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
      } else {
        this.yylloc.last_column -= len;
      }

      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
      this.done = false;
      return this;
    },

    /**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */
    more: function lexer_more() {
      this._more = true;
      return this;
    },

    /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */
    reject: function lexer_reject() {
      if (this.options.backtrack_lexer) {
        this._backtrack = true;
      } else {
        // when the `parseError()` call returns, we MUST ensure that the error is registered.
        // We accomplish this by signaling an 'error' token to be produced for the current
        // `.lex()` run.
        var lineno_msg = '';

        if (this.yylloc) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',
          false
        );

        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
      }

      return this;
    },

    /**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */
    less: function lexer_less(n) {
      return this.unput(this.match.slice(n));
    },

    /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */
    pastInput: function lexer_pastInput(maxSize, maxLines) {
      var past = this.matched.substring(0, this.matched.length - this.match.length);

      if (maxSize < 0)
        maxSize = past.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = past.length;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substr` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      past = past.substr(-maxSize * 2 - 2);

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = past.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(-maxLines);
      past = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis prefix...
      if (past.length > maxSize) {
        past = '...' + past.substr(-maxSize);
      }

      return past;
    },

    /**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
      var next = this.match;

      if (maxSize < 0)
        maxSize = next.length + this._input.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = maxSize;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substring` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      if (next.length < maxSize * 2 + 2) {
        next += this._input.substring(0, maxSize * 2 + 2);   // substring is faster on Chrome/V8 
      }

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = next.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(0, maxLines);
      next = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis postfix...
      if (next.length > maxSize) {
        next = next.substring(0, maxSize) + '...';
      }

      return next;
    },

    /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
      var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
      var c = new Array(pre.length + 1).join('-');
      return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */
    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
      var loc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      if (actual) {
        loc.first_line = actual.first_line | 0;
        loc.last_line = actual.last_line | 0;
        loc.first_column = actual.first_column | 0;
        loc.last_column = actual.last_column | 0;

        if (actual.range) {
          loc.range[0] = actual.range[0] | 0;
          loc.range[1] = actual.range[1] | 0;
        }
      }

      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
        // plan B: heuristic using preceding and following:
        if (loc.first_line <= 0 && preceding) {
          loc.first_line = preceding.last_line | 0;
          loc.first_column = preceding.last_column | 0;

          if (preceding.range) {
            loc.range[0] = actual.range[1] | 0;
          }
        }

        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
          loc.last_line = following.first_line | 0;
          loc.last_column = following.first_column | 0;

          if (following.range) {
            loc.range[1] = actual.range[0] | 0;
          }
        }

        // plan C?: see if the 'current' location is useful/sane too:
        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
          loc.first_line = current.first_line | 0;
          loc.first_column = current.first_column | 0;

          if (current.range) {
            loc.range[0] = current.range[0] | 0;
          }
        }

        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
          loc.last_line = current.last_line | 0;
          loc.last_column = current.last_column | 0;

          if (current.range) {
            loc.range[1] = current.range[1] | 0;
          }
        }
      }

      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
      // or plan D heuristics to produce a 'sensible' last_line value:
      if (loc.last_line <= 0) {
        if (loc.first_line <= 0) {
          loc.first_line = this.yylloc.first_line;
          loc.last_line = this.yylloc.last_line;
          loc.first_column = this.yylloc.first_column;
          loc.last_column = this.yylloc.last_column;
          loc.range[0] = this.yylloc.range[0];
          loc.range[1] = this.yylloc.range[1];
        } else {
          loc.last_line = this.yylloc.last_line;
          loc.last_column = this.yylloc.last_column;
          loc.range[1] = this.yylloc.range[1];
        }
      }

      if (loc.first_line <= 0) {
        loc.first_line = loc.last_line;
        loc.first_column = 0;  // loc.last_column; 
        loc.range[1] = loc.range[0];
      }

      if (loc.first_column < 0) {
        loc.first_column = 0;
      }

      if (loc.last_column < 0) {
        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);
      }

      return loc;
    },

    /**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */
    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
      const CONTEXT = 3;
      const CONTEXT_TAIL = 1;
      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
      var input = this.matched + this._input;
      var lines = input.split('\n');
      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));
      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));
      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
      var ws_prefix = new Array(lineno_display_width).join(' ');
      var nonempty_line_indexes = [];

      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
        var lno = index + l0;
        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
        var rv = lno_pfx + ': ' + line;
        var errpfx = new Array(lineno_display_width + 1).join('^');
        var offset = 2 + 1;
        var len = 0;

        if (lno === loc.first_line) {
          offset += loc.first_column;

          len = Math.max(
            2,
            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1
          );
        } else if (lno === loc.last_line) {
          len = Math.max(2, loc.last_column + 1);
        } else if (lno > loc.first_line && lno < loc.last_line) {
          len = Math.max(2, line.length + 1);
        }

        if (len) {
          var lead = new Array(offset).join('.');
          var mark = new Array(len).join('^');
          rv += '\n' + errpfx + lead + mark;

          if (line.trim().length > 0) {
            nonempty_line_indexes.push(index);
          }
        }

        rv = rv.replace(/\t/g, ' ');
        return rv;
      });

      // now make sure we don't print an overly large amount of error area: limit it 
      // to the top and bottom line count:
      if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
        var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
        var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
        var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
        intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
        rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
      }

      return rv.join('\n');
    },

    /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
      var l1 = yylloc.first_line;
      var l2 = yylloc.last_line;
      var c1 = yylloc.first_column;
      var c2 = yylloc.last_column;
      var dl = l2 - l1;
      var dc = c2 - c1;
      var rv;

      if (dl === 0) {
        rv = 'line ' + l1 + ', ';

        if (dc <= 1) {
          rv += 'column ' + c1;
        } else {
          rv += 'columns ' + c1 + ' .. ' + c2;
        }
      } else {
        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
      }

      if (yylloc.range && display_range_too) {
        var r1 = yylloc.range[0];
        var r2 = yylloc.range[1] - 1;

        if (r2 <= r1) {
          rv += ' {String Offset: ' + r1 + '}';
        } else {
          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
        }
      }

      return rv;
    },

    /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */
    test_match: function lexer_test_match(match, indexed_rule) {
      var token, lines, backup, match_str, match_str_len;

      if (this.options.backtrack_lexer) {
        // save context
        backup = {
          yylineno: this.yylineno,

          yylloc: {
            first_line: this.yylloc.first_line,
            last_line: this.yylloc.last_line,
            first_column: this.yylloc.first_column,
            last_column: this.yylloc.last_column,
            range: this.yylloc.range.slice(0)
          },

          yytext: this.yytext,
          match: this.match,
          matches: this.matches,
          matched: this.matched,
          yyleng: this.yyleng,
          offset: this.offset,
          _more: this._more,
          _input: this._input,

          //_signaled_error_token: this._signaled_error_token,
          yy: this.yy,

          conditionStack: this.conditionStack.slice(0),
          done: this.done
        };
      }

      match_str = match[0];
      match_str_len = match_str.length;

      // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
      lines = match_str.split(/(?:\r\n?|\n)/g);

      if (lines.length > 1) {
        this.yylineno += lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = lines[lines.length - 1].length;
      } else {
        this.yylloc.last_column += match_str_len;
      }

      // }
      this.yytext += match_str;

      this.match += match_str;
      this.matched += match_str;
      this.matches = match;
      this.yyleng = this.yytext.length;
      this.yylloc.range[1] += match_str_len;

      // previous lex rules MAY have invoked the `more()` API rather than producing a token:
      // those rules will already have moved this `offset` forward matching their match lengths,
      // hence we must only add our own match length now:
      this.offset += match_str_len;

      this._more = false;
      this._backtrack = false;
      this._input = this._input.slice(match_str_len);

      // calling this method:
      //
      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
      token = this.performAction.call(
        this,
        this.yy,
        indexed_rule,
        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */
      );

      // otherwise, when the action codes are all simple return token statements:
      //token = this.simpleCaseActionClusters[indexed_rule];

      if (this.done && this._input) {
        this.done = false;
      }

      if (token) {
        return token;
      } else if (this._backtrack) {
        // recover context
        for (var k in backup) {
          this[k] = backup[k];
        }

        this.__currentRuleSet__ = null;
        return false;  // rule action called reject() implying the next rule should be tested instead. 
      } else if (this._signaled_error_token) {
        // produce one 'error' token as `.parseError()` in `reject()`
        // did not guarantee a failure signal by throwing an exception!
        token = this._signaled_error_token;

        this._signaled_error_token = false;
        return token;
      }

      return false;
    },

    /**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */
    next: function lexer_next() {
      if (this.done) {
        this.clear();
        return this.EOF;
      }

      if (!this._input) {
        this.done = true;
      }

      var token, match, tempMatch, index;

      if (!this._more) {
        this.clear();
      }

      var spec = this.__currentRuleSet__;

      if (!spec) {
        // Update the ruleset cache as we apparently encountered a state change or just started lexing.
        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
        // speed up those activities a tiny bit.
        spec = this.__currentRuleSet__ = this._currentRules();

        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
        if (!spec || !spec.rules) {
          var lineno_msg = '';

          if (this.options.trackPosition) {
            lineno_msg = ' on line ' + (this.yylineno + 1);
          }

          var p = this.constructLexErrorInfo(
            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!',
            false
          );

          // produce one 'error' token until this situation has been resolved, most probably by parse termination!
          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        }
      }

      var rule_ids = spec.rules;
      var regexes = spec.__rule_regexes;
      var len = spec.__rule_count;

      // Note: the arrays are 1-based, while `len` itself is a valid index,
      // hence the non-standard less-or-equal check in the next loop condition!
      for (var i = 1; i <= len; i++) {
        tempMatch = regexes[i] ? this._input.match(regexes[i]) : null;

        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
          match = tempMatch;
          index = i;

          if (this.options.backtrack_lexer) {
            token = this.test_match(tempMatch, rule_ids[i]);

            if (token !== false) {
              return token;
            } else if (this._backtrack) {
              match = undefined;
              continue;  // rule action called reject() implying a rule MISmatch. 
            } else {
              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
              return false;
            }
          } else if (!this.options.flex) {
            break;
          }
        }
      }

      if (match) {
        token = this.test_match(match, rule_ids[index]);

        if (token !== false) {
          return token;
        }

        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
        return false;
      }

      if (!this._input) {
        this.done = true;
        this.clear();
        return this.EOF;
      } else {
        var lineno_msg = '';

        if (this.options.trackPosition) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': Unrecognized text.',
          this.options.lexerErrorsAreRecoverable
        );

        var pendingInput = this._input;
        var activeCondition = this.topState();
        var conditionStackDepth = this.conditionStack.length;
        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;

        if (token === this.ERROR) {
          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
          // has not consumed/modified any pending input or changed state in the error handler:
          if (!this.matches && // and make sure the input has been modified/consumed ...
          pendingInput === this._input && // ...or the lexer state has been modified significantly enough
          // to merit a non-consuming error handling action right now.
          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
            this.input();
          }
        }

        return token;
      }
    },

    /**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */
    lex: function lexer_lex() {
      var r;

      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
      if (typeof this.pre_lex === 'function') {
        r = this.pre_lex.call(this, 0);
      }

      if (typeof this.options.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.pre_lex.call(this, r) || r;
      }

      if (this.yy && typeof this.yy.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.pre_lex.call(this, r) || r;
      }

      while (!r) {
        r = this.next();
      }

      if (this.yy && typeof this.yy.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.post_lex.call(this, r) || r;
      }

      if (typeof this.options.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.post_lex.call(this, r) || r;
      }

      if (typeof this.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.post_lex.call(this, r) || r;
      }

      return r;
    },

    /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */
    fastLex: function lexer_fastLex() {
      var r;

      while (!r) {
        r = this.next();
      }

      return r;
    },

    /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */
    canIUse: function lexer_canIUse() {
      var rv = {
        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
      };

      return rv;
    },

    /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    begin: function lexer_begin(condition) {
      return this.pushState(condition);
    },

    /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */
    pushState: function lexer_pushState(condition) {
      this.conditionStack.push(condition);
      this.__currentRuleSet__ = null;
      return this;
    },

    /**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    popState: function lexer_popState() {
      var n = this.conditionStack.length - 1;

      if (n > 0) {
        this.__currentRuleSet__ = null;
        return this.conditionStack.pop();
      } else {
        return this.conditionStack[0];
      }
    },

    /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */
    topState: function lexer_topState(n) {
      n = this.conditionStack.length - 1 - Math.abs(n || 0);

      if (n >= 0) {
        return this.conditionStack[n];
      } else {
        return 'INITIAL';
      }
    },

    /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */
    _currentRules: function lexer__currentRules() {
      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
      } else {
        return this.conditions['INITIAL'];
      }
    },

    /**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    stateStackSize: function lexer_stateStackSize() {
      return this.conditionStack.length;
    },

    options: {
      trackPosition: true
    },

    JisonLexerError: JisonLexerError,

    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
      var yy_ = this;
      var YYSTATE = YY_START;

      switch (yyrulenumber) {
      case 0:
        /*! Conditions:: INITIAL */
        /*! Rule::       \s+|{COMMENT} */
        /**/
        break;

      case 3:
        /*! Conditions:: INITIAL */
        /*! Rule::       {LANGTAG} */
        yy_.yytext = yy_.yytext.substr(1);

        return 58;
        break;

      case 76:
        /*! Conditions:: INITIAL */
        /*! Rule::       [a-zA-Z0-9_-]+ */
        return 'unexpected word "' + yy_.yytext + '"';

        break;

      case 77:
        /*! Conditions:: INITIAL */
        /*! Rule::       . */
        return 'invalid character ' + yy_.yytext;

        break;

      default:
        return this.simpleCaseActionClusters[yyrulenumber];
      }
    },

    simpleCaseActionClusters: {
      /*! Conditions:: INITIAL */
      /*! Rule::       {ATPNAME_LN} */
      1: 35,

      /*! Conditions:: INITIAL */
      /*! Rule::       {ATPNAME_NS} */
      2: 36,

      /*! Conditions:: INITIAL */
      /*! Rule::       @ */
      4: 7,

      /*! Conditions:: INITIAL */
      /*! Rule::       {PNAME_LN} */
      5: 71,

      /*! Conditions:: INITIAL */
      /*! Rule::       {REPEAT_RANGE} */
      6: 57,

      /*! Conditions:: INITIAL */
      /*! Rule::       {DOUBLE} */
      7: 47,

      /*! Conditions:: INITIAL */
      /*! Rule::       {DECIMAL} */
      8: 46,

      /*! Conditions:: INITIAL */
      /*! Rule::       {INTEGER} */
      9: 41,

      /*! Conditions:: INITIAL */
      /*! Rule::       {ANON} */
      10: 'ANON',

      /*! Conditions:: INITIAL */
      /*! Rule::       {IRIREF} */
      11: 26,

      /*! Conditions:: INITIAL */
      /*! Rule::       {PNAME_NS} */
      12: 28,

      /*! Conditions:: INITIAL */
      /*! Rule::       a */
      13: 24,

      /*! Conditions:: INITIAL */
      /*! Rule::       {REGEXP} */
      14: 42,

      /*! Conditions:: INITIAL */
      /*! Rule::       {BLANK_NODE_LABEL} */
      15: 72,

      /*! Conditions:: INITIAL */
      /*! Rule::       {CODE} */
      16: 60,

      /*! Conditions:: INITIAL */
      /*! Rule::       {LANG_STRING_LITERAL_LONG1} */
      17: 68,

      /*! Conditions:: INITIAL */
      /*! Rule::       {LANG_STRING_LITERAL_LONG2} */
      18: 70,

      /*! Conditions:: INITIAL */
      /*! Rule::       {LANG_STRING_LITERAL1} */
      19: 67,

      /*! Conditions:: INITIAL */
      /*! Rule::       {LANG_STRING_LITERAL2} */
      20: 69,

      /*! Conditions:: INITIAL */
      /*! Rule::       {STRING_LITERAL_LONG1} */
      21: 64,

      /*! Conditions:: INITIAL */
      /*! Rule::       {STRING_LITERAL_LONG2} */
      22: 66,

      /*! Conditions:: INITIAL */
      /*! Rule::       {STRING_LITERAL1} */
      23: 63,

      /*! Conditions:: INITIAL */
      /*! Rule::       {STRING_LITERAL2} */
      24: 65,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_BASE} */
      25: 25,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_PREFIX} */
      26: 27,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_IMPORT} */
      27: 29,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_START} */
      28: 30,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_EXTERNAL} */
      29: 31,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_VIRTUAL} */
      30: 'IT_VIRTUAL',

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_CLOSED} */
      31: 55,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_EXTRA} */
      32: 56,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_LITERAL} */
      33: 37,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_BNODE} */
      34: 39,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_IRI} */
      35: 38,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_NONLITERAL} */
      36: 40,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_AND} */
      37: 34,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_OR} */
      38: 33,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_NOT} */
      39: 32,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_MININCLUSIVE} */
      40: 49,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_MINEXCLUSIVE} */
      41: 50,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_MAXINCLUSIVE} */
      42: 51,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_MAXEXCLUSIVE} */
      43: 52,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_LENGTH} */
      44: 43,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_MINLENGTH} */
      45: 44,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_MAXLENGTH} */
      46: 45,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_TOTALDIGITS} */
      47: 53,

      /*! Conditions:: INITIAL */
      /*! Rule::       {IT_FRACTIONDIGITS} */
      48: 54,

      /*! Conditions:: INITIAL */
      /*! Rule::       = */
      49: 3,

      /*! Conditions:: INITIAL */
      /*! Rule::       \/\/ */
      50: 59,

      /*! Conditions:: INITIAL */
      /*! Rule::       \{ */
      51: 8,

      /*! Conditions:: INITIAL */
      /*! Rule::       \} */
      52: 9,

      /*! Conditions:: INITIAL */
      /*! Rule::       & */
      53: 22,

      /*! Conditions:: INITIAL */
      /*! Rule::       \|\| */
      54: '||',

      /*! Conditions:: INITIAL */
      /*! Rule::       \| */
      55: 10,

      /*! Conditions:: INITIAL */
      /*! Rule::       , */
      56: 11,

      /*! Conditions:: INITIAL */
      /*! Rule::       \( */
      57: 4,

      /*! Conditions:: INITIAL */
      /*! Rule::       \) */
      58: 5,

      /*! Conditions:: INITIAL */
      /*! Rule::       \[ */
      59: 18,

      /*! Conditions:: INITIAL */
      /*! Rule::       \] */
      60: 19,

      /*! Conditions:: INITIAL */
      /*! Rule::       \$ */
      61: 13,

      /*! Conditions:: INITIAL */
      /*! Rule::       ! */
      62: '!',

      /*! Conditions:: INITIAL */
      /*! Rule::       \^\^ */
      63: 48,

      /*! Conditions:: INITIAL */
      /*! Rule::       \^ */
      64: 17,

      /*! Conditions:: INITIAL */
      /*! Rule::       \. */
      65: 6,

      /*! Conditions:: INITIAL */
      /*! Rule::       ~ */
      66: 20,

      /*! Conditions:: INITIAL */
      /*! Rule::       ; */
      67: 12,

      /*! Conditions:: INITIAL */
      /*! Rule::       \* */
      68: 14,

      /*! Conditions:: INITIAL */
      /*! Rule::       \+ */
      69: 15,

      /*! Conditions:: INITIAL */
      /*! Rule::       \? */
      70: 16,

      /*! Conditions:: INITIAL */
      /*! Rule::       - */
      71: 21,

      /*! Conditions:: INITIAL */
      /*! Rule::       % */
      72: 23,

      /*! Conditions:: INITIAL */
      /*! Rule::       true */
      73: 61,

      /*! Conditions:: INITIAL */
      /*! Rule::       false */
      74: 62,

      /*! Conditions:: INITIAL */
      /*! Rule::       $ */
      75: 1
    },

    rules: [
      /*  0: */  /^(?:\s+|(#[^\n\r]*|\/\*([^*]|\*([^\/]|\\\/))*\*\/))/,
      /*  1: */  /^(?:(@(?:(?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(((?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀])|\.)*(?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀]))?)?:)(?:((?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|:|\d|(?:(?:%(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f]))|(?:\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀])|\.|:|(?:(?:%(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f]))|(?:\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*))))/,
      /*  2: */  /^(?:(@(?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(((?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀])|\.)*(?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀]))?)?:)))/,
      /*  3: */  /^(?:(@([A-Za-z])+((-([^\W_])+))*))/,
      /*  4: */  /^(?:@)/,
      /*  5: */  /^(?:((?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(((?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀])|\.)*(?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀]))?)?:)(?:((?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|:|\d|(?:(?:%(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f]))|(?:\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀])|\.|:|(?:(?:%(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f]))|(?:\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*)))/,
      /*  6: */  /^(?:(\{((?:([+-])?(\d)+))((,(((?:([+-])?(\d)+))|\*)?))?\}))/,
      /*  7: */  /^(?:(([+-])?(((\d)+\.(\d)*((?:[Ee]([+-])?(\d)+)))|((\.)?(\d)+((?:[Ee]([+-])?(\d)+))))))/,
      /*  8: */  /^(?:(([+-])?(\d)*\.(\d)+))/,
      /*  9: */  /^(?:(([+-])?(\d)+))/,
      /* 10: */  /^(?:{ANON})/,
      /* 11: */  /^(?:(<([^\u0000- "<>\\\^`{-}]|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])))*>))/,
      /* 12: */  /^(?:((?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(((?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀])|\.)*(?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀]))?)?:))/,
      /* 13: */  /^(?:a)/,
      /* 14: */  /^(?:(\/([^\n\r\/\\]|\\[$(-+\--\/?\[-\^nrt{-}]|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])))+\/[imsx]*))/,
      /* 15: */  /^(?:(_:((?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|\d)(((?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀])|\.)*(?:(?:(?:[A-Z]|[a-z]|[À-Ö]|[Ø-ö]|[ø-˿]|[Ͱ-ͽ]|[Ϳ-῿]|[‌‍]|[⁰-↏]|[Ⰰ-⿯]|[、-퟿]|[豈-﷏]|[ﷰ-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])|_|_)|-|\d|[·]|[̀-ͯ]|[‿⁀]))?))/,
      /* 16: */  /^(?:(\{([^%\\]|\\[%\\]|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])))*%\}))/,
      /* 17: */  /^(?:('''(('|'')?([^'\\]|(?:\\["'\\bfnrt])|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f]))))*'''(?:@([A-Za-z])+((-([^\W_])+))*)))/,
      /* 18: */  /^(?:("""(("|"")?([^"\\]|(?:\\["'\\bfnrt])|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f]))))*"""(?:@([A-Za-z])+((-([^\W_])+))*)))/,
      /* 19: */  /^(?:('([^\n\r'\\]|(?:\\["'\\bfnrt])|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])))*'(?:@([A-Za-z])+((-([^\W_])+))*)))/,
      /* 20: */  /^(?:("([^\n\r"\\]|(?:\\["'\\bfnrt])|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])))*"(?:@([A-Za-z])+((-([^\W_])+))*)))/,
      /* 21: */  /^(?:('''(('|'')?([^'\\]|(?:\\["'\\bfnrt])|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f]))))*'''))/,
      /* 22: */  /^(?:("""(("|"")?([^"\\]|(?:\\["'\\bfnrt])|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f]))))*"""))/,
      /* 23: */  /^(?:('([^\n\r'\\]|(?:\\["'\\bfnrt])|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])))*'))/,
      /* 24: */  /^(?:("([^\n\r"\\]|(?:\\["'\\bfnrt])|(?:\\u(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])|\\U(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])(?:\d|[A-F]|[a-f])))*"))/,
      /* 25: */  /^(?:([Bb][Aa][Ss][Ee]))/,
      /* 26: */  /^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,
      /* 27: */  /^(?:([Ii][Mm][Pp][Oo][Rr][Tt]))/,
      /* 28: */  /^(?:([Ss][Tt][Aa][Rr][Tt]))/,
      /* 29: */  /^(?:([Ee][Xx][Tt][Ee][Rr][Nn][Aa][Ll]))/,
      /* 30: */  /^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,
      /* 31: */  /^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,
      /* 32: */  /^(?:([Ee][Xx][Tt][Rr][Aa]))/,
      /* 33: */  /^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,
      /* 34: */  /^(?:([Bb][Nn][Oo][Dd][Ee]))/,
      /* 35: */  /^(?:([Ii][Rr][Ii]))/,
      /* 36: */  /^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,
      /* 37: */  /^(?:([Aa][Nn][Dd]))/,
      /* 38: */  /^(?:([Oo][Rr]))/,
      /* 39: */  /^(?:([No][Oo][Tt]))/,
      /* 40: */  /^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,
      /* 41: */  /^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,
      /* 42: */  /^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,
      /* 43: */  /^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,
      /* 44: */  /^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,
      /* 45: */  /^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,
      /* 46: */  /^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,
      /* 47: */  /^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,
      /* 48: */  /^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,
      /* 49: */  /^(?:=)/,
      /* 50: */  /^(?:\/\/)/,
      /* 51: */  /^(?:\{)/,
      /* 52: */  /^(?:\})/,
      /* 53: */  /^(?:&)/,
      /* 54: */  /^(?:\|\|)/,
      /* 55: */  /^(?:\|)/,
      /* 56: */  /^(?:,)/,
      /* 57: */  /^(?:\()/,
      /* 58: */  /^(?:\))/,
      /* 59: */  /^(?:\[)/,
      /* 60: */  /^(?:\])/,
      /* 61: */  /^(?:\$)/,
      /* 62: */  /^(?:!)/,
      /* 63: */  /^(?:\^\^)/,
      /* 64: */  /^(?:\^)/,
      /* 65: */  /^(?:\.)/,
      /* 66: */  /^(?:~)/,
      /* 67: */  /^(?:;)/,
      /* 68: */  /^(?:\*)/,
      /* 69: */  /^(?:\+)/,
      /* 70: */  /^(?:\?)/,
      /* 71: */  /^(?:-)/,
      /* 72: */  /^(?:%)/,
      /* 73: */  /^(?:true)/,
      /* 74: */  /^(?:false)/,
      /* 75: */  /^(?:$)/,
      /* 76: */  /^(?:[\w\-]+)/,
      /* 77: */  /^(?:.)/
    ],

    conditions: {
      'INITIAL': {
        rules: [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77
        ],

        inclusive: true
      }
    }
  };
  Object.keys(lexer.conditions).forEach(c => lexer.conditions[c].rules.unshift(null))
  return lexer;
}();
parser.lexer = lexer;

/*
    ShEx parser in the Jison parser generator format.
  */

  var UNBOUNDED = -1;

  var ShExUtil = require("@shexjs/core").Util;

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser._imports = Parser._sourceMap = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      pnameEscapeReplacements = {
        '\\': '\\', "'": "'", '"': '"',
        'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
      };


  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };
  }

  function unescapeLangString(string, trimLength) {
    var at = string.lastIndexOf("@");
    var lang = string.substr(at);
    string = string.substr(0, at);
    var u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    var end = regexp.lastIndexOf("/");
    var s = regexp.substr(1, end-1);
    var regexpEscapeReplacements = {
      '.': "\\.", '\\': "\\\\", '?': "\\?", '*': "\\*", '+': "\\+",
      '{': "\\{", '}': "\\}", '(': "\\(", ')': "\\)", '|': "\\|",
      '^': "\\^", '$': "\\$", '[': "\\[", ']': "\\]", '/': "\\/",
      't': '\\t', 'n': '\\n', 'r': '\\r', '-': "\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    var ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error (e, yy) {
    const hash = {
      text: yy.lexer.match,
      // token: this.terminals_[symbol] || symbol,
      line: yy.lexer.yylineno,
      loc: yy.lexer.yylloc,
      // expected: expected
      pos: yy.lexer.showPosition()
    }
    e.hash = hash;
    if (Parser.recoverable) {
      Parser.recoverable(e)
    } else {
      throw e;
      Parser.reset();
    }
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix, yy) {
    if (!(prefix in Parser._prefixes))
      error(new Error('Parse error; unknown prefix "' + prefix + ':"'), yy);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape, yy) {
    if (Parser.productions && label in Parser.productions)
      error(new Error("Structural error: "+label+" is a triple expression"), yy);
    if (!Parser.shapes)
      Parser.shapes = new Map();
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace")
        Parser.shapes[label] = shape;
      else if (Parser.options.duplicateShape !== "ignore")
        error(new Error("Parse error: "+label+" already defined"), yy);
    } else {
      shape.id = label;
      Parser.shapes[label] = shape;
    }
  }

  // Add a production to the map
  function addProduction (label, production, yy) {
    if (Parser.shapes && label in Parser.shapes)
      error(new Error("Structural error: "+label+" is a shape expression"), yy);
    if (!Parser.productions)
      Parser.productions = new Map();
    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace")
        Parser.productions[label] = production;
      else if (Parser.options.duplicateShape !== "ignore")
        error(new Error("Parse error: "+label+" already defined"), yy);
    } else
      Parser.productions[label] = production;
  }

  function addSourceMap (obj, yy) {
    if (!Parser._sourceMap)
      Parser._sourceMap = new Map();
    let list = Parser._sourceMap.get(obj)
    if (!list)
      Parser._sourceMap.set(obj, list = []);
    list.push(yy.lexer.yylloc);
    return obj;
  }

  // shapeJunction judiciously takes a shapeAtom and an optional list of con/disjuncts.
  // No created Shape{And,Or,Not} will have a `nested` shapeExpr.
  // Don't nonest arguments to shapeJunction.
  // shapeAtom emits `nested` so nonest every argument that can be a shapeAtom, i.e.
  //   shapeAtom, inlineShapeAtom, shapeAtomNoRef
  //   {,inline}shape{And,Or,Not}
  //   this does NOT include shapeOrRef or nodeConstraint.
  function shapeJunction (type, shapeAtom, juncts) {
    if (juncts.length === 0) {
      return nonest(shapeAtom);
    } else if (shapeAtom.type === type && !shapeAtom.nested) {
      nonest(shapeAtom).shapeExprs = nonest(shapeAtom).shapeExprs.concat(juncts);
      return shapeAtom;
    } else {
      return { type: type, shapeExprs: [nonest(shapeAtom)].concat(juncts) };
    }
  }

  // strip out .nested attribute
  function nonest (shapeAtom) {
    delete shapeAtom.nested;
    return shapeAtom;
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };

function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();

        


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = shExJison;
  exports.Parser = shExJison.Parser;
  exports.parse = function () {
    return shExJison.parse.apply(shExJison, arguments);
  };
  
}
